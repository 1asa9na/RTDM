<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="file:///C|/develop/openmp/Server/qawno/xml/pawndoc.xsl" type="text/xsl"?>
<doc source="C:\develop\openmp\Server\gamemodes\rtd.pwn">
	<assembly>
		<name>rtd.pwn</name>
	</assembly>

	<!-- general -->
	<general>
		<library name="open.mp" summary="open.mp includes entry point.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="args" summary="Script arguments support functions.">  <license>  (c) Copyright 2005, ITB CompuPhase  This file is provided as is (no warranties).  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="console" summary="Console output.">  <license>  (c) Copyright 1998-2011, ITB CompuPhase  This file is provided as is (no warranties).  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="core" summary="Core functions.">  <license>  (c) Copyright 1998-2005, ITB CompuPhase  This file is provided as is (no warranties).  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="file" summary="File input/output functions.">  <license>  (c) Copyright 2004-2005, ITB CompuPhase  This file is provided as is (no warranties).  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <library name="time" summary="Float arithmetic.">  <license>  (c) Copyright 1999, Artran, Inc.  Written by Greg Garner (gmg@artran.com)  Modified in March 2001 to include user defined  operators for the floating point functions.  This file is provided as is (no warranties).  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <library name="string" summary="String functions.">  <license>  (c) Copyright 2005, ITB CompuPhase  This file is provided as is (no warranties).  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="time" summary="Date/time functions.">  <license>  (c) Copyright 2001-2005, ITB CompuPhase  This file is provided as is (no warranties).  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <library name="omp_core" summary="open.mp core functions and defines.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <library name="omp_player" summary="open.mp player functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <library name="omp_actor" summary="open.mp actor functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="omp_checkpoint" summary="open.mp checkpoint functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <library name="omp_class" summary="open.mp class functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="omp_database" summary="open.mp SQLite functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <library name="omp_dialog" summary="open.mp dialog functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <library name="omp_gangzone" summary="open.mp text draw functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="omp_http" summary="open.mp legacy HTTP include.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p /><p/> <p/><p/> <library name="omp_menu" summary="open.mp menu functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="omp_network" summary="open.mp core functions and defines.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <library name="omp_object" summary="open.mp object functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <library name="omp_pickup" summary="open.mp pickup functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library name="omp_textdraw" summary="open.mp text draw functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <library name="omp_variable" summary="open.mp global data functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <library name="omp_vehicle" summary="open.mp vehicle functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <p/><p/> <library name="omp_textlabel" summary="open.mp 3D text label functions.">  <license>  This Source Code Form is subject to the terms of the Mozilla Public License,  v. 2.0. If a copy of the MPL was not distributed with this file, You can  obtain one at http://mozilla.org/MPL/2.0/.  The original code is copyright (c) 2023, open.mp team and contributors.  </license>  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  </library> <p/> <p/><p/> <library  name="sscanf"  summary="Extracts structured information from strings."  license="Copyright (c) 2022 Alex &quot;Y_Less&quot; Cole.  Licensed under MPL 1.1"  >  <summary pawndoc="true">  This library uses the enhanced <em>pawndoc.xsl</em> from  <a href="https://github.com/pawn-lang/pawndoc">pawn-lang/pawndoc</a>.  This XSL has features such as library and markdown support, and will not  render this message when used.  </summary>  <remarks>  This is the <em>sscanf</em> plugin, which provides the <c>sscanf</c>  function to extract basic structured data from strings.  This is slightly  different to regular expressions, but both have their place.  A regular  expression gives you total control over the exact structure of data down  to the character level; however, extracting structured data like numbers  using it is tricky.  Conversely this gives slightly higher-level  <em>specifiers</em> which can easily extract data types, at the expense  of fine-grained control.  To convert a string in to two numbers would  look like:  <code>  new num1, num2;                                                          <br />  sscanf("45 100", "ii", num1, num2);  </code>  <c>ii</c> is the specifier string, which here means "integer integer";  stating that the input string should be two whole numbers in a row (which  is - <c>"45 100"</c>).  <c>num1</c> and <c>num2</c> are the destination  variables to store the found numbers in (after conversion from strings).  You can check if the conversion failed by looking for a non-naught return  value:  <code>  new num1, num2;                                                          <br />  if (sscanf("hello 100", "ii", num1, num2))                               <br />  {                                                                        <br /><indent />  printf("The input was not two numbers.");                            <br />  }  </code>  This will fail because <c>"hello"</c> is not a whole number (or indeed  any type of number at all).  For more information on using the function  refer to the tutorials or the reference documentation in  <a href="https://github.com/Y-Less/sscanf/blob/master/README.md">the  attached readme</a>.  </remarks>  </library> <p/> <p/>
	</general>

	<members>

		<!-- enumerations -->
		<member name="T:CAOBJECTINFO" value="4">
			<tagname value="CAOBJECTINFO"/>
			<member name="C:ColdAndreadsID" value="0">
			</member>
			<member name="C:ObjectID" value="1">
			</member>
			<member name="C:ObjectType" value="2">
			</member>
			<member name="C:ObjectUsed" value="3">
				<tagname value="bool"/>
			</member>
		</member>
		<member name="T:ECPInfo" value="10">
			<tagname value="ECPInfo"/>
			<member name="C:cp_player" value="0">
			</member>
			<member name="C:cp_team" value="1">
			</member>
			<member name="C:occupied" value="2">
				<tagname value="bool"/>
			</member>
			<member name="C:cp_x" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:cp_y" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:cp_z" value="5">
				<tagname value="Float"/>
			</member>
			<member name="C:cp_mapicon" value="6">
			</member>
			<member name="C:cp_bomb_timer" value="7">
			</member>
			<member name="C:cp_defuse_timer" value="8">
			</member>
			<member name="C:is_active" value="9">
				<tagname value="bool"/>
			</member>
		</member>
		<member name="T:EClassInfo" value="38">
			<tagname value="EClassInfo"/>
			<member name="C:x" value="0">
				<tagname value="Float"/>
			</member>
			<member name="C:y" value="1">
				<tagname value="Float"/>
			</member>
			<member name="C:z" value="2">
				<tagname value="Float"/>
			</member>
			<member name="C:a" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:title" value="4">
				<size value="32"/>
			</member>
			<member name="C:skin" value="36">
			</member>
			<member name="C:color" value="37">
			</member>
		</member>
		<member name="T:EPerkInfo" value="18">
			<tagname value="EPerkInfo"/>
			<member name="C:perk_health" value="0">
			</member>
			<member name="C:perk_armour" value="1">
			</member>
			<member name="C:perk_weapons" value="2">
				<size value="3"/>
			</member>
			<member name="C:perk_weapon_ammo" value="5">
				<size value="3"/>
			</member>
			<member name="C:perk_title" value="8">
				<size value="10"/>
			</member>
		</member>
		<member name="T:EPickupInfo" value="8">
			<tagname value="EPickupInfo"/>
			<member name="C:is_picked_up" value="0">
				<tagname value="bool"/>
			</member>
			<member name="C:picked_up_by_team" value="1">
			</member>
			<member name="C:pickup_x" value="2">
				<tagname value="Float"/>
			</member>
			<member name="C:pickup_y" value="3">
				<tagname value="Float"/>
			</member>
			<member name="C:pickup_z" value="4">
				<tagname value="Float"/>
			</member>
			<member name="C:pickup_object" value="5">
			</member>
			<member name="C:pickup_mapicon" value="6">
			</member>
			<member name="C:pickup_timer" value="7">
			</member>
		</member>
		<member name="T:EPlayerInfo" value="10">
			<tagname value="EPlayerInfo"/>
			<member name="C:is_player_spawned" value="0">
				<tagname value="bool"/>
			</member>
			<member name="C:kills" value="1">
			</member>
			<member name="C:deaths" value="2">
			</member>
			<member name="C:is_carrying_bomb" value="3">
				<tagname value="bool"/>
			</member>
			<member name="C:current_textdraw" value="4">
				<tagname value="PlayerText"/>
			</member>
			<member name="C:player_vehicle" value="5">
			</member>
			<member name="C:player_perk" value="6">
			</member>
			<member name="C:player_change_team" value="7">
				<tagname value="bool"/>
			</member>
			<member name="C:is_player_drunk" value="8">
				<tagname value="bool"/>
			</member>
			<member name="C:player_drunk_timer" value="9">
			</member>
		</member>
		<member name="T:ESkillInfo" value="5">
			<tagname value="ESkillInfo"/>
			<member name="C:skill_king_charges" value="0">
				<size value="5"/>
			</member>
		</member>
		<member name="T:MAX_CARMODS" value="16">
			<tagname value="t_CARMODTYPE"/>
			<member name="C:UNKNOWN_CARMODTYPE" value="-1">
			</member>
			<member name="C:CARMODTYPE_NONE" value="-1">
			</member>
			<member name="C:CARMODTYPE_SPOILER" value="0">
			</member>
			<member name="C:CARMODTYPE_HOOD" value="1">
			</member>
			<member name="C:CARMODTYPE_ROOF" value="2">
			</member>
			<member name="C:CARMODTYPE_SIDESKIRT" value="3">
			</member>
			<member name="C:CARMODTYPE_LAMPS" value="4">
			</member>
			<member name="C:CARMODTYPE_NITRO" value="5">
			</member>
			<member name="C:CARMODTYPE_EXHAUST" value="6">
			</member>
			<member name="C:CARMODTYPE_WHEELS" value="7">
			</member>
			<member name="C:CARMODTYPE_STEREO" value="8">
			</member>
			<member name="C:CARMODTYPE_HYDRAULICS" value="9">
			</member>
			<member name="C:CARMODTYPE_FRONT_BUMPER" value="10">
			</member>
			<member name="C:CARMODTYPE_REAR_BUMPER" value="11">
			</member>
			<member name="C:CARMODTYPE_VENT_RIGHT" value="12">
			</member>
			<member name="C:CARMODTYPE_VENT_LEFT" value="13">
			</member>
			<member name="C:CARMODTYPE_FRONT_BULLBAR" value="14">
			</member>
			<member name="C:CARMODTYPE_REAR_BULLBAR" value="15">
			</member>
			<referrer name="_@CARMODTYPE"/>
			<library>omp_vehicle</library> 
		</member>
		<member name="T:MAX_FIGHT_STYLES" value="17">
			<tagname value="t_FIGHT_STYLE"/>
			<member name="C:UNKNOWN_FIGHT_STYLE" value="-1">
			</member>
			<member name="C:FIGHT_STYLE_NORMAL" value="4">
			</member>
			<member name="C:FIGHT_STYLE_BOXING" value="5">
			</member>
			<member name="C:FIGHT_STYLE_KUNGFU" value="6">
			</member>
			<member name="C:FIGHT_STYLE_KNEEHEAD" value="7">
			</member>
			<member name="C:FIGHT_STYLE_GRABKICK" value="15">
			</member>
			<member name="C:FIGHT_STYLE_ELBOW" value="16">
			</member>
			<referrer name="_@FIGHT_STYLE"/>
			<library>omp_player</library> 
		</member>
		<member name="T:MAX_VEHICLE_MODEL_INFOS" value="10">
			<tagname value="t_VEHICLE_MODEL_INFO"/>
			<member name="C:UNKNOWN_VEHICLE_MODEL_INFO" value="-1">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_SIZE" value="1">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_FRONT_SEAT" value="2">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_REAR_SEAT" value="3">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_PETROL_CAP" value="4">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_WHEELS_FRONT" value="5">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_WHEELS_REAR" value="6">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_WHEELS_MID" value="7">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_FRONT_BUMPER_Z" value="8">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_REAR_BUMPER_Z" value="9">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_FRONTSEAT" value="2">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_REARSEAT" value="3">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_PETROLCAP" value="4">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_WHEELSFRONT" value="5">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_WHEELSREAR" value="6">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_WHEELSMID" value="7">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_FRONT_BUMPER" value="8">
			</member>
			<member name="C:VEHICLE_MODEL_INFO_REAR_BUMPER" value="9">
			</member>
			<referrer name="_@VEHICLE_MODEL_INFO"/>
			<library>omp_vehicle</library> 
		</member>
		<member name="T:MAX_WEAPONS" value="47">
			<tagname value="t_WEAPON"/>
			<member name="C:UNKNOWN_WEAPON" value="-1">
			</member>
			<member name="C:REASON_VEHICLE" value="49">
			</member>
			<member name="C:REASON_HELICOPTER_BLADES" value="50">
			</member>
			<member name="C:REASON_EXPLOSION" value="51">
			</member>
			<member name="C:REASON_DROWN" value="53">
			</member>
			<member name="C:REASON_COLLISION" value="54">
			</member>
			<member name="C:REASON_SPLAT" value="54">
			</member>
			<member name="C:REASON_CONNECT" value="200">
			</member>
			<member name="C:REASON_DISCONNECT" value="201">
			</member>
			<member name="C:REASON_SUICIDE" value="255">
			</member>
			<member name="C:WEAPON_UNKNOWN" value="-1">
			</member>
			<member name="C:WEAPON_VEHICLE" value="49">
			</member>
			<member name="C:WEAPON_DROWN" value="53">
			</member>
			<member name="C:WEAPON_COLLISION" value="54">
			</member>
			<member name="C:WEAPON_SPLAT" value="54">
			</member>
			<member name="C:WEAPON_FIST" value="0">
			</member>
			<member name="C:WEAPON_BRASSKNUCKLE" value="1">
			</member>
			<member name="C:WEAPON_GOLFCLUB" value="2">
			</member>
			<member name="C:WEAPON_NITESTICK" value="3">
			</member>
			<member name="C:WEAPON_NIGHTSTICK" value="3">
			</member>
			<member name="C:WEAPON_KNIFE" value="4">
			</member>
			<member name="C:WEAPON_BAT" value="5">
			</member>
			<member name="C:WEAPON_SHOVEL" value="6">
			</member>
			<member name="C:WEAPON_POOLSTICK" value="7">
			</member>
			<member name="C:WEAPON_KATANA" value="8">
			</member>
			<member name="C:WEAPON_CHAINSAW" value="9">
			</member>
			<member name="C:WEAPON_DILDO" value="10">
			</member>
			<member name="C:WEAPON_DILDO2" value="11">
			</member>
			<member name="C:WEAPON_VIBRATOR" value="12">
			</member>
			<member name="C:WEAPON_VIBRATOR2" value="13">
			</member>
			<member name="C:WEAPON_FLOWER" value="14">
			</member>
			<member name="C:WEAPON_CANE" value="15">
			</member>
			<member name="C:WEAPON_GRENADE" value="16">
			</member>
			<member name="C:WEAPON_TEARGAS" value="17">
			</member>
			<member name="C:WEAPON_MOLTOV" value="18">
			</member>
			<member name="C:WEAPON_MOLOTOV" value="18">
			</member>
			<member name="C:WEAPON_COLT45" value="22">
			</member>
			<member name="C:WEAPON_SILENCED" value="23">
			</member>
			<member name="C:WEAPON_DEAGLE" value="24">
			</member>
			<member name="C:WEAPON_SHOTGUN" value="25">
			</member>
			<member name="C:WEAPON_SAWEDOFF" value="26">
			</member>
			<member name="C:WEAPON_SHOTGSPA" value="27">
			</member>
			<member name="C:WEAPON_UZI" value="28">
			</member>
			<member name="C:WEAPON_MP5" value="29">
			</member>
			<member name="C:WEAPON_AK47" value="30">
			</member>
			<member name="C:WEAPON_M4" value="31">
			</member>
			<member name="C:WEAPON_TEC9" value="32">
			</member>
			<member name="C:WEAPON_RIFLE" value="33">
			</member>
			<member name="C:WEAPON_SNIPER" value="34">
			</member>
			<member name="C:WEAPON_ROCKETLAUNCHER" value="35">
			</member>
			<member name="C:WEAPON_HEATSEEKER" value="36">
			</member>
			<member name="C:WEAPON_FLAMETHROWER" value="37">
			</member>
			<member name="C:WEAPON_MINIGUN" value="38">
			</member>
			<member name="C:WEAPON_SATCHEL" value="39">
			</member>
			<member name="C:WEAPON_BOMB" value="40">
			</member>
			<member name="C:WEAPON_SPRAYCAN" value="41">
			</member>
			<member name="C:WEAPON_FIREEXTINGUISHER" value="42">
			</member>
			<member name="C:WEAPON_CAMERA" value="43">
			</member>
			<member name="C:WEAPON_NIGHT_VISION_GOGGLES" value="44">
			</member>
			<member name="C:WEAPON_THERMAL_GOGGLES" value="45">
			</member>
			<member name="C:WEAPON_PARACHUTE" value="46">
			</member>
			<referrer name="_@WEAPON"/>
			<library>open.mp</library>  <summary>Weapons</summary> 
		</member>
		<member name="T:MAX_WEAPONSKILLS" value="11">
			<tagname value="t_WEAPONSKILL"/>
			<member name="C:UNKNOWN_WEAPONSKILL" value="-1">
			</member>
			<member name="C:WEAPONSKILL_PISTOL" value="0">
			</member>
			<member name="C:WEAPONSKILL_PISTOL_SILENCED" value="1">
			</member>
			<member name="C:WEAPONSKILL_DESERT_EAGLE" value="2">
			</member>
			<member name="C:WEAPONSKILL_SHOTGUN" value="3">
			</member>
			<member name="C:WEAPONSKILL_SAWNOFF_SHOTGUN" value="4">
			</member>
			<member name="C:WEAPONSKILL_SPAS12_SHOTGUN" value="5">
			</member>
			<member name="C:WEAPONSKILL_MICRO_UZI" value="6">
			</member>
			<member name="C:WEAPONSKILL_MP5" value="7">
			</member>
			<member name="C:WEAPONSKILL_AK47" value="8">
			</member>
			<member name="C:WEAPONSKILL_M4" value="9">
			</member>
			<member name="C:WEAPONSKILL_SNIPERRIFLE" value="10">
			</member>
			<referrer name="_@WEAPONSKILL"/>
			<library>omp_player</library> 
		</member>
		<member name="T:MAX_WEAPON_SLOTS" value="13">
			<tagname value="t_WEAPON_SLOT"/>
			<member name="C:UNKNOWN_WEAPON_SLOT" value="-1">
			</member>
			<member name="C:WEAPON_SLOT_UNKNOWN" value="-1">
			</member>
			<member name="C:WEAPON_SLOT_UNARMED" value="0">
			</member>
			<member name="C:WEAPON_SLOT_MELEE" value="1">
			</member>
			<member name="C:WEAPON_SLOT_PISTOL" value="2">
			</member>
			<member name="C:WEAPON_SLOT_SHOTGUN" value="3">
			</member>
			<member name="C:WEAPON_SLOT_MACHINE_GUN" value="4">
			</member>
			<member name="C:WEAPON_SLOT_ASSAULT_RIFLE" value="5">
			</member>
			<member name="C:WEAPON_SLOT_LONG_RIFLE" value="6">
			</member>
			<member name="C:WEAPON_SLOT_ARTILLERY" value="7">
			</member>
			<member name="C:WEAPON_SLOT_EXPLOSIVES" value="8">
			</member>
			<member name="C:WEAPON_SLOT_EQUIPMENT" value="9">
			</member>
			<member name="C:WEAPON_SLOT_GIFT" value="10">
			</member>
			<member name="C:WEAPON_SLOT_GADGET" value="11">
			</member>
			<member name="C:WEAPON_SLOT_DETONATOR" value="12">
			</member>
			<referrer name="_@WEAPON_SLOT"/>
			<library>open.mp</library>  <summary>Weapon Slots</summary> 
		</member>
		<member name="T:__BULLET_HIT_TYPE" value="5">
			<tagname value="t_BULLET_HIT_TYPE"/>
			<member name="C:UNKNOWN_BULLET_HIT_TYPE" value="-1">
			</member>
			<member name="C:BULLET_HIT_TYPE_NONE" value="0">
			</member>
			<member name="C:BULLET_HIT_TYPE_PLAYER" value="1">
			</member>
			<member name="C:BULLET_HIT_TYPE_VEHICLE" value="2">
			</member>
			<member name="C:BULLET_HIT_TYPE_OBJECT" value="3">
			</member>
			<member name="C:BULLET_HIT_TYPE_PLAYER_OBJECT" value="4">
			</member>
			<referrer name="_@BULLET_HIT_TYPE"/>
			<library>omp_player</library> 
		</member>
		<member name="T:__CAM_MODE" value="57">
			<tagname value="t_CAM_MODE"/>
			<member name="C:UNKNOWN_CAM_MODE" value="-1">
			</member>
			<member name="C:CAM_MODE_DISCONNECTED" value="-1">
			</member>
			<member name="C:CAM_MODE_NONE" value="0">
			</member>
			<member name="C:CAM_MODE_BEHINDCAR" value="3">
			</member>
			<member name="C:CAM_MODE_FOLLOWPED" value="4">
			</member>
			<member name="C:CAM_MODE_SNIPER" value="7">
			</member>
			<member name="C:CAM_MODE_ROCKETLAUNCHER" value="8">
			</member>
			<member name="C:CAM_MODE_FIXED" value="15">
			</member>
			<member name="C:CAM_MODE_1STPERSON" value="16">
			</member>
			<member name="C:CAM_MODE_CAM_ON_A_STRING" value="18">
			</member>
			<member name="C:CAM_MODE_BEHINDBOAT" value="22">
			</member>
			<member name="C:CAM_MODE_CAMERA" value="46">
			</member>
			<member name="C:CAM_MODE_ROCKETLAUNCHER_HS" value="51">
			</member>
			<member name="C:CAM_MODE_AIMWEAPON" value="53">
			</member>
			<member name="C:CAM_MODE_AIMWEAPON_FROMCAR" value="55">
			</member>
			<member name="C:CAM_MODE_DW_HELI_CHASE" value="56">
			</member>
			<referrer name="_@CAM_MODE"/>
			<library>omp_player</library> 
		</member>
		<member name="T:__CLICK_SOURCE" value="1">
			<tagname value="t_CLICK_SOURCE"/>
			<member name="C:UNKNOWN_CLICK_SOURCE" value="-1">
			</member>
			<member name="C:CLICK_SOURCE_SCOREBOARD" value="0">
			</member>
			<referrer name="_@CLICK_SOURCE"/>
			<library>omp_player</library> 
		</member>
		<member name="T:__CONNSTAT" value="9">
			<tagname value="t_CONNECTION_STATUS"/>
			<member name="C:UNKNOWN_CONNECTION_STATUS" value="-1">
			</member>
			<member name="C:CONNECTION_STATUS_NO_ACTION" value="0">
			</member>
			<member name="C:CONNECTION_STATUS_DISCONNECT_ASAP" value="1">
			</member>
			<member name="C:CONNECTION_STATUS_DISCONNECT_ASAP_SILENTLY" value="2">
			</member>
			<member name="C:CONNECTION_STATUS_DISCONNECT_ON_NO_ACK" value="3">
			</member>
			<member name="C:CONNECTION_STATUS_REQUESTED_CONNECTION" value="4">
			</member>
			<member name="C:CONNECTION_STATUS_HANDLING_CONNECTION_REQUEST" value="5">
			</member>
			<member name="C:CONNECTION_STATUS_UNVERIFIED_SENDER" value="6">
			</member>
			<member name="C:CONNECTION_STATUS_SET_ENCRYPTION_ON_MULTIPLE_16_BYTE_PACKET" value="7">
			</member>
			<member name="C:CONNECTION_STATUS_CONNECTED" value="8">
			</member>
			<member name="C:CONNSTAT_NO_ACTION" value="0">
			</member>
			<member name="C:CONNSTAT_DISCONNECT_ASAP" value="1">
			</member>
			<member name="C:CONNSTAT_DISCONNECT_ASAP_SILNT" value="2">
			</member>
			<member name="C:CONNSTAT_DISCONNECT_ON_NO_ACK" value="3">
			</member>
			<member name="C:CONNSTAT_REQUESTED_CONNECTION" value="4">
			</member>
			<member name="C:CONNSTAT_HANDLING_CONN_REQ" value="5">
			</member>
			<member name="C:CONNSTAT_UNVERIFIED_SENDER" value="6">
			</member>
			<member name="C:CONNSTAT_SET_ENCRYPTION" value="7">
			</member>
			<member name="C:CONNSTAT_CONNECTED" value="8">
			</member>
			<referrer name="_@CONNECTION_STATUS"/>
			<library>omp_network</library>  <summary>Connection statuses</summary> 
		</member>
		<member name="T:__CP_TYPE" value="9">
			<tagname value="t_CP_TYPE"/>
			<member name="C:UNKNOWN_CP_TYPE" value="-1">
			</member>
			<member name="C:CP_TYPE_GROUND_NORMAL" value="0">
			</member>
			<member name="C:CP_TYPE_GROUND_FINISH" value="1">
			</member>
			<member name="C:CP_TYPE_GROUND_EMPTY" value="2">
			</member>
			<member name="C:CP_TYPE_AIR_NORMAL" value="3">
			</member>
			<member name="C:CP_TYPE_AIR_FINISH" value="4">
			</member>
			<member name="C:CP_TYPE_AIR_ROTATING" value="5">
			</member>
			<member name="C:CP_TYPE_AIR_STROBING" value="6">
			</member>
			<member name="C:CP_TYPE_AIR_SWINGING" value="7">
			</member>
			<member name="C:CP_TYPE_AIR_BOBBING" value="8">
			</member>
			<referrer name="_@CP_TYPE"/>
			<library>omp_checkpoint</library> 
		</member>
		<member name="T:__DIALOG_STYLE" value="6">
			<tagname value="t_DIALOG_STYLE"/>
			<member name="C:UNKNOWN_DIALOG_STYLE" value="-1">
			</member>
			<member name="C:DIALOG_STYLE_MSGBOX" value="0">
			</member>
			<member name="C:DIALOG_STYLE_INPUT" value="1">
			</member>
			<member name="C:DIALOG_STYLE_LIST" value="2">
			</member>
			<member name="C:DIALOG_STYLE_PASSWORD" value="3">
			</member>
			<member name="C:DIALOG_STYLE_TABLIST" value="4">
			</member>
			<member name="C:DIALOG_STYLE_TABLIST_HEADERS" value="5">
			</member>
			<referrer name="_@DIALOG_STYLE"/>
			<library>omp_dialog</library>  <summary>Player GUI dialog</summary> 
		</member>
		<member name="T:__DOWNLOAD_REQUEST" value="3">
			<tagname value="t_DOWNLOAD_REQUEST"/>
			<member name="C:UNKNOWN_DOWNLOAD_REQUEST" value="-1">
			</member>
			<member name="C:DOWNLOAD_REQUEST_EMPTY" value="0">
			</member>
			<member name="C:DOWNLOAD_REQUEST_MODEL_FILE" value="1">
			</member>
			<member name="C:DOWNLOAD_REQUEST_TEXTURE_FILE" value="2">
			</member>
			<referrer name="_@DOWNLOAD_REQUEST"/>
			<library>omp_network</library>  <summary>Artwork/NetModels</summary> 
		</member>
		<member name="T:__EDIT_RESPONSE" value="3">
			<tagname value="t_EDIT_RESPONSE"/>
			<member name="C:UNKNOWN_EDIT_RESPONSE" value="-1">
			</member>
			<member name="C:EDIT_RESPONSE_CANCEL" value="0">
			</member>
			<member name="C:EDIT_RESPONSE_FINAL" value="1">
			</member>
			<member name="C:EDIT_RESPONSE_UPDATE" value="2">
			</member>
			<referrer name="_@EDIT_RESPONSE"/>
			<library>omp_object</library> 
		</member>
		<member name="T:__FORCE_SYNC" value="3">
			<tagname value="t_FORCE_SYNC"/>
			<member name="C:UNKNOWN_FORCE_SYNC" value="-1">
			</member>
			<member name="C:SYNC_NONE" value="0">
			</member>
			<member name="C:SYNC_ALL" value="1">
			</member>
			<member name="C:SYNC_OTHER" value="2">
			</member>
			<referrer name="_@FORCE_SYNC"/>
			<library>omp_player</library> 
		</member>
		<member name="T:__HTTP_ERROR" value="7">
			<tagname value="t_HTTP_ERROR"/>
			<member name="C:UNKNOWN_HTTP_ERROR" value="-1">
			</member>
			<member name="C:HTTP_ERROR_BAD_HOST" value="1">
			</member>
			<member name="C:HTTP_ERROR_NO_SOCKET" value="2">
			</member>
			<member name="C:HTTP_ERROR_CANT_CONNECT" value="3">
			</member>
			<member name="C:HTTP_ERROR_CANT_WRITE" value="4">
			</member>
			<member name="C:HTTP_ERROR_CONTENT_TOO_BIG" value="5">
			</member>
			<member name="C:HTTP_ERROR_MALFORMED_RESPONSE" value="6">
			</member>
			<referrer name="_@HTTP_ERROR"/>
			<library>omp_http</library>  <summary>HTTP error response codes</summary>  <remarks>  These codes compliment ordinary HTTP response codes returned in 'responseCode'  (10x) (20x OK) (30x Moved) (40x Unauthorised) (50x Server Error)  </remarks> 
		</member>
		<member name="T:__HTTP_METHOD" value="4">
			<tagname value="t_HTTP_METHOD"/>
			<member name="C:UNKNOWN_HTTP_METHOD" value="-1">
			</member>
			<member name="C:HTTP_GET" value="1">
			</member>
			<member name="C:HTTP_POST" value="2">
			</member>
			<member name="C:HTTP_HEAD" value="3">
			</member>
			<referrer name="_@HTTP_METHOD"/>
			<library>omp_http</library>  <summary>HTTP request types</summary> 
		</member>
		<member name="T:__KEY" value="256">
			<tagname value="t_KEY"/>
			<member name="C:UNKNOWN_KEY" value="-1">
			</member>
			<member name="C:KEY_NONE" value="0">
			</member>
			<member name="C:KEY_ACTION" value="1">
			</member>
			<member name="C:KEY_CROUCH" value="2">
			</member>
			<member name="C:KEY_FIRE" value="4">
			</member>
			<member name="C:KEY_SPRINT" value="8">
			</member>
			<member name="C:KEY_SECONDARY_ATTACK" value="16">
			</member>
			<member name="C:KEY_JUMP" value="32">
			</member>
			<member name="C:KEY_LOOK_RIGHT" value="64">
			</member>
			<member name="C:KEY_HANDBRAKE" value="128">
			</member>
			<member name="C:KEY_LOOK_LEFT" value="256">
			</member>
			<member name="C:KEY_SUBMISSION" value="512">
			</member>
			<member name="C:KEY_LOOK_BEHIND" value="512">
			</member>
			<member name="C:KEY_WALK" value="1024">
			</member>
			<member name="C:KEY_ANALOG_UP" value="2048">
			</member>
			<member name="C:KEY_ANALOG_DOWN" value="4096">
			</member>
			<member name="C:KEY_ANALOG_LEFT" value="8192">
			</member>
			<member name="C:KEY_ANALOG_RIGHT" value="16384">
			</member>
			<member name="C:KEY_YES" value="65536">
			</member>
			<member name="C:KEY_NO" value="131072">
			</member>
			<member name="C:KEY_CTRL_BACK" value="262144">
			</member>
			<member name="C:KEY_UP" value="-128">
			</member>
			<member name="C:KEY_DOWN" value="128">
			</member>
			<member name="C:KEY_LEFT" value="-128">
			</member>
			<member name="C:KEY_RIGHT" value="128">
			</member>
			<referrer name="_@KEY"/>
			<library>omp_player</library>  <summary>Keys</summary> 
		</member>
		<member name="T:__LANDING_GEAR_STATE" value="2">
			<tagname value="t_LANDING_GEAR_STATE"/>
			<member name="C:LANDING_GEAR_STATE_DOWN" value="0">
			</member>
			<member name="C:LANDING_GEAR_STATE_UP" value="1">
			</member>
			<referrer name="_@LANDING_GEAR_STATE"/>
			<library>omp_vehicle</library> 
		</member>
		<member name="T:__MAPICON" value="4">
			<tagname value="t_MAPICON"/>
			<member name="C:UNKNOWN_MAPICON" value="-1">
			</member>
			<member name="C:MAPICON_LOCAL" value="0">
			</member>
			<member name="C:MAPICON_GLOBAL" value="1">
			</member>
			<member name="C:MAPICON_LOCAL_CHECKPOINT" value="2">
			</member>
			<member name="C:MAPICON_GLOBAL_CHECKPOINT" value="3">
			</member>
			<referrer name="_@MAPICON"/>
			<library>omp_player</library> 
		</member>
		<member name="T:__OBJECT_MATERIAL_SIZE" value="150">
			<tagname value="t_OBJECT_MATERIAL_SIZE"/>
			<member name="C:UNKNOWN_OBJECT_MATERIAL_SIZE" value="-1">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_32x32" value="10">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_64x32" value="20">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_64x64" value="30">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_128x32" value="40">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_128x64" value="50">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_128x128" value="60">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_256x32" value="70">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_256x64" value="80">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_256x128" value="90">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_256x256" value="100">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_512x64" value="110">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_512x128" value="120">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_512x256" value="130">
				<size value="10"/>
			</member>
			<member name="C:OBJECT_MATERIAL_SIZE_512x512" value="140">
				<size value="10"/>
			</member>
			<referrer name="_@OBJECT_MATERIAL_SIZE"/>
			<library>omp_object</library> 
		</member>
		<member name="T:__OBJECT_MATERIAL_TEXT_ALIGN" value="3">
			<tagname value="t_OBJECT_MATERIAL_TEXT_ALIGN"/>
			<member name="C:UNKNOWN_OBJECT_MATERIAL_TEXT_ALIGN" value="-1">
			</member>
			<member name="C:OBJECT_MATERIAL_TEXT_ALIGN_CENTRE" value="1">
			</member>
			<member name="C:OBJECT_MATERIAL_TEXT_ALIGN_CENTER" value="1">
			</member>
			<member name="C:OBJECT_MATERIAL_TEXT_ALIGN_RIGHT" value="2">
			</member>
			<member name="C:OBJECT_MATERIAL_TEXT_ALIGN_LEFT" value="0">
			</member>
			<member name="C:OBJECT_MATERIAL_TEXT_ALIGN_CENT" value="1">
			</member>
			<member name="C:OBJECT_MATERIAL_TEXT_ALIGN_RIGT" value="2">
			</member>
			<referrer name="_@OBJECT_MATERIAL_TEXT_ALIGN"/>
			<library>omp_object</library> 
		</member>
		<member name="T:__PLAYER_MARKERS_MODE" value="3">
			<tagname value="t_PLAYER_MARKERS_MODE"/>
			<member name="C:UNKNOWN_PLAYER_MARKERS_MODE" value="-1">
			</member>
			<member name="C:PLAYER_MARKERS_MODE_UNKNOWN" value="-1">
			</member>
			<member name="C:PLAYER_MARKERS_MODE_OFF" value="0">
			</member>
			<member name="C:PLAYER_MARKERS_MODE_GLOBAL" value="1">
			</member>
			<member name="C:PLAYER_MARKERS_MODE_STREAMED" value="2">
			</member>
			<referrer name="_@PLAYER_MARKERS_MODE"/>
			<library>omp_core</library>  <summary>Marker modes used by <c>ShowPlayerMarkers()</c></summary> 
		</member>
		<member name="T:__PLAYER_RECORDING_TYPE" value="3">
			<tagname value="t_PLAYER_RECORDING_TYPE"/>
			<member name="C:UNKNOWN_PLAYER_RECORDING_TYPE" value="-1">
			</member>
			<member name="C:PLAYER_RECORDING_TYPE_NONE" value="0">
			</member>
			<member name="C:PLAYER_RECORDING_TYPE_DRIVER" value="1">
			</member>
			<member name="C:PLAYER_RECORDING_TYPE_ONFOOT" value="2">
			</member>
			<referrer name="_@PLAYER_RECORDING_TYPE"/>
			<library>omp_player</library>  <summary>Recording for NPC playback</summary> 
		</member>
		<member name="T:__PLAYER_STATE" value="10">
			<tagname value="t_PLAYER_STATE"/>
			<member name="C:UNKNOWN_PLAYER_STATE" value="-1">
			</member>
			<member name="C:PLAYER_STATE_NONE" value="0">
			</member>
			<member name="C:PLAYER_STATE_ONFOOT" value="1">
			</member>
			<member name="C:PLAYER_STATE_DRIVER" value="2">
			</member>
			<member name="C:PLAYER_STATE_PASSENGER" value="3">
			</member>
			<member name="C:PLAYER_STATE_WASTED" value="7">
			</member>
			<member name="C:PLAYER_STATE_SPAWNED" value="8">
			</member>
			<member name="C:PLAYER_STATE_SPECTATING" value="9">
			</member>
			<referrer name="_@PLAYER_STATE"/>
			<library>omp_player</library>  <summary>States</summary> 
		</member>
		<member name="T:__SELECT_OBJECT" value="3">
			<tagname value="t_SELECT_OBJECT"/>
			<member name="C:UNKNOWN_SELECT_OBJECT" value="-1">
			</member>
			<member name="C:SELECT_OBJECT_GLOBAL_OBJECT" value="1">
			</member>
			<member name="C:SELECT_OBJECT_PLAYER_OBJECT" value="2">
			</member>
			<referrer name="_@SELECT_OBJECT"/>
			<library>omp_object</library> 
		</member>
		<member name="T:__SPECIAL_ACTION" value="69">
			<tagname value="t_SPECIAL_ACTION"/>
			<member name="C:UNKNOWN_SPECIAL_ACTION" value="-1">
			</member>
			<member name="C:SPECIAL_ACTION_NONE" value="0">
			</member>
			<member name="C:SPECIAL_ACTION_DUCK" value="1">
			</member>
			<member name="C:SPECIAL_ACTION_USEJETPACK" value="2">
			</member>
			<member name="C:SPECIAL_ACTION_ENTER_VEHICLE" value="3">
			</member>
			<member name="C:SPECIAL_ACTION_EXIT_VEHICLE" value="4">
			</member>
			<member name="C:SPECIAL_ACTION_DANCE1" value="5">
			</member>
			<member name="C:SPECIAL_ACTION_DANCE2" value="6">
			</member>
			<member name="C:SPECIAL_ACTION_DANCE3" value="7">
			</member>
			<member name="C:SPECIAL_ACTION_DANCE4" value="8">
			</member>
			<member name="C:SPECIAL_ACTION_HANDSUP" value="10">
			</member>
			<member name="C:SPECIAL_ACTION_USECELLPHONE" value="11">
			</member>
			<member name="C:SPECIAL_ACTION_SITTING" value="12">
			</member>
			<member name="C:SPECIAL_ACTION_STOPUSECELLPHONE" value="13">
			</member>
			<member name="C:SPECIAL_ACTION_DRINK_BEER" value="20">
			</member>
			<member name="C:SPECIAL_ACTION_SMOKE_CIGGY" value="21">
			</member>
			<member name="C:SPECIAL_ACTION_DRINK_WINE" value="22">
			</member>
			<member name="C:SPECIAL_ACTION_DRINK_SPRUNK" value="23">
			</member>
			<member name="C:SPECIAL_ACTION_CUFFED" value="24">
			</member>
			<member name="C:SPECIAL_ACTION_CARRY" value="25">
			</member>
			<member name="C:SPECIAL_ACTION_PISSING" value="68">
			</member>
			<referrer name="_@SPECIAL_ACTION"/>
			<library>omp_player</library> 
		</member>
		<member name="T:__SPECTATE_MODE" value="4">
			<tagname value="t_SPECTATE_MODE"/>
			<member name="C:UNKNOWN_SPECTATE_MODE" value="-1">
			</member>
			<member name="C:SPECTATE_MODE_NORMAL" value="1">
			</member>
			<member name="C:SPECTATE_MODE_FIXED" value="2">
			</member>
			<member name="C:SPECTATE_MODE_SIDE" value="3">
			</member>
			<referrer name="_@SPECTATE_MODE"/>
			<library>omp_player</library>  <summary>Spectating</summary> 
		</member>
		<member name="T:__SQLITE_OPEN" value="33554433">
			<tagname value="SQLITE_OPEN"/>
			<member name="C:UNKNOWN_SQLITE_OPEN" value="-1">
			</member>
			<member name="C:SQLITE_OPEN_READONLY" value="1">
			</member>
			<member name="C:SQLITE_OPEN_READWRITE" value="2">
			</member>
			<member name="C:SQLITE_OPEN_CREATE" value="4">
			</member>
			<member name="C:SQLITE_OPEN_DELETEONCLOSE" value="8">
			</member>
			<member name="C:SQLITE_OPEN_EXCLUSIVE" value="16">
			</member>
			<member name="C:SQLITE_OPEN_AUTOPROXY" value="32">
			</member>
			<member name="C:SQLITE_OPEN_URI" value="64">
			</member>
			<member name="C:SQLITE_OPEN_MEMORY" value="128">
			</member>
			<member name="C:SQLITE_OPEN_MAIN_DB" value="256">
			</member>
			<member name="C:SQLITE_OPEN_TEMP_DB" value="512">
			</member>
			<member name="C:SQLITE_OPEN_TRANSIENT_DB" value="1024">
			</member>
			<member name="C:SQLITE_OPEN_MAIN_JOURNAL" value="2048">
			</member>
			<member name="C:SQLITE_OPEN_TEMP_JOURNAL" value="4096">
			</member>
			<member name="C:SQLITE_OPEN_SUBJOURNAL" value="8192">
			</member>
			<member name="C:SQLITE_OPEN_SUPER_JOURNAL" value="16384">
			</member>
			<member name="C:SQLITE_OPEN_NOMUTEX" value="32768">
			</member>
			<member name="C:SQLITE_OPEN_FULLMUTEX" value="65536">
			</member>
			<member name="C:SQLITE_OPEN_SHAREDCACHE" value="131072">
			</member>
			<member name="C:SQLITE_OPEN_PRIVATECACHE" value="262144">
			</member>
			<member name="C:SQLITE_OPEN_WAL" value="524288">
			</member>
			<member name="C:SQLITE_OPEN_NOFOLLOW" value="16777216">
			</member>
			<member name="C:SQLITE_OPEN_EXRESCODE" value="33554432">
			</member>
			<referrer name="_@SQLITE_OPEN"/>
			<library>omp_database</library> 
		</member>
		<member name="T:__TEXT_DRAW_ALIGN" value="4">
			<tagname value="t_TEXT_DRAW_ALIGN"/>
			<member name="C:UNKNOWN_TEXT_DRAW_ALIGN" value="-1">
			</member>
			<member name="C:TEXT_DRAW_ALIGN_LEFT" value="1">
			</member>
			<member name="C:TEXT_DRAW_ALIGN_CENTRE" value="2">
			</member>
			<member name="C:TEXT_DRAW_ALIGN_CENTER" value="2">
			</member>
			<member name="C:TEXT_DRAW_ALIGN_RIGHT" value="3">
			</member>
			<referrer name="_@TEXT_DRAW_ALIGN"/>
			<library>omp_textdraw</library>  <summary>Text draw alignment</summary> 
		</member>
		<member name="T:__TEXT_DRAW_FONT" value="6">
			<tagname value="t_TEXT_DRAW_FONT"/>
			<member name="C:UNKNOWN_TEXT_DRAW_FONT" value="-1">
			</member>
			<member name="C:TEXT_DRAW_FONT_0" value="0">
			</member>
			<member name="C:TEXT_DRAW_FONT_1" value="1">
			</member>
			<member name="C:TEXT_DRAW_FONT_2" value="2">
			</member>
			<member name="C:TEXT_DRAW_FONT_3" value="3">
			</member>
			<member name="C:TEXT_DRAW_FONT_SPRITE_DRAW" value="4">
			</member>
			<member name="C:TEXT_DRAW_FONT_MODEL_PREVIEW" value="5">
			</member>
			<member name="C:TEXT_DRAW_FONT_BANK" value="0">
			</member>
			<member name="C:TEXT_DRAW_FONT_STANDARD" value="1">
			</member>
			<member name="C:TEXT_DRAW_FONT_SPACEAGE" value="2">
			</member>
			<member name="C:TEXT_DRAW_FONT_HEADING" value="3">
			</member>
			<member name="C:TEXT_DRAW_FONT_BECKETT_REGULAR" value="0">
			</member>
			<member name="C:TEXT_DRAW_FONT_AHARONI_BOLD" value="1">
			</member>
			<member name="C:TEXT_DRAW_FONT_BANK_GOTHIC" value="2">
			</member>
			<member name="C:TEXT_DRAW_FONT_PRICEDOWN" value="3">
			</member>
			<member name="C:TEXT_DRAW_FONT_SPRITE" value="4">
			</member>
			<member name="C:TEXT_DRAW_FONT_PREVIEW" value="5">
			</member>
			<referrer name="_@TEXT_DRAW_FONT"/>
			<library>omp_textdraw</library>  <summary>Text draw font</summary> 
		</member>
		<member name="T:__VARTYPE" value="4">
			<tagname value="t_VARTYPE"/>
			<member name="C:UNKNOWN_VARTYPE" value="-1">
			</member>
			<member name="C:VARTYPE_NONE" value="0">
			</member>
			<member name="C:VARTYPE_INT" value="1">
			</member>
			<member name="C:VARTYPE_STRING" value="2">
			</member>
			<member name="C:VARTYPE_FLOAT" value="3">
			</member>
			<member name="C:SERVER_VARTYPE_NONE" value="0">
			</member>
			<member name="C:SERVER_VARTYPE_INT" value="1">
			</member>
			<member name="C:SERVER_VARTYPE_STRING" value="2">
			</member>
			<member name="C:SERVER_VARTYPE_FLOAT" value="3">
			</member>
			<member name="C:PLAYER_VARTYPE_NONE" value="0">
			</member>
			<member name="C:PLAYER_VARTYPE_INT" value="1">
			</member>
			<member name="C:PLAYER_VARTYPE_STRING" value="2">
			</member>
			<member name="C:PLAYER_VARTYPE_FLOAT" value="3">
			</member>
			<referrer name="_@VARTYPE"/>
			<library>omp_variable</library>  <summary>PVar enumeration</summary> 
		</member>
		<member name="T:__VEHICLE_DOOR_STATUS" value="134217728">
			<tagname value="t_VEHICLE_DOOR_STATUS"/>
			<member name="C:UNKNOWN_VEHICLE_DOOR_STATUS" value="-1">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_NONE" value="0">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_BONNET_OPEN" value="1">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_BONNET_DAMAGED" value="2">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_BONNET_MISSING" value="4">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_HOOD_OPEN" value="1">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_HOOD_DAMAGED" value="2">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_HOOD_MISSING" value="4">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_BOOT_OPEN" value="256">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_BOOT_DAMAGED" value="512">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_BOOT_MISSING" value="1024">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_TRUNK_OPEN" value="256">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_TRUNK_DAMAGED" value="512">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_TRUNK_MISSING" value="1024">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_FRONT_LEFT_OPEN" value="65536">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_FRONT_LEFT_DAMAGED" value="131072">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_FRONT_LEFT_MISSING" value="262144">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_DRIVER_OPEN" value="65536">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_DRIVER_DAMAGED" value="131072">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_DRIVER_MISSING" value="262144">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_FRONT_RIGHT_OPEN" value="16777216">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_FRONT_RIGHT_DAMAGED" value="33554432">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_FRONT_RIGHT_MISSING" value="67108864">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_PASSENGER_OPEN" value="16777216">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_PASSENGER_DAMAGED" value="33554432">
			</member>
			<member name="C:VEHICLE_DOOR_STATUS_PASSENGER_MISSING" value="67108864">
			</member>
			<member name="C:CARDOOR_NONE" value="0">
			</member>
			<member name="C:CARDOOR_BONNET_OPEN" value="1">
			</member>
			<member name="C:CARDOOR_BONNET_DAMAGED" value="2">
			</member>
			<member name="C:CARDOOR_BONNET_MISSING" value="4">
			</member>
			<member name="C:CARDOOR_HOOD_OPEN" value="1">
			</member>
			<member name="C:CARDOOR_HOOD_DAMAGED" value="2">
			</member>
			<member name="C:CARDOOR_HOOD_MISSING" value="4">
			</member>
			<member name="C:CARDOOR_BOOT_OPEN" value="256">
			</member>
			<member name="C:CARDOOR_BOOT_DAMAGED" value="512">
			</member>
			<member name="C:CARDOOR_BOOT_MISSING" value="1024">
			</member>
			<member name="C:CARDOOR_TRUNK_OPEN" value="256">
			</member>
			<member name="C:CARDOOR_TRUNK_DAMAGED" value="512">
			</member>
			<member name="C:CARDOOR_TRUNK_MISSING" value="1024">
			</member>
			<member name="C:CARDOOR_FRONT_LEFT_OPEN" value="65536">
			</member>
			<member name="C:CARDOOR_FRONT_LEFT_DAMAGED" value="131072">
			</member>
			<member name="C:CARDOOR_FRONT_LEFT_MISSING" value="262144">
			</member>
			<member name="C:CARDOOR_DRIVER_OPEN" value="65536">
			</member>
			<member name="C:CARDOOR_DRIVER_DAMAGED" value="131072">
			</member>
			<member name="C:CARDOOR_DRIVER_MISSING" value="262144">
			</member>
			<member name="C:CARDOOR_FRONT_RIGHT_OPEN" value="16777216">
			</member>
			<member name="C:CARDOOR_FRONT_RIGHT_DAMAGED" value="33554432">
			</member>
			<member name="C:CARDOOR_FRONT_RIGHT_MISSING" value="67108864">
			</member>
			<member name="C:CARDOOR_PASSENGER_OPEN" value="16777216">
			</member>
			<member name="C:CARDOOR_PASSENGER_DAMAGED" value="33554432">
			</member>
			<member name="C:CARDOOR_PASSENGER_MISSING" value="67108864">
			</member>
			<referrer name="_@VEHICLE_DOOR_STATUS"/>
			<library>omp_vehicle</library> 
		</member>
		<member name="T:__VEHICLE_LIGHT_STATUS" value="65">
			<tagname value="t_VEHICLE_LIGHT_STATUS"/>
			<member name="C:UNKNOWN_VEHICLE_LIGHT_STATUS" value="0">
			</member>
			<member name="C:VEHICLE_LIGHT_STATUS_NONE" value="0">
			</member>
			<member name="C:VEHICLE_LIGHT_STATUS_FRONT_LEFT_BROKEN" value="1">
			</member>
			<member name="C:VEHICLE_LIGHT_STATUS_FRONT_RIGHT_BROKEN" value="4">
			</member>
			<member name="C:VEHICLE_LIGHT_STATUS_DRIVER_BROKEN" value="1">
			</member>
			<member name="C:VEHICLE_LIGHT_STATUS_PASSENGER_BROKEN" value="4">
			</member>
			<member name="C:VEHICLE_LIGHT_STATUS_REAR_BROKEN" value="64">
			</member>
			<member name="C:CARLIGHT_FRONT_LEFT_BROKEN" value="1">
			</member>
			<member name="C:CARLIGHT_FRONT_RIGHT_BROKEN" value="4">
			</member>
			<member name="C:CARLIGHT_DRIVER_BROKEN" value="1">
			</member>
			<member name="C:CARLIGHT_PASSENGER_BROKEN" value="4">
			</member>
			<member name="C:CARLIGHT_REAR_BROKEN" value="64">
			</member>
			<referrer name="_@VEHICLE_LIGHT_STATUS"/>
			<library>omp_vehicle</library> 
		</member>
		<member name="T:__VEHICLE_PANEL_STATUS" value="1">
			<tagname value="t_VEHICLE_PANEL_STATUS"/>
			<member name="C:UNKNOWN_VEHICLE_PANEL_STATUS" value="-1">
			</member>
			<member name="C:VEHICLE_PANEL_STATUS_NONE" value="0">
			</member>
			<referrer name="_@VEHICLE_PANEL_STATUS"/>
			<library>omp_vehicle</library> 
		</member>
		<member name="T:__VEHICLE_TYRE_STATUS" value="2">
			<tagname value="t_VEHICLE_TYRE_STATUS"/>
			<member name="C:UNKNOWN_VEHICLE_TYRE_STATUS" value="-1">
			</member>
			<member name="C:VEHICLE_TYRE_STATUS_NONE" value="0">
			</member>
			<member name="C:VEHICLE_TYRE_STATUS_FRONT_LEFT_POPPED" value="8">
			</member>
			<member name="C:VEHICLE_TYRE_STATUS_FRONT_RIGHT_POPPED" value="2">
			</member>
			<member name="C:VEHICLE_TYRE_STATUS_REAR_LEFT_POPPED" value="4">
			</member>
			<member name="C:VEHICLE_TYRE_STATUS_REAR_RIGHT_POPPED" value="1">
			</member>
			<member name="C:VEHICLE_TIRE_STATUS_FRONT_LEFT_POPPED" value="8">
			</member>
			<member name="C:VEHICLE_TIRE_STATUS_FRONT_RIGHT_POPPED" value="2">
			</member>
			<member name="C:VEHICLE_TIRE_STATUS_REAR_LEFT_POPPED" value="4">
			</member>
			<member name="C:VEHICLE_TIRE_STATUS_REAR_RIGHT_POPPED" value="1">
			</member>
			<member name="C:CARTYRE_FRONT_LEFT_POPPED" value="8">
			</member>
			<member name="C:CARTYRE_FRONT_RIGHT_POPPED" value="2">
			</member>
			<member name="C:CARTYRE_REAR_LEFT_POPPED" value="4">
			</member>
			<member name="C:CARTYRE_REAR_RIGHT_POPPED" value="1">
			</member>
			<member name="C:CARTIRE_FRONT_LEFT_POPPED" value="8">
			</member>
			<member name="C:CARTIRE_FRONT_RIGHT_POPPED" value="2">
			</member>
			<member name="C:CARTIRE_REAR_LEFT_POPPED" value="4">
			</member>
			<member name="C:CARTIRE_REAR_RIGHT_POPPED" value="1">
			</member>
			<referrer name="_@VEHICLE_TYRE_STATUS"/>
			<library>omp_vehicle</library> 
		</member>
		<member name="T:__WEAPONSTATE" value="4">
			<tagname value="t_WEAPONSTATE"/>
			<member name="C:UNKNOWN_WEAPONSTATE" value="-1">
			</member>
			<member name="C:WEAPONSTATE_UNKNOWN" value="-1">
			</member>
			<member name="C:WEAPONSTATE_NO_BULLETS" value="0">
			</member>
			<member name="C:WEAPONSTATE_LAST_BULLET" value="1">
			</member>
			<member name="C:WEAPONSTATE_MORE_BULLETS" value="2">
			</member>
			<member name="C:WEAPONSTATE_RELOADING" value="3">
			</member>
			<referrer name="_@WEAPONSTATE"/>
			<library>omp_player</library> 
		</member>
		<member name="T:anglemode" value="3">
			<tagname value="anglemode"/>
			<member name="C:radian" value="0">
			</member>
			<member name="C:degrees" value="1">
			</member>
			<member name="C:grades" value="2">
			</member>
			<referrer name="_@anglemode"/>
			<library>float</library> 
		</member>
		<member name="T:filemode" value="4">
			<tagname value="filemode"/>
			<member name="C:io_read" value="0">
			</member>
			<member name="C:io_write" value="1">
			</member>
			<member name="C:io_readwrite" value="2">
			</member>
			<member name="C:io_append" value="3">
			</member>
			<referrer name="_@filemode"/>
			<library>file</library> 
		</member>
		<member name="T:floatround_method" value="5">
			<tagname value="floatround_method"/>
			<member name="C:floatround_round" value="0">
			</member>
			<member name="C:floatround_floor" value="1">
			</member>
			<member name="C:floatround_ceil" value="2">
			</member>
			<member name="C:floatround_tozero" value="3">
			</member>
			<member name="C:floatround_unbiased" value="4">
			</member>
			<referrer name="_@floatround_method"/>
			<library>float</library>  <summary>Different methods of rounding.</summary> 
		</member>
		<member name="T:seek_whence" value="3">
			<tagname value="seek_whence"/>
			<member name="C:seek_start" value="0">
			</member>
			<member name="C:seek_current" value="1">
			</member>
			<member name="C:seek_end" value="2">
			</member>
			<referrer name="_@seek_whence"/>
			<library>file</library> 
		</member>

		<!-- constants -->
		<member name="C:EOS" value="0">
			<referrer name="strcopy"/>
		</member>
		<member name="C:SSCANF_VERSION" value="135944">
			<library>sscanf</library>  <remarks>  The sscanf version in BCD as a proper constant.  Example:  <code>  2.10.3  <br />  => 02 10 03 <br />  => 0x021003  </code>  </remarks> 
		</member>
		<member name="C:__PawnBuild" value="11">
		</member>
		<member name="C:__line" value="1028">
			<referrer name="pc_cmd_cjump"/>
		</member>
		<member name="C:__namemax" value="63">
			<summary>  The maximum length of symbol names, excluding any NULLs.  </summary> 
		</member>
		<member name="C:cellbits" value="32">
			<referrer name="__findpubvar"/>
			<referrer name="getpubvar"/>
			<referrer name="setpubvar"/>
			<referrer name="numpubvars"/>
		</member>
		<member name="C:cellmax" value="2147483647">
			<referrer name="operator!(Float:)"/>
		</member>
		<member name="C:cellmin" value="-2147483648">
			<referrer name="operator-(Float:)"/>
			<referrer name="SSCANF_GetSimilarString"/>
			<referrer name="SSCANF_GetSimilarValue"/>
			<referrer name="SSCANF_GetClosestString"/>
			<referrer name="SSCANF_GetClosestValue"/>
		</member>
		<member name="C:charbits" value="8">
			<referrer name="__findpubvar"/>
			<referrer name="getpubvar"/>
			<referrer name="setpubvar"/>
			<referrer name="numpubvars"/>
		</member>
		<member name="C:false" value="0">
			<tagname value="bool"/>
			<referrer name="fflush"/>
			<referrer name="strequal"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="CA_DestroyObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="pc_cmd_st"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnDialogResponse"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="RemovePlayerDrunk"/>
		</member>
		<member name="C:true" value="1">
			<tagname value="bool"/>
			<referrer name="fflush"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="ForcePerkSelection"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerWeaponShot"/>
		</member>
		<member name="C:undefined" value="-1">
			<tagname value="bool"/>
			<summary>  An invalid value (<c>-1</c>) as a boolean for some natives (most notably  the vehicle param ones) that can skip `true`/`false` parameters.  </summary> 
		</member>

		<!-- variables -->
		<member name="F:CA_ObjectList">
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="CA_DestroyObject_DC"/>
			<referrer name="CA_SetObjectPos_DC"/>
			<referrer name="CA_SetObjectRot_DC"/>
			<referrer name="CA_DestroyAllObjects_DC"/>
		</member>
		<member name="F:CELLMIN_ON_MATCHES">
			<library>sscanf</library>  <remarks>  The <c>CELLMIN_ON_MATCHES</c> option as a constant string so you can get  compile-time spell checking on the name.  Whatever the value of  <c>MATCH_NAME_PARTIAL</c>, the first found player will always be returned,  so if you do a search for <c>_</c> on an RP server, you could get almost  anyone.  To detect this case, if more than one player will match the  specified string then <em>sscanf</em> will return an ID of <c>cellmin</c>  instead.  This can be combined with <c>U</c> for a lot more power:  <code>  sscanf(params, "?&lt;CELLMIN_ON_MATCHES=1&gt;U(-1)", id);                <br />  if (id == -1)                                                            <br />  {                                                                        <br /><indent />  // No player was entered.                                            <br />  }                                                                        <br />  else if (id == cellmin)                                                  <br />  {                                                                        <br /><indent />  // Multiple matches found                                            <br />  }                                                                        <br />  else if (id == INVALID_PLAYER_ID)                                        <br />  {                                                                        <br /><indent />  // Entered player is not connected.                                  <br />  }                                                                        <br />  else                                                                     <br />  {                                                                        <br /><indent />  // Found just one player.                                            <br />  }  </code>  </remarks> 
		</member>
		<member name="F:CPInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
		</member>
		<member name="F:ClassInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
		</member>
		<member name="F:MATCH_NAME_FIRST">
			<library>sscanf</library>  <remarks>  The <c>MATCH_NAME_FIRST</c> option as a constant string so you can get compile-  time spell checking on the name.  Specify whether <c>u</c> etc keep searching  for better matching player names after finding one:  <code>  SSCANF_Option(MATCH_NAME_FIRST, 0); // Enable scanning for the best name match not the first (default).  <br />  SSCANF_Option(MATCH_NAME_FIRST, 1); // Enable scanning for the first name match not the best (old behaviour).  </code>  </remarks> 
		</member>
		<member name="F:MATCH_NAME_PARTIAL">
			<library>sscanf</library>  <remarks>  The <c>MATCH_NAME_PARTIAL</c> option as a constant string so you can get  compile-time spell checking on the name.  Currently sscanf will search for  players by name, and will <em>always</em> search for player whose name  <em>starts</em> with the specified string.  If someone types <c>Y_Less</c>,  sscanf will not find say <c>[CLAN]Y_Less</c> because there name doesn't start  with the specified text.  This option, when set to <c>1</c>, will search  <em>anywhere</em> in the player's name for the given string.  </remarks> 
		</member>
		<member name="F:MATCH_NAME_SIMILARITY">
			<library>sscanf</library>  <remarks>  The <c>MATCH_NAME_SIMILARITY</c> option as a constant string so you can get  compile-time spell checking on the name.  Specify whether <c>u</c> etc should  use the ngrams-based similarity algorithm when searching for players matching  a given name.  I.e. enable or disable fuzzy name matching.  It will return  the best match found, but depending on the threshold that may still be very  different to what was typed.  <code>  SSCANF_Option(MATCH_NAME_SIMILARITY, 0.0); // Will find all names, regardless of input. <br />  SSCANF_Option(MATCH_NAME_SIMILARITY, 1.0); // Will find exact matches only. <br />  SSCANF_Option(MATCH_NAME_SIMILARITY, 0.5); // Will find names somewhat similar to the input. <br />  SSCANF_Option(MATCH_NAME_SIMILARITY, -1.0); // Disable fuzzy name matching.  </code>  </remarks> 
		</member>
		<member name="F:OLD_DEFAULT_CUSTOM">
			<library>sscanf</library>  <remarks>  The <c>OLD_DEFAULT_CUSTOM</c> option as a constant string so you can get  compile-time spell checking on the name.  This is the same as  <c>OLD_DEFAULT_KUSTOM</c>, but with an alternate spelling.  </remarks> 
		</member>
		<member name="F:OLD_DEFAULT_KUSTOM">
			<library>sscanf</library>  <remarks>  The <c>OLD_DEFAULT_KUSTOM</c> option as a constant string so you can get  compile-time spell checking on the name.  As with <c>U</c>, <c>K</c> used to  require a valid identifier as the default and would parse it using the  specified callback, so this would <em>not</em> work:  <code>  K&lt;vehicle&gt;(Veyron)  </code>  Because that is not a valid vehicle name in GTA.  The new version now just  takes a number and returns that regardless:  <code>  K&lt;vehicle&gt;(999)  </code>  This setting reverts to the old behaviour.  </remarks> 
		</member>
		<member name="F:OLD_DEFAULT_NAME">
			<library>sscanf</library>  <remarks>  The <c>OLD_DEFAULT_NAME</c> option as a constant string so you can get  compile-time spell checking on the name.  The behaviour of <c>U</c>, <c>Q</c>  and <c>R</c> have been changed to take any number as a default, instead of a  connected player.  Setting <c>OLD_DEFAULT_NAME</c> to <c>1</c> will revert to  the old version.  </remarks> 
		</member>
		<member name="F:PerkInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="ForcePerkSelection"/>
		</member>
		<member name="F:PickupInfo">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
		</member>
		<member name="F:PlayerInfo">
			<referrer name="pc_cmd_rustler"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="DestroyPlayerVehicle"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="SSCANF_OnPlayerDisconnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnDialogResponse"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="DefusePickupBomb"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="RemovePlayerDrunk"/>
		</member>
		<member name="F:SSCANF_ALPHA">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_ALPHA</c> option as a constant string so you can get compile-  time spell checking on the name.  Specify the default alpha value for colours  (<c>m</c>) which don't manually specify an alpha channel.  The alpha values  are specified as a <em>decimal</em> number, <em>not</em> a <em>hex</em>  number, so setting an alpha of <c>0x80</c> would be:  <code>  SSCANF_Option(SSCANF_ALPHA, 128);  </code>  </remarks> 
		</member>
		<member name="F:SSCANF_ARGB">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_ARGB</c> option as a constant string so you can get compile-  time spell checking on the name.  Specify whether the returned colour is  <c>ARGB</c> or <c>RGBA</c>:  <code>  SSCANF_Option(SSCANF_ARGB, 1); // Set 3- and 6-digit colour outputs to `AARRGGBB`. <br />  SSCANF_Option(SSCANF_ARGB, 0); // Set 3- and 6-digit colour outputs to `RRGGBBAA` (default).  </code>  </remarks> 
		</member>
		<member name="F:SSCANF_COLOUR_FORMS">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_COLOUR_FORMS</c> option as a constant string so you can get  compile-time spell checking on the name.  There are multiple valid colour  input formats, which you can enable or disable here.  The parameter is a  bit map (flags) for all the following values:  <ul>  <li><c>1</c> - <c>#RGB</c></li>  <li><c>2</c> - <c>#RRGGBB</c></li>  <li><c>4</c> - <c>0xRRGGBB</c></li>  <li><c>8</c> - <c>RRGGBB</c></li>  <li><c>16</c> - <c>{RRGGBB}</c></li>  <li><c>32</c> - <c>0xRRGGBBAA</c></li>  <li><c>64</c> - <c>RRGGBBAA</c></li>  </ul>  So to ONLY accept SA:MP `SendClientMessage` colours use:  <code>  SSCANF_Option(SSCANF_COLOUR_FORMS, 16);  </code>  To only accept 8-digit values use:  <code>  SSCANF_Option(SSCANF_COLOUR_FORMS, 96);  </code>  Default values (those specified between <c>()</c>s for <c>M</c>) ignore this  setting - they can always use any form.  </remarks> 
		</member>
		<member name="F:SSCANF_EXT_">
			<library>sscanf</library>  <remarks>  The fallback for the filename in <c>extract</c> on the old compiler, which  doesn't have the inbuilt <c>__file</c> macro.  This is the "feature" enabled  by <c>SSCANF_NO_NICE_FEATURES</c>.  Appends <c>"unknown file"</c> in the  plugin when line number <c>&lt; 0</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_FOM_">
			<library>sscanf</library>  <remarks>  The fallback for the filename in <c>unformat</c> on the old compiler, which  doesn't have the inbuilt <c>__file</c> macro.  This is the "feature" enabled  by <c>SSCANF_NO_NICE_FEATURES</c>.  Appends <c>"unknown file"</c> in the  plugin when line number <c>&lt; 0</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_NPC">
			<library>sscanf</library>  <remarks>  Was sscanf built for an NPC mode or a normal mode?  </remarks> 
		</member>
		<member name="F:SSCANF_QUIET">
			<library>sscanf</library>  <remarks>  The <c>SSCANF_QUIET</c> option as a constant string so you can get compile-  time spell checking on the name.  Don't print any errors to the console.  <em>Really</em> not recommended unless you <em>know</em> your code is stable  and in production.  </remarks> 
		</member>
		<member name="F:SSCANF_UNK_">
			<library>sscanf</library>  <remarks>  The fallback for the filename in <c>sscanf</c> on the old compiler, which  doesn't have the inbuilt <c>__file</c> macro.  This is the "feature" enabled  by <c>SSCANF_NO_NICE_FEATURES</c>.  Appends <c>"unknown file"</c> in the  plugin when line number <c>&lt; 0</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_BCD">
			<referrer name="SSCANF_Version"/>
			<library>sscanf</library>  <remarks>  The sscanf version in BCD.  Example:  <code>  2.10.3  <br />  => 02 10 03 <br />  => 0x021003  </code>  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_BUILD">
			<library>sscanf</library>  <remarks>  The sscanf build number.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_MAJOR">
			<library>sscanf</library>  <remarks>  The sscanf major version number.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_MINOR">
			<library>sscanf</library>  <remarks>  The sscanf minor version number.  </remarks> 
		</member>
		<member name="F:SSCANF_VERSION_STRING">
			<library>sscanf</library>  <remarks>  The sscanf version as a string.  E.g. <c>"2.8.1"</c>.  </remarks> 
		</member>
		<member name="F:SSCANF_gInit">
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnScriptInit"/>
			<referrer name="OnFilterScriptInit"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="OnPlayerConnect"/>
			<referrer name="OnPlayerDisconnect"/>
			<library>sscanf</library>  <remarks>  Has sscanf been initialised at least once already in this script?  Avoids the  need to define <c>FILTERSCRIPT</c> by including <c>OnFilterScriptInit</c>  and <c>OnGameModeInit</c> (plus <c>OnNPCModeInit</c>) and seeing which one  gets called first.  </remarks> 
		</member>
		<member name="F:SkillInfo">
			<referrer name="SSCANF_OnPlayerDisconnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="F:Skill_KingCharges">
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerTakeDamage"/>
		</member>
		<member name="F:Streamer_IncludeFileVersion">
			<attribute name="public"/>
		</member>
		<member name="F:__OPEN_MP_VERSION">
			<attribute name="public"/>
			<remarks>  If running on SA:MP this will remain <c>0</c>, open.mp will set it.  open.mp versions look like:  <code>  01.04.02.0544  </code>  Thus they are encoded here as:  <code>  (major &lt;&lt; 28) | (minor &lt;&lt; 21) | (patch &lt;&lt; 14) | (prerel)  </code>  </remarks> 
		</member>
		<member name="F:__SAMP_INCLUDES_VERSION">
			<attribute name="public"/>
			<remarks>  Version examples:  <ul>  <li><c>0.3.DL R1       - 03D010</c></li>  <li>                               </li>  <li><c>0.3.7 R3        - 037030</c></li>  <li><c>0.3.7 R2-2      - 037022</c></li>  <li><c>0.3.7 R1-2      - 037012</c></li>  <li><c>0.3.7           - 037000</c></li>  <li>                               </li>  <li><c>0.3z R4         - 030700</c></li>  <li><c>0.3z R3         - 030700</c></li>  <li><c>0.3z R2-1       - 030700</c></li>  <li><c>0.3z R1-2       - 030700</c></li>  <li><c>0.3z            - 030700</c></li>  <li><c>0.3x R2 patch 1 - 030621</c></li>  <li><c>0.3x R2         - 030620</c></li>  <li><c>0.3x R1-2       - 030612</c></li>  <li><c>0.3x            - 030600</c></li>  <li><c>0.3e            - 030500</c></li>  <li><c>0.3d            - 030400</c></li>  <li><c>0.3c            - 030300</c></li>  <li><c>0.3b            - 030200</c></li>  <li><c>0.3a            - 030100</c></li>  <li>                               </li>  <li><c>0.2X            - 02A000</c></li>  <li><c>0.2.2 R3        - 022300</c></li>  </ul>  Rough rules:  <p />  Uses (roughtly) BCD.  Special versions are denoted outside 0-9.  <code>  0.1.2c R4-5  | | ||  | |  0 1 23  4 5  =  0x012345  </code>  (assuming c is the third revision)  <p />  0.2X becomes 02A000 because it is basically 0.2.3, but not, while higher than  0.2.2 so can't be 020400 (for example).  Also, its a capital letter, so doesn't  use the revision method.  <p />  P.S.  Making a consistent scheme for SA:MP versions is REALLY hard.  <p />  open.mp releases can use `A` as the first digit.  </remarks> 
		</member>
		<member name="F:__date">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
		</member>
		<member name="F:__file">
			<referrer name="pc_cmd_cjump"/>
		</member>
		<member name="F:__time">
		</member>
		<member name="F:_pawncmd_is_gamemode">
			<tagname value="bool"/>
			<attribute name="public"/>
		</member>
		<member name="F:_pawncmd_version">
			<attribute name="public"/>
		</member>

		<!-- functions -->
		<member name="M:operator!(Float:)" syntax="operator!(Float:)(__oper)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<dependency name="cellmax"/>
			<param name="__oper">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator%(_:,Float:)" syntax="operator%(_:,Float:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator%(Float:,_:)" syntax="operator%(Float:,_:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator%(Float:,Float:)" syntax="operator%(Float:,Float:)(oper1, oper2)">
			<stacksize value="1"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator!=(Float:,_:)" syntax="operator!=(Float:,_:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="OnPlayerWeaponShot"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator!=(Float:,Float:)" syntax="operator!=(Float:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator-(_:,Float:)" syntax="operator-(_:,Float:)(__oper1, __oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatsub"/>
			<param name="__oper1">
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator-(Float:,_:)" syntax="operator-(Float:,_:)(__oper1, __oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="pc_cmd_cjump"/>
			<dependency name="float"/>
			<dependency name="floatsub"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator+(Float:,_:)" syntax="operator+(Float:,_:)(__oper1, __oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="float"/>
			<dependency name="floatadd"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator/(_:,Float:)" syntax="operator/(_:,Float:)(__oper1, __oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatdiv"/>
			<param name="__oper1">
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator/(Float:,_:)" syntax="operator/(Float:,_:)(__oper1, __oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatdiv"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator*(Float:,_:)" syntax="operator*(Float:,_:)(__oper1, __oper2)">
			<tagname value="Float"/>
			<stacksize value="4"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerTakeDamage"/>
			<dependency name="float"/>
			<dependency name="floatmul"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator++(Float:)" syntax="operator++(Float:)(__oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="operator+(Float:,Float:)"/>
			<param name="__oper">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator-(Float:)" syntax="operator-(Float:)(__oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<dependency name="cellmin"/>
			<param name="__oper">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator--(Float:)" syntax="operator--(Float:)(__oper)">
			<tagname value="Float"/>
			<stacksize value="1"/>
			<dependency name="operator-(Float:,Float:)"/>
			<param name="__oper">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator-(Float:,Float:)" syntax="operator-(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator--(Float:)"/>
			<referrer name="CA_IsPlayerOnSurface"/>
			<referrer name="CA_IsPlayerInWater"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator+(Float:,Float:)" syntax="operator+(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator++(Float:)"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerInWater"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator/(Float:,Float:)" syntax="operator/(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator*(Float:,Float:)" syntax="operator*(Float:,Float:)(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator%(File:,_:)" syntax="operator%(File:,_:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator%(_:,File:)" syntax="operator%(_:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator%(File:,File:)" syntax="operator%(File:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator/(File:,_:)" syntax="operator/(File:,_:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator/(_:,File:)" syntax="operator/(_:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator/(File:,File:)" syntax="operator/(File:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator*(File:,_:)" syntax="operator*(File:,_:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator*(File:,File:)" syntax="operator*(File:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator-(File:,_:)" syntax="operator-(File:,_:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator-(_:,File:)" syntax="operator-(_:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator-(File:,File:)" syntax="operator-(File:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator+(File:,_:)" syntax="operator+(File:,_:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator+(File:,File:)" syntax="operator+(File:,File:)(a, b)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator++(File:)" syntax="operator++(File:)(a)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator-(File:)" syntax="operator-(File:)(a)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator--(File:)" syntax="operator--(File:)(a)">
			<tagname value="File"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&lt;(File:,File:)" syntax="operator&lt;(File:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&lt;(_:,File:)" syntax="operator&lt;(_:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&lt;(File:,_:)" syntax="operator&lt;(File:,_:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&lt;=(File:,File:)" syntax="operator&lt;=(File:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&lt;=(_:,File:)" syntax="operator&lt;=(_:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&lt;=(File:,_:)" syntax="operator&lt;=(File:,_:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&gt;(File:,File:)" syntax="operator&gt;(File:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&gt;(_:,File:)" syntax="operator&gt;(_:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&gt;(File:,_:)" syntax="operator&gt;(File:,_:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&gt;=(File:,File:)" syntax="operator&gt;=(File:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&gt;=(_:,File:)" syntax="operator&gt;=(_:,File:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
			</param>
			<param name="b">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library> 
		</member>
		<member name="M:operator&gt;=(File:,_:)" syntax="operator&gt;=(File:,_:)(a, b)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="a">
				<paraminfo>File </paraminfo>
			</param>
			<param name="b">
			</param>
			<library>file</library> 
		</member>
		<member name="M:Float:operator=(_:)" syntax="Float:operator=(_:)(oper)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="DestroyKingCharge"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="oper">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator==(Float:,Float:)" syntax="operator==(Float:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator==(Float:,_:)" syntax="operator==(Float:,_:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&gt;(Float:,Float:)" syntax="operator&gt;(Float:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerInWater"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&gt;(Float:,_:)" syntax="operator&gt;(Float:,_:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&gt;(_:,Float:)" syntax="operator&gt;(_:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&gt;=(Float:,Float:)" syntax="operator&gt;=(Float:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="SSCANF_GetSimilarString"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&gt;=(Float:,_:)" syntax="operator&gt;=(Float:,_:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&gt;=(_:,Float:)" syntax="operator&gt;=(_:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&lt;(Float:,Float:)" syntax="operator&lt;(Float:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerInWater"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&lt;(Float:,_:)" syntax="operator&lt;(Float:,_:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&lt;(_:,Float:)" syntax="operator&lt;(_:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&lt;=(Float:,Float:)" syntax="operator&lt;=(Float:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<referrer name="CA_GetRoomCenter"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&lt;=(Float:,_:)" syntax="operator&lt;=(Float:,_:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="__oper2">
			</param>
			<library>float</library> 
		</member>
		<member name="M:operator&lt;=(_:,Float:)" syntax="operator&lt;=(_:,Float:)(__oper1, __oper2)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="float"/>
			<dependency name="floatcmp"/>
			<param name="__oper1">
			</param>
			<param name="__oper2">
				<paraminfo>Float </paraminfo>
			</param>
			<library>float</library> 
		</member>
		<member name="M:@CO_SSCANF" syntax="@CO_SSCANF()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:@timer" syntax="@timer()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<library>time</library>  <summary>A timer event occurred.</summary>  <remarks>  This function executes after the configured delay or interval expires.  See <c>settimer</c> to  set the delay or interval.  Depending on the timing precision of the host, the call may occur  later than the delay that was set.  <p/>  If the timer was set as a "single-shot", it must be ex plicitly set again for a next execution  for the <c>@timer</c>function.  If the timer is set to be repetitive, <c>@timer</c> will continue  to be called with the set interval until it is disabled with another call to <c>settimer</c>.  </remarks>  <returns>The return value of this function is currently ignored.</returns> 
		</member>
		<member name="M:AddPlayerClassEx" syntax="AddPlayerClassEx(team, skin, spawnX, spawnY, spawnZ, angle, weapon1, ammo1, weapon2, ammo2, weapon3, ammo3)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="team">
				The team you want the player to spawn in
			</param>
			<param name="skin">
				The <a href="https://open.mp/docs/scripting/resources/skins">skin</a> which the player  will  spawn with
			</param>
			<param name="spawnX">
				<paraminfo>Float </paraminfo>
				The x coordinate of the spawnpoint of this class
			</param>
			<param name="spawnY">
				<paraminfo>Float </paraminfo>
				The y coordinate of the spawnpoint of this class
			</param>
			<param name="spawnZ">
				<paraminfo>Float </paraminfo>
				The z coordinate of the spawnpoint of this class
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
				The direction in which the player should face after spawning
			</param>
			<param name="weapon1">
				<paraminfo>t_WEAPON </paraminfo>
				The first spawn-<a href="https://open.mp/docs/scripting/resources/weaponids">weapon</a>  for  the player
			</param>
			<param name="ammo1">
				The amount of ammunition for the primary spawn weapon
			</param>
			<param name="weapon2">
				<paraminfo>t_WEAPON </paraminfo>
				The second spawn-<a href="https://open.mp/docs/scripting/resources/weaponids">weapon</a>  for  the player
			</param>
			<param name="ammo2">
				The amount of ammunition for the second spawn weapon
			</param>
			<param name="weapon3">
				<paraminfo>t_WEAPON </paraminfo>
				The third spawn-<a href="https://open.mp/docs/scripting/resources/weaponids">weapon</a>  for  the player
			</param>
			<param name="ammo3">
				The amount of ammunition for the third spawn weapon
			</param>
			<library>omp_class</library>  <summary>This function is exactly the same as the <a href="#AddPlayerClass">AddPlayerClass</a> function,  with the addition of a team parameter.</summary>                          <returns>  <ul>  <li>The <b>ID of the class</b> which was just added.</li>  <li><b><c>319</c></b> if the class limit (<b><c>320</c></b>) was reached.  The highest possible  class ID is <b><c>319</c></b>.</li>  </ul>  </returns>  <remarks>The maximum class ID is <b><c>319</c></b> (starting from <b><c>0</c></b>, so a total of  <b><c>320</c></b> classes).  When this limit is reached, any more classes that are added will replace  ID <b><c>319</c></b>.</remarks>  <seealso name="AddPlayerClass" />  <seealso name="SetSpawnInfo" />  <seealso name="SetPlayerTeam" />  <seealso name="SetPlayerSkin" /> 
		</member>
		<member name="M:ApplyAnimation" syntax="ApplyAnimation(playerid, animationLibrary[], animationName[], delta, loop, lockX, lockY, freeze, time, forceSync)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<param name="playerid">
				The ID of the player to apply the animation to
			</param>
			<param name="animationLibrary">
				<paraminfo> [] </paraminfo>
				The animation library from which to apply an animation
			</param>
			<param name="animationName">
				<paraminfo> [] </paraminfo>
				The name of the animation to apply, within the specified library
			</param>
			<param name="delta">
				<paraminfo>Float </paraminfo>
				The speed to play the animation (use 4.1)
			</param>
			<param name="loop">
				<paraminfo>bool </paraminfo>
				If set to <b><c>1</c></b>, the animation will loop.  If set to <b><c>0</c></b>,  the animation will play once
			</param>
			<param name="lockX">
				<paraminfo>bool </paraminfo>
				If set to <b><c>0</c></b>, the player is returned to their old x coordinate once  the animation is complete (for animations that move the player such as walking). <b><c>1</c></b>  will not return them to their old position
			</param>
			<param name="lockY">
				<paraminfo>bool </paraminfo>
				Same as above but for the y axis.  Should be kept the same as the previous parameter
			</param>
			<param name="freeze">
				<paraminfo>bool </paraminfo>
				Setting this to <b><c>1</c></b> will freeze the player at the end of the animation.  <b><c>0</c></b> will not
			</param>
			<param name="time">
				Timer in milliseconds.  For a never-ending loop it should be <b><c>0</c></b>
			</param>
			<param name="forceSync">
				<paraminfo>t_FORCE_SYNC </paraminfo>
				Set to <b><c>1</c></b> to make server sync the animation with all other players  in streaming radius. <b><c>2</c></b> works same as <b><c>1</c></b>, but will ONLY apply the animation  to streamed-in players, but NOT the actual player being animated (useful for npc animations and persistent  animations when players are being streamed) (optional=<b><c>0</c></b>)
			</param>
			<library>omp_player</library>  <summary>Apply an animation to a player.</summary>                      <seealso name="ClearAnimations" />  <seealso name="SetPlayerSpecialAction" />  <remarks>The <paramref name="forceSync" /> optional parameter, which defaults to <b><c>0</c></b>,  in most cases is not needed since players sync animations themselves.  The <paramref name="forceSync"  /> parameter can force all players who can see <paramref name="playerid" /> to play the animation  regardless of whether the player is performing that animation.  This is useful in circumstances where  the player can't sync the animation themselves.  For example, they may be paused.</remarks>  <remarks>An invalid animation library will crash the player's game.</remarks>  <returns>This function always returns <b><c>1</c></b>, even if the player specified does not exist,  or any of the parameters are invalid (e.g.  invalid library).</returns> 
		</member>
		<member name="M:AttachDynamicObjectToPlayer" syntax="AttachDynamicObjectToPlayer(objectid, playerid, offsetx, offsety, offsetz, rx, ry, rz)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="objectid">
			</param>
			<param name="playerid">
			</param>
			<param name="offsetx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="offsety">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="offsetz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:BCD" syntax="BCD(number)">
			<stacksize value="1"/>
			<param name="number">
			</param>
			<library>sscanf</library>  <remarks>  Converts a version string to  <a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">BCD</a>.  For example:  <code>  BCD(5.6.17);  </code>  Returns:  <code>  0x050617  </code>  Each section (between dots) is assigned a single byte and the last section is  always in the lowest byte.  This implies a maximum of four sections and two  digits per section.  </remarks> 
		</member>
		<member name="M:CA_CreateObject" syntax="CA_CreateObject(modelid, x, y, z, rx, ry, rz, add)">
			<attribute name="native"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="add">
				<paraminfo>bool </paraminfo>
			</param>
		</member>
		<member name="M:CA_CreateObject_DC" syntax="CA_CreateObject_DC(modelid, x, y, z, rx, ry, rz, drawdistance)">
			<stacksize value="12"/>
			<dependency name="CA_CreateObject"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="CreateObject"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="false"/>
			<dependency name="true"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="drawdistance">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_DestroyAllObjects_DC" syntax="CA_DestroyAllObjects_DC()">
			<stacksize value="5"/>
			<referrer name="OnFilterScriptExit"/>
			<referrer name="OnGameModeExit"/>
			<dependency name="CA_DestroyObject_DC"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
		</member>
		<member name="M:CA_DestroyObject" syntax="CA_DestroyObject(index)">
			<attribute name="native"/>
			<referrer name="CA_DestroyObject_DC"/>
			<param name="index">
			</param>
		</member>
		<member name="M:CA_DestroyObject_DC" syntax="CA_DestroyObject_DC(index)">
			<stacksize value="3"/>
			<referrer name="CA_DestroyAllObjects_DC"/>
			<dependency name="CA_DestroyObject"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="DestroyObject"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="false"/>
			<param name="index">
			</param>
		</member>
		<member name="M:CA_FindZ_For2DCoord" syntax="CA_FindZ_For2DCoord(x, y, &amp;z)">
			<stacksize value="11"/>
			<dependency name="CA_RayCastLine"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_GetRoomCenter" syntax="CA_GetRoomCenter(x, y, z, &amp;m_x, &amp;m_y)">
			<tagname value="Float"/>
			<stacksize value="18"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&lt;=(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="VectorSize"/>
			<dependency name="degrees"/>
			<dependency name="floatabs"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="m_x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="m_y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_GetRoomHeight" syntax="CA_GetRoomHeight(x, y, z)">
			<tagname value="Float"/>
			<stacksize value="17"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="floatsqroot"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_Init" syntax="CA_Init()">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
		</member>
		<member name="M:CA_IsPlayerBlocked" syntax="CA_IsPlayerBlocked(playerid, dist, height)">
			<stacksize value="17"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="dist">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="height">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerFacingWater" syntax="CA_IsPlayerFacingWater(playerid, dist, height)">
			<stacksize value="16"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="dist">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="height">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerInWater" syntax="CA_IsPlayerInWater(playerid, &amp;depth, &amp;playerdepth)">
			<stacksize value="68"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="CA_RayCastMultiLine"/>
			<dependency name="GetPlayerPos"/>
			<param name="playerid">
			</param>
			<param name="depth">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="playerdepth">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerNearWater" syntax="CA_IsPlayerNearWater(playerid, dist, height)">
			<stacksize value="16"/>
			<dependency name="operator*(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="dist">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="height">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_IsPlayerOnSurface" syntax="CA_IsPlayerOnSurface(playerid, tolerance)">
			<stacksize value="14"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="GetPlayerPos"/>
			<param name="playerid">
			</param>
			<param name="tolerance">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_OnFilterScriptExit" syntax="CA_OnFilterScriptExit()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:CA_OnGameModeExit" syntax="CA_OnGameModeExit()">
			<attribute name="public"/>
			<stacksize value="1"/>
		</member>
		<member name="M:CA_RayCastExplode" syntax="CA_RayCastExplode(cX, cY, cZ, Radius, intensity, collisions[][])">
			<stacksize value="19"/>
			<dependency name="operator-(Float:,_:)"/>
			<dependency name="operator-(Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="operator&gt;(Float:,Float:)"/>
			<dependency name="operator&lt;(Float:,Float:)"/>
			<dependency name="CA_RayCastLine"/>
			<dependency name="floatcos"/>
			<dependency name="floatround"/>
			<dependency name="floatround_floor"/>
			<dependency name="floatsin"/>
			<param name="cX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="cY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="cZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="Radius">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="intensity">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="collisions">
				<paraminfo>Float [][3] </paraminfo>
			</param>
		</member>
		<member name="M:CA_RayCastLine" syntax="CA_RayCastLine(StartX, StartY, StartZ, EndX, EndY, EndZ, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="CA_FindZ_For2DCoord"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerOnSurface"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="CA_GetRoomCenter"/>
			<param name="StartX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:CA_RayCastMultiLine" syntax="CA_RayCastMultiLine(StartX, StartY, StartZ, EndX, EndY, EndZ, retx[], rety[], retz[], retdist[], ModelIDs[], size)">
			<attribute name="native"/>
			<referrer name="CA_IsPlayerInWater"/>
			<param name="StartX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="StartZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="EndZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="retx">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="rety">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="retz">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="retdist">
				<paraminfo>Float [] </paraminfo>
			</param>
			<param name="ModelIDs">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="size">
			</param>
		</member>
		<member name="M:CA_RemoveBarriers" syntax="CA_RemoveBarriers()">
			<stacksize value="8"/>
			<dependency name="CA_RemoveBuilding"/>
		</member>
		<member name="M:CA_RemoveBreakableBuildings" syntax="CA_RemoveBreakableBuildings()">
			<stacksize value="8"/>
			<dependency name="CA_RemoveBuilding"/>
		</member>
		<member name="M:CA_RemoveBuilding" syntax="CA_RemoveBuilding(modelid, x, y, z, radius)">
			<attribute name="native"/>
			<referrer name="CA_RemoveBarriers"/>
			<referrer name="CA_RemoveBreakableBuildings"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="radius">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectPos" syntax="CA_SetObjectPos(index, x, y, z)">
			<attribute name="native"/>
			<referrer name="CA_SetObjectPos_DC"/>
			<param name="index">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectPos_DC" syntax="CA_SetObjectPos_DC(index, x, y, z)">
			<stacksize value="6"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_SetObjectPos"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="SetObjectPos"/>
			<param name="index">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectRot" syntax="CA_SetObjectRot(index, rx, ry, rz)">
			<attribute name="native"/>
			<referrer name="CA_SetObjectRot_DC"/>
			<param name="index">
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CA_SetObjectRot_DC" syntax="CA_SetObjectRot_DC(index, rx, ry, rz)">
			<stacksize value="6"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_ObjectList"/>
			<dependency name="CA_SetObjectRot"/>
			<dependency name="ColdAndreadsID"/>
			<dependency name="ObjectID"/>
			<dependency name="ObjectType"/>
			<dependency name="ObjectUsed"/>
			<dependency name="SetObjectRot"/>
			<param name="index">
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:CallLocalFunction" syntax="CallLocalFunction(functionName[], specifiers[], ...)">
			<attribute name="native"/>
			<referrer name="OnFilterScriptExit"/>
			<referrer name="OnGameModeExit"/>
			<param name="functionName">
				<paraminfo> [] </paraminfo>
				Public function's name
			</param>
			<param name="specifiers">
				<paraminfo> [] </paraminfo>
				Tag/format of each variable
			</param>
			<param name="...">
				<paraminfo> {LANDING_GEAR_STATE,Bit,Bitmap,XML,XMLEntry,Group,INI,Language,Style,DB,DBResult,Menu,Text,PlayerText,Text3D,PlayerText3D,File,Float,CUSTOM_TAG_TYPES,_} </paraminfo>
				'Indefinite' number of arguments of any tag
			</param>
			<library>omp_core</library>  <summary>Calls a public function from the script in which it is used.</summary>        <seealso name="CallRemoteFunction" />  <returns>The value that the <b>only</b> public function returned.</returns>  <remarks>CallLocalFunction crashes the server if it's passing an empty string.</remarks>  <remarks>  Specifier string placeholders:<br />  <ul>  <li><b><c>c</c></b> - a single character</li>  <li><b><c>d</c></b> - an integer (whole) number</li>  <li><b><c>i</c></b> - an integer (whole) number</li>  <li><b><c>x</c></b> - a number in hexadecimal notation</li>  <li><b><c>f</c></b> - a floating point number</li>  <li><b><c>s</c></b> - a string</li>  </ul>  </remarks> 
		</member>
		<member name="M:CreateDynamicCP" syntax="CreateDynamicCP(x, y, z, size, worldid, interiorid, playerid, streamdistance, areaid, priority)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="size">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateDynamicMapIcon" syntax="CreateDynamicMapIcon(x, y, z, type, color, worldid, interiorid, playerid, streamdistance, style, areaid, priority)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="type">
			</param>
			<param name="color">
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="style">
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateDynamicObject" syntax="CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interiorid, playerid, streamdistance, drawdistance, areaid, priority)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="worldid">
			</param>
			<param name="interiorid">
			</param>
			<param name="playerid">
			</param>
			<param name="streamdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="drawdistance">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="areaid">
			</param>
			<param name="priority">
			</param>
		</member>
		<member name="M:CreateExplosion" syntax="CreateExplosion(x, y, z, type, radius)">
			<attribute name="native"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DestroyKingCharge"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The x coordinate of the explosion
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The y coordinate of the explosion
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The z coordinate of the explosion
			</param>
			<param name="type">
				The type of explosion
			</param>
			<param name="radius">
				<paraminfo>Float </paraminfo>
				The explosion radius
			</param>
			<library>omp_core</library>  <summary>Create an explosion at the specified coordinates.</summary>            <seealso name="CreateExplosionForPlayer" />  <remarks>There is a limit as to how many explosions can be seen at once by a player.  This is roughly  10.</remarks>  <returns>This function always returns <b><c>1</c></b>, even when the explosion type and/or radius  values are invalid.</returns> 
		</member>
		<member name="M:CreateObject" syntax="CreateObject(modelid, x, y, z, rotationX, rotationY, rotationZ, drawDistance)">
			<attribute name="native"/>
			<referrer name="CA_CreateObject_DC"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="modelid">
				The model to create
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The x coordinate to create the object at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The y coordinate to create the object at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The z coordinate to create the object at
			</param>
			<param name="rotationX">
				<paraminfo>Float </paraminfo>
				The x rotation of the object
			</param>
			<param name="rotationY">
				<paraminfo>Float </paraminfo>
				The y rotation of the object
			</param>
			<param name="rotationZ">
				<paraminfo>Float </paraminfo>
				The z rotation of the object
			</param>
			<param name="drawDistance">
				<paraminfo>Float </paraminfo>
				The distance that San Andreas renders objects at. <b><c>0.0</c></b> will  cause objects to render at their default distances. <b>Usable since 0.3b, limited to <c>300</c> prior  to 0.3x</b> (optional=<b><c>0.0</c></b>)
			</param>
			<library>omp_object</library>  <summary>Creates an object at specified coordinates in the game world.</summary>                  <seealso name="DestroyObject" />  <seealso name="IsValidObject" />  <seealso name="CreatePlayerObject" />  <seealso name="MoveObject" />  <seealso name="SetObjectPos" />  <seealso name="SetObjectRot" />  <seealso name="GetObjectPos" />  <seealso name="GetObjectRot" />  <seealso name="AttachObjectToPlayer" />  <seealso name="SetObjectMaterialText" />  <seealso name="SetObjectMaterial" />  <remarks>  Objects that emit light (lampposts, police lights, bollard lights, neons etc.) that have a greater  rotation than <b><c>16.26</c></b> degrees (or <b><c>-16.26</c></b>) on either the x or y axis will  stop shining.  This effect also applies to light objects attached to other objects, players and vehicles.  If a light object is attached to a car and the car is rotated over <b><c>16.26</c></b> degrees  (like in a rollover), the object will also stop emitting light.  This is a GTA:SA issue and is not  caused by a bug in open.mp.  </remarks>  <remarks>In case the light is attached to another object, one fix for this is to set <b>SyncRotation</b>  to false in <a href="#AttachObjectToObject">AttachObjectToObject</a>.  This will ensure the light  stays at <b><c>0</c></b> rotation.  This would only really work for objects that consist ONLY of  light, so wouldn't work for the police light for example. </remarks>  <remarks>There is a limit of <a href="https://open.mp/docs/scripting/resources/limits"><b><c>1000</c></b>  objects  (<b><c>MAX_OBJECTS</c></b>)</a>.  To circumvent this limit, you can use a  <a href="https://github.com/samp-incognito/samp-streamer-plugin/tree/open.mp">streamer</a></remarks>  <returns>The ID of the object that was created, or <b><c>INVALID_OBJECT_ID</c></b> if the object  limit (<b><c>MAX_OBJECTS</c></b>) was reached.</returns> 
		</member>
		<member name="M:CreatePickup" syntax="CreatePickup(model, type, x, y, z, virtualWorld)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="model">
				The <a href="https://open.mp/docs/scripting/resources/pickupids">model</a> of the  pickup
			</param>
			<param name="type">
				The pickup spawn type (see table under remarks)
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The x coordinate to create the pickup at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The y coordinate to create the pickup at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The z coordinate to create the pickup at
			</param>
			<param name="virtualWorld">
				The virtual world ID of the pickup.  Use <b><c>-1</c></b> to make the  pickup show in all worlds (optional=<b><c>0</c></b>)
			</param>
			<library>omp_pickup</library>  <summary>This function does exactly the same as AddStaticPickup, except it returns a pickup ID which  can be used to destroy it afterwards and be tracked using <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</summary>              <seealso name="AddStaticPickup" />  <seealso name="DestroyPickup" />  <seealso name="OnPlayerPickUpPickup" />  <remarks>  <b>Known Bugs:</b><br />  Pickups that have a x or y lower than <b><c>-4096.0</c></b> or bigger than <b><c>4096.0</c></b>  won't show up and won't trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a> either.  </remarks>  <remarks>  The only type of pickup that can be picked up from inside a vehicle is <b><c>14</c></b> (except  for special pickups such as bribes).<br />  Pickups are shown to, and can be picked up by all players.<br />  It is possible that if <a href="#DestroyPickup">DestroyPickup</a> is used when a pickup is picked  up, more than one player can pick up the pickup, due to lag.  This can be circumvented through the  use of variables.<br />  Certain pickup types come with 'automatic responses', for example using an M4 model in the pickup  will automatically give the player the weapon and some ammo.  For fully scripted pickups, type <b><c>1</c></b>  should be used. <br />  </remarks>  <remarks>  <b>Available Pickup Types</b><br />  Most other IDs are either undocumented or are similar to type <b><c>1</c></b> (but do not use them  just because they seem similar to ID <b><c>1</c></b>, they might have side-effects like ID <b><c>18</c></b>  and <b><c>20</c></b>).  <ul>  <li><b><c>0</c></b> - The pickup does not always display.  If displayed, it can't be picked up  and does not trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a> and it will stay after  server shutdown.  Now disabled.</li>  <li><b><c>1</c></b> - Exists always.  Disables pickup scripts such as horseshoes and oysters  to allow for scripted actions ONLY.  Will trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>  every few seconds.</li>  <li><b><c>2</c></b> - Disappears after pickup, respawns after 30 seconds if the player is at  a distance of at least 15 meters.</li>  <li><b><c>3</c></b> - Disappears after pickup, respawns after death.</li>  <li><b><c>4</c></b> - Disappears after 15 to 20 seconds.  Respawns after death.</li>  <li><b><c>8</c></b> - Disappears after pickup, but has no effect.</li>  <li><b><c>11</c></b> - Blows up a few seconds after being created (bombs?)</li>  <li><b><c>12</c></b> - Blows up a few seconds after being created.</li>  <li><b><c>13</c></b> - Invisible.  Triggers checkpoint sound when picked up with a vehicle, but  doesn't trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</li>  <li><b><c>14</c></b> - Disappears after pickup, can only be picked up with a vehicle.  Triggers  checkpoint sound.</li>  <li><b><c>15</c></b> - Same as type <b><c>2</c></b>.</li>  <li><b><c>18</c></b> - Similar to type <b><c>1</c></b>.  Pressing Tab (<b><c>KEY_ACTION</c></b>)  makes it disappear but the key press doesn't trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</li>  <li><b><c>19</c></b> - Disappears after pickup, but doesn't respawn.  Makes "cash pickup" sound  if picked up.</li>  <li><b><c>20</c></b> - Similar to type <b><c>1</c></b>.  Disappears when you take a picture of  it with the Camera weapon, which triggers "Snapshot # out of 0" message.  Taking a picture doesn't  trigger <a href="#OnPlayerPickUpPickup">OnPlayerPickUpPickup</a>.</li>  <li><b><c>22</c></b> - Same as type <b><c>3</c></b>.</li>  </ul>  </remarks>  <returns>The ID of the created pickup, <b><c>-1</c></b> on failure (<a href="https://open.mp/docs/scripting/resources/limits">pickup  max limit</a>).</returns> 
		</member>
		<member name="M:CreatePlayerTextDraw" syntax="CreatePlayerTextDraw(playerid, x, y, format[], ...)">
			<tagname value="PlayerText"/>
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to create the textdraw for
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				x-Coordinate
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				y-Coordinate
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The text in the textdraw.  May be optionally formatted.
			</param>
			<param name="...">
				<paraminfo> {LANDING_GEAR_STATE,Bit,Bitmap,XML,XMLEntry,Group,INI,Language,Style,DB,DBResult,Menu,Text,PlayerText,Text3D,PlayerText3D,File,Float,CUSTOM_TAG_TYPES,_} </paraminfo>
			</param>
			<library>omp_textdraw</library>  <summary>Creates a textdraw for a single player.  This can be used as a way around the <a href="#TextDrawCreate">global</a>  text-draw limit.</summary>          <seealso name="PlayerTextDrawDestroy" />  <seealso name="PlayerTextDrawColour" />  <seealso name="PlayerTextDrawBoxColour" />  <seealso name="PlayerTextDrawBackgroundColour" />  <seealso name="PlayerTextDrawAlignment" />  <seealso name="PlayerTextDrawFont" />  <seealso name="PlayerTextDrawLetterSize" />  <seealso name="PlayerTextDrawTextSize" />  <seealso name="PlayerTextDrawSetOutline" />  <seealso name="PlayerTextDrawSetShadow" />  <seealso name="PlayerTextDrawSetProportional" />  <seealso name="PlayerTextDrawUseBox" />  <seealso name="PlayerTextDrawSetString" />  <seealso name="PlayerTextDrawShow" />  <seealso name="PlayerTextDrawHide" />  <remarks>  If you choose values for y that are less than 1, the first text row will be invisible and only  the shadow is visible.<br />  If part of the text is off-screen, the colour of the text will not show, only the shadow (if enabled)  will. <br />  </remarks>  <remarks>  Maximum length of textdraw is <b><c>800</c></b> characters.<br />  If you use colour codes (such as <b><c>~R~ ~G~</c></b>) beyond 255th character the legacy (SA:MP) client  will  crash trying to display the textdraw. <br />  </remarks>  <remarks>Keyboard key mapping codes (such as <b><c>~k~~VEHICLE_ENTER_EXIT~</c></b> Doesn't work beyond  255th character. </remarks>  <remarks>  The x, y coordinate is the top left coordinate for the text draw area based on a <b><c>640x480</c></b>  "canvas" (irrespective of screen resolution).  If you plan on using <a href="#PlayerTextDrawAlignment">PlayerTextDrawAlignment</a>  with alignment <b><c>3</c></b> (right), the x, y coordinate is the top right coordinate for the text  draw.<br />  This function merely CREATES the textdraw, you must use <a href="#PlayerTextDrawShow">PlayerTextDrawShow</a>  to show it to a player.<br />  It is recommended to use WHOLE numbers instead of decimal positions when creating player textdraws  to ensure resolution friendly design. <br />  </remarks>  <remarks>Player-textdraws are automatically destroyed when a player disconnects.</remarks>  <returns>The ID of the created textdraw.</returns> 
		</member>
		<member name="M:CreateVehicle" syntax="CreateVehicle(modelid, spawnX, spawnY, spawnZ, angle, colour1, colour2, respawnDelay, addSiren)">
			<attribute name="native"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="modelid">
				The <a href="https://www.open.mp/docs/scripting/resources/vehicleid">model</a>  for the vehicle
			</param>
			<param name="spawnX">
				<paraminfo>Float </paraminfo>
				The x coordinate for the vehicle
			</param>
			<param name="spawnY">
				<paraminfo>Float </paraminfo>
				The y coordinate for the vehicle
			</param>
			<param name="spawnZ">
				<paraminfo>Float </paraminfo>
				The z coordinate for the vehicle
			</param>
			<param name="angle">
				<paraminfo>Float </paraminfo>
				The facing angle for the vehicle
			</param>
			<param name="colour1">
				The primary <a href="https://www.open.mp/docs/scripting/resources/vehiclecolorid">colour  ID</a>
			</param>
			<param name="colour2">
				The secondary <a href="https://www.open.mp/docs/scripting/resources/vehiclecolorid">colour  ID</a>
			</param>
			<param name="respawnDelay">
				The delay until the car is respawned without a driver in <b>seconds</b>.  Using <b><c>-1</c></b> will prevent the vehicle from respawning
			</param>
			<param name="addSiren">
				<paraminfo>bool </paraminfo>
				<b>Added in 0.3.7; will not work in earlier versions</b>.  Enables the vehicle  to have a siren, providing the vehicle has a horn (optional=<b><c>false</c></b>)
			</param>
			<library>omp_vehicle</library>  <summary>Creates a vehicle in the world.  Can be used in place of <a href="#AddStaticVehicleEx">AddStaticVehicleEx</a>  at any time in the script.</summary>                    <seealso name="DestroyVehicle" />  <seealso name="AddStaticVehicle" />  <seealso name="AddStaticVehicleEx" />  <seealso name="GetVehicleParamsSirenState" />  <seealso name="OnVehicleSpawn" />  <seealso name="OnVehicleSirenStateChange" />  <remarks>Trains can only be added with AddStaticVehicle and AddStaticVehicleEx.</remarks>  <returns>  The vehicle ID of the vehicle created (<b><c>1</c></b> to <b><c>MAX_VEHICLES</c></b>).<br />  <b><c>INVALID_VEHICLE_ID (65535)</c></b> if vehicle was not created (vehicle limit reached or invalid  vehicle model ID passed).  </returns> 
		</member>
		<member name="M:DefusePickupBomb" syntax="DefusePickupBomb(checkpointid, playerid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="GetPlayerScore"/>
			<dependency name="KillTimer"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_team"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_picked_up"/>
			<dependency name="picked_up_by_team"/>
			<param name="checkpointid">
			</param>
			<param name="playerid">
			</param>
		</member>
		<member name="M:DestroyDynamicObject" syntax="DestroyDynamicObject(objectid)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerDisconnect"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="DestroyKingCharge"/>
			<param name="objectid">
			</param>
		</member>
		<member name="M:DestroyKingCharge" syntax="DestroyKingCharge(objectid)">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreateExplosion"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="GetDynamicObjectPos"/>
			<param name="objectid">
			</param>
		</member>
		<member name="M:DestroyObject" syntax="DestroyObject(objectid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="CA_DestroyObject_DC"/>
			<param name="objectid">
				The ID of the object to destroy.  Returned by <a href="#CreateObject">CreateObject</a>
			</param>
			<library>omp_object</library>  <summary>Destroys (removes) an object that was created using <a href="#CreateObject">CreateObject</a>.</summary>    <seealso name="CreateObject" />  <seealso name="IsValidObject" />  <seealso name="DestroyPlayerObject" /> 
		</member>
		<member name="M:DestroyPickupBomb" syntax="DestroyPickupBomb(checkpointid, playerid)">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="CreateExplosion"/>
			<dependency name="GetPlayerScore"/>
			<dependency name="KillTimer"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="SetPlayerScore"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_team"/>
			<dependency name="cp_x"/>
			<dependency name="cp_y"/>
			<dependency name="cp_z"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_picked_up"/>
			<dependency name="picked_up_by_team"/>
			<param name="checkpointid">
			</param>
			<param name="playerid">
			</param>
		</member>
		<member name="M:DestroyPlayerVehicle" syntax="DestroyPlayerVehicle(playerid)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<referrer name="pc_cmd_rustler"/>
			<dependency name="DestroyVehicle"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="player_vehicle"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:DestroyVehicle" syntax="DestroyVehicle(vehicleid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="DestroyPlayerVehicle"/>
			<param name="vehicleid">
				The ID of the vehicle to destroy
			</param>
			<library>omp_vehicle</library>  <summary>Destroy a vehicle.  It will disappear instantly.</summary>    <seealso name="CreateVehicle" />  <seealso name="RemovePlayerFromVehicle" />  <seealso name="SetVehicleToRespawn" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The vehicle does not exist.  </returns> 
		</member>
		<member name="M:DisableInteriorEnterExits" syntax="DisableInteriorEnterExits()">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<library>omp_core</library>  <summary>Disable all the interior entrances and exits in the game (the yellow arrows at doors).</summary>  <seealso name="AllowInteriorWeapons" />  <remarks>If the gamemode is changed after this function has been used, and the new gamemode doesn't  disable markers, the markers will NOT reappear for already-connected players (but will for newly  connected players).</remarks>  <remarks>This function will only work if it has been used BEFORE a player connects (it is recommended  to use it in OnGameModeInit).  It will not remove a connected player's markers.</remarks>  <returns>This function always returns <b><c>1</c></b>.</returns> 
		</member>
		<member name="M:ForceClassSelection" syntax="ForceClassSelection(playerid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerDeath"/>
			<param name="playerid">
				The player to send back to class selection
			</param>
			<library>omp_class</library>  <summary>Forces a player to go back to class selection.</summary>    <seealso name="AddPlayerClass" />  <seealso name="SetPlayerSkin" />  <seealso name="GetPlayerSkin" />  <seealso name="OnPlayerRequestClass" />  <remarks>The player will not return to class selection until they re-spawn.  This can be achieved  with <a href="#TogglePlayerSpectating">TogglePlayerSpectating</a>, as seen in the below example.</remarks> 
		</member>
		<member name="M:ForcePerkSelection" syntax="ForcePerkSelection(playerid)">
			<stacksize value="52"/>
			<referrer name="OnPlayerRequestSpawn"/>
			<referrer name="OnDialogResponse"/>
			<dependency name="InterpolateCameraLookAt"/>
			<dependency name="InterpolateCameraPos"/>
			<dependency name="PerkInfo"/>
			<dependency name="PerkInfo"/>
			<dependency name="ShowPlayerDialog"/>
			<dependency name="SpawnPlayer"/>
			<dependency name="TogglePlayerSpectating"/>
			<dependency name="perk_title"/>
			<dependency name="strcat"/>
			<dependency name="strcopy"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:GetActorPoolSize" syntax="GetActorPoolSize()">
			<stacksize value="1"/>
			<library>omp_core</library>  <summary>Gets the highest actorid created on the server.</summary>  <seealso name="CreateActor" />  <seealso name="IsValidActor" />  <seealso name="SetActorHealth" />  <returns>The highest actorid created on the server or <b><c>0</c></b> if there are no created actors.</returns> 
		</member>
		<member name="M:GetDynamicObjectPos" syntax="GetDynamicObjectPos(objectid, &amp;x, &amp;y, &amp;z)">
			<attribute name="native"/>
			<referrer name="DestroyKingCharge"/>
			<param name="objectid">
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
			</param>
		</member>
		<member name="M:GetMaxPlayers" syntax="GetMaxPlayers()">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<library>omp_core</library>  <summary>Returns the maximum number of players that can join the server, as set by the server variable  'maxplayers' in server.cfg.</summary>  <seealso name="GetPlayerPoolSize" />  <seealso name="IsPlayerConnected" />  <remarks>This function can not be used in place of <b><c>MAX_PLAYERS</c></b>.  It can not be used  at compile time (e.g.  for array sizes). <b><c>MAX_PLAYERS</c></b> should always be re-defined to  what the 'maxplayers' var will be, or higher.</remarks>  <returns>The maximum number of players that can join the server.</returns> 
		</member>
		<member name="M:GetPlayerDrunkLevel" syntax="GetPlayerDrunkLevel(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The player you want to check the drunkenness level of
			</param>
			<library>omp_player</library>  <summary>  Checks the player's level of drunkenness.  If the level is less than <b><c>2000</c></b>, the player  is sober.  The player's level of drunkness goes down slowly automatically (1 level per frame) but  will always reach <b><c>2000</c></b> at the end (in <b>0.3b</b> it will stop at <b><c>0</c></b>).  The higher drunkenness levels affect the player's camera, and the car driving handling.  The level  of drunkenness increases when the player drinks from a bottle (You can use <a href="#SetPlayerSpecialAction">SetPlayerSpecialAction</a>  to give them bottles).  </summary>    <seealso name="SetPlayerDrunkLevel" />  <returns>An integer with the level of drunkenness of the player.</returns> 
		</member>
		<member name="M:GetPlayerFacingAngle" syntax="GetPlayerFacingAngle(playerid, &amp;ang)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="playerid">
				The player you want to get the angle of
			</param>
			<param name="ang">
				<paraminfo>Float &amp; </paraminfo>
				The Float to store the angle in, passed by reference
			</param>
			<library>omp_player</library>  <summary>Gets the angle a player is facing.</summary>      <seealso name="GetVehicleZAngle" />  <seealso name="SetPlayerFacingAngle" />  <remarks>Angles are reversed in GTA:SA; 90 degrees would be East in the real world, but in GTA:SA  90 degrees is in fact West.  North and South are still 0/360 and 180.  To convert this, simply do  <b>360 - angle</b>.</remarks>  <remarks>Angles returned when inside a vehicle is rarely correct.  To get the correct facing angle  while inside a vehicle, use <a href="#GetVehicleZAngle">GetVehicleZAngle</a>.</remarks> 
		</member>
		<member name="M:GetPlayerLastShotVectors" syntax="GetPlayerLastShotVectors(playerid, &amp;originX, &amp;originY, &amp;originZ, &amp;hitPosX, &amp;hitPosY, &amp;hitPosZ)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player to get the last bullet shot information of
			</param>
			<param name="originX">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the x coordinate of where the bullet originated  from
			</param>
			<param name="originY">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the y coordinate of where the bullet originated  from
			</param>
			<param name="originZ">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the z coordinate of where the bullet originated  from
			</param>
			<param name="hitPosX">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the x coordinate of where the bullet hit
			</param>
			<param name="hitPosY">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the y coordinate of where the bullet hit
			</param>
			<param name="hitPosZ">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to save the z coordinate of where the bullet hit
			</param>
			<library>omp_player</library>  <summary>Retrieves the start and end (hit) position of the last bullet a player fired.</summary>                <seealso name="GetPlayerWeaponData" />  <seealso name="GetPlayerWeapon" />  <seealso name="VectorSize" />  <seealso name="OnPlayerWeaponShot" />  <remarks>This function will only work when <a href="https://www.open.mp/docs/server/LagCompensation">lag  compensation</a> is <b>enabled</b>. </remarks>  <remarks>If the player hit nothing, the hit positions will be <b><c>0</c></b>.  This means you can't  currently calculate how far a bullet travels through open air. </remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The player specified does not exist.<br />  </returns> 
		</member>
		<member name="M:GetPlayerLastSyncedTrailerID" syntax="GetPlayerLastSyncedTrailerID(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:GetPlayerLastSyncedVehicleID" syntax="GetPlayerLastSyncedVehicleID(playerid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:GetPlayerName" syntax="GetPlayerName(playerid, name[], len)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player to get the name of
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
				An array into which to store the name, passed by reference
			</param>
			<param name="len">
				The length of the string that should be stored.  Recommended to be <b><c>MAX_PLAYER_NAME</c></b>
			</param>
			<library>omp_player</library>  <summary>Get a player's name.</summary>        <seealso name="SetPlayerName" />  <seealso name="GetPlayerIp" />  <seealso name="GetPlayerPing" />  <seealso name="GetPlayerScore" />  <seealso name="GetPlayerVersion" />  <remarks>A player's name can be up to 24 characters long (as of <b>0.3d R2</b>) by using <a href="#SetPlayerName">SetPlayerName</a>.  This is defined as <b><c>24</c></b> by default.  However, the client can  only join with a nickname between 3 and 20 characters, otherwise the connection will be rejected  and the player has to quit to choose a valid name.</remarks>  <returns>The length of the player's name. <b><c>0</c></b> if player specified doesn't exist.</returns> 
		</member>
		<member name="M:GetPlayerPoolSize" syntax="GetPlayerPoolSize()">
			<stacksize value="1"/>
			<library>omp_core</library>  <summary>Gets the highest playerid currently in use on the server.</summary>  <seealso name="GetVehiclePoolSize" />  <seealso name="GetMaxPlayers" />  <returns>The highest playerid currently in use on the server or <b><c>0</c></b> if there are no connected  players.</returns> 
		</member>
		<member name="M:GetPlayerPos" syntax="GetPlayerPos(playerid, &amp;x, &amp;y, &amp;z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="CA_IsPlayerOnSurface"/>
			<referrer name="CA_IsPlayerInWater"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="pc_cmd_rustler"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The ID of the player to get the position of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the x coordinate in, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the y coordinate in, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the z coordinate in, passed by reference
			</param>
			<library>omp_player</library>  <summary>Get the position of a player, represented by x, y and z coordinates.</summary>          <seealso name="SetPlayerPos" />  <seealso name="GetVehiclePos" />  <seealso name="IsPlayerInRangeOfPoint" />  <seealso name="GetPlayerDistanceFromPoint" />  <remarks>This function is known to return unreliable values when used in <a href="#OnPlayerDisconnect">OnPlayerDisconnect</a>  and <a href="#OnPlayerRequestClass">OnPlayerRequestClass</a>.  This is because the player is not  spawned.</remarks>  <returns><b><c>true</c></b> on success, <b><c>false</c></b> on failure (i.e.  player not connected).</returns> 
		</member>
		<member name="M:GetPlayerScore" syntax="GetPlayerScore(playerid)">
			<attribute name="native"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="playerid">
				The player to get the score of
			</param>
			<library>omp_player</library>  <summary>This function returns a player's score as it was set using <a href="#SetPlayerScore">SetPlayerScore</a>.</summary>    <seealso name="SetPlayerScore" />  <seealso name="GetPlayerPing" />  <returns>The player's score.</returns> 
		</member>
		<member name="M:GetPlayerTeam" syntax="GetPlayerTeam(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<param name="playerid">
				The ID of the player to get the team of
			</param>
			<library>omp_player</library>  <summary>Get the ID of the team the player is on.</summary>    <seealso name="SetPlayerTeam" />  <seealso name="SetTeamCount" />  <returns>  <b><c>0-254</c></b>: The player's team. (<b><c>0</c></b> is a valid team).<br />  <b><c>255</c></b>: Defined as <b><c>NO_TEAM</c></b>.  The player is not on any team.<br />  <b><c>-1</c></b>: The function failed to execute.  Player is not connected.  </returns> 
		</member>
		<member name="M:GetPlayerVehicleID" syntax="GetPlayerVehicleID(playerid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="playerid">
				The ID of the player in the vehicle that you want to get the ID of
			</param>
			<library>omp_player</library>  <summary>This function gets the ID of the vehicle the player is currently in.  Note: <b>NOT</b> the  model ID of the vehicle.  See <a href="#GetVehicleModel">GetVehicleModel</a> for that.</summary>    <seealso name="IsPlayerInVehicle" />  <seealso name="IsPlayerInAnyVehicle" />  <seealso name="GetPlayerVehicleSeat" />  <seealso name="GetVehicleModel" />  <returns>ID of the vehicle or <b><c>0</c></b> if not in a vehicle.</returns> 
		</member>
		<member name="M:GetPlayerVelocity" syntax="GetPlayerVelocity(playerid, &amp;x, &amp;y, &amp;z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The player to get the speed from
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the x axis, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the y axis, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the velocity on the z axis, passed by reference
			</param>
			<library>omp_player</library>  <summary>Get the velocity (speed) of a player on the x, y and z axes.</summary>          <seealso name="SetPlayerVelocity" />  <seealso name="SetVehicleVelocity" />  <seealso name="GetVehicleVelocity" /> 
		</member>
		<member name="M:GetServerRuleFlags" syntax="GetServerRuleFlags(rule[])">
			<tagname value="E_SERVER_RULE_FLAGS"/>
			<stacksize value="1"/>
			<param name="rule">
				<paraminfo> [] </paraminfo>
			</param>
			<library>omp_core</library> 
		</member>
		<member name="M:GetVehicleModel" syntax="GetVehicleModel(vehicleid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="vehicleid">
				The ID of the vehicle to get the model of
			</param>
			<library>omp_vehicle</library>  <summary>Gets the <a href="https://www.open.mp/docs/scripting/resources/vehicleid">model ID</a> of a  vehicle.</summary>    <seealso name="GetPlayerVehicleid" />  <seealso name="GetVehiclePos" />  <seealso name="GetVehicleZAngle" />  <seealso name="GetPlayerVehicleSeat" />  <returns>The vehicle's <a href="https://www.open.mp/docs/scripting/resources/vehicleid">model ID</a>,  or <b><c>0</c></b>  if the vehicle doesn't exist.</returns> 
		</member>
		<member name="M:GetVehiclePoolSize" syntax="GetVehiclePoolSize()">
			<stacksize value="1"/>
			<library>omp_core</library>  <summary>Gets the highest vehicleid currently in use on the server.</summary>  <seealso name="GetPlayerPoolSize" />  <returns>The highest vehicleid currently in use on the server or <b><c>0</c></b> if there are no  created vehicles.</returns> 
		</member>
		<member name="M:GetVehiclePos" syntax="GetVehiclePos(vehicleid, &amp;x, &amp;y, &amp;z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to get the position of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the x coordinate, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the y coordinate, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the z coordinate, passed by reference
			</param>
			<library>omp_vehicle</library>  <summary>Gets the position of a vehicle.</summary>          <seealso name="GetVehicleDistanceFromPoint" />  <seealso name="SetVehiclePos" />  <seealso name="GetVehicleZAngle" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The vehicle specified does not exist.  </returns> 
		</member>
		<member name="M:GetVehicleVelocity" syntax="GetVehicleVelocity(vehicleid, &amp;x, &amp;y, &amp;z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to get the velocity of
			</param>
			<param name="x">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's x velocity, passed by reference
			</param>
			<param name="y">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's y velocity, passed by reference
			</param>
			<param name="z">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in to which to store the vehicle's z velocity, passed by reference
			</param>
			<library>omp_vehicle</library>  <summary>Get the velocity of a vehicle on the x, y and z axes.</summary>          <seealso name="GetPlayerVelocity" />  <seealso name="SetVehicleVelocity" />  <seealso name="SetPlayerVelocity" />  <remarks>Multiply vector with <b><c>250.66667</c></b> for kmph or <b><c>199.416667</c></b> for mph  or something...</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the vehicle specified does not exist.<br  />  </returns> 
		</member>
		<member name="M:GetVehicleZAngle" syntax="GetVehicleZAngle(vehicleid, &amp;angle)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="vehicleid">
				The ID of the vehicle to get the z angle of
			</param>
			<param name="angle">
				<paraminfo>Float &amp; </paraminfo>
				A float variable in which to store the z rotation, passed by reference
			</param>
			<library>omp_vehicle</library>  <summary>Get the rotation of a vehicle on the z axis (yaw).</summary>      <seealso name="GetVehicleRotationQuat" />  <seealso name="GetVehicleRotation" />  <seealso name="SetVehicleZAngle" />  <seealso name="GetVehiclePos" />  <seealso name="GetPlayerFacingAngle" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the vehicle does not exist.  </returns> 
		</member>
		<member name="M:GivePlayerMoney" syntax="GivePlayerMoney(playerid, money)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player to give money to or take money from
			</param>
			<param name="money">
				The amount of money to give the player.  Use a minus value to take money
			</param>
			<library>omp_player</library>  <summary>Give money to or take money from a player.</summary>      <seealso name="ResetPlayerMoney" />  <seealso name="GetPlayerMoney" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player is not connected.  </returns> 
		</member>
		<member name="M:GivePlayerWeapon" syntax="GivePlayerWeapon(playerid, weaponid, ammo)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player to give a weapon to
			</param>
			<param name="weaponid">
				<paraminfo>t_WEAPON </paraminfo>
				The ID of the weapon to give to the player
			</param>
			<param name="ammo">
				The amount of ammo to give to the player
			</param>
			<library>omp_player</library>  <summary>Give a player a weapon with a specified amount of ammo.</summary>        <seealso name="SetPlayerArmedWeapon" />  <seealso name="GetPlayerWeapon" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player is not connected.<br />  </returns> 
		</member>
		<member name="M:HasObjectCameraCollision" syntax="HasObjectCameraCollision(objectid)">
			<tagname value="bool"/>
			<stacksize value="3"/>
			<dependency name="__IsObjectNoCameraCol"/>
			<param name="objectid">
			</param>
			<library>omp_object</library>  <summary></summary> 
		</member>
		<member name="M:HasPlayerObjectCameraCollision" syntax="HasPlayerObjectCameraCollision(playerid, objectid)">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="__IsObjectNoCameraCol"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
			<library>omp_object</library>  <summary></summary> 
		</member>
		<member name="M:HideVehicle" syntax="HideVehicle(vehicleid)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="vehicleid">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:InterpolateCameraLookAt" syntax="InterpolateCameraLookAt(playerid, fromX, fromY, fromZ, toX, toY, toZ, time, cut)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player the camera should be moved for
			</param>
			<param name="fromX">
				<paraminfo>Float </paraminfo>
				The x position the camera should start to move from
			</param>
			<param name="fromY">
				<paraminfo>Float </paraminfo>
				The y position the camera should start to move from
			</param>
			<param name="fromZ">
				<paraminfo>Float </paraminfo>
				The z position the camera should start to move from
			</param>
			<param name="toX">
				<paraminfo>Float </paraminfo>
				The x position the camera should move to
			</param>
			<param name="toY">
				<paraminfo>Float </paraminfo>
				The y position the camera should move to
			</param>
			<param name="toZ">
				<paraminfo>Float </paraminfo>
				The z position the camera should move to
			</param>
			<param name="time">
				Time in milliseconds to complete interpolation
			</param>
			<param name="cut">
				<paraminfo>t_CAM_MOVE </paraminfo>
				The 'jumpcut' to use.  Set to <b><c>CAMERA_MOVE</c></b> for interpolation (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<library>omp_player</library>  <summary>Interpolate a player's camera's 'look at' point between two coordinates with a set speed.  Can be be used with <a href="#InterpolateCameraPos">InterpolateCameraPos</a>.</summary>                    <seealso name="InterpolateCameraPos" />  <seealso name="SetPlayerCameraLookAt" />  <seealso name="SetPlayerCameraPos" />  <remarks>Use <b><c>TogglePlayerSpectating</c></b> to make objects stream in for the player while  the camera is moving.  You can reset the camera behind the player with <b><c>SetCameraBehindPlayer</c></b>.</remarks> 
		</member>
		<member name="M:InterpolateCameraPos" syntax="InterpolateCameraPos(playerid, fromX, fromY, fromZ, toX, toY, toZ, time, cut)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player the camera should be moved for
			</param>
			<param name="fromX">
				<paraminfo>Float </paraminfo>
				The x position the camera should start to move from
			</param>
			<param name="fromY">
				<paraminfo>Float </paraminfo>
				The y position the camera should start to move from
			</param>
			<param name="fromZ">
				<paraminfo>Float </paraminfo>
				The z position the camera should start to move from
			</param>
			<param name="toX">
				<paraminfo>Float </paraminfo>
				The x position the camera should move to
			</param>
			<param name="toY">
				<paraminfo>Float </paraminfo>
				The y position the camera should move to
			</param>
			<param name="toZ">
				<paraminfo>Float </paraminfo>
				The z position the camera should move to
			</param>
			<param name="time">
				Time in milliseconds
			</param>
			<param name="cut">
				<paraminfo>t_CAM_MOVE </paraminfo>
				The jumpcut to use.  Set to <b><c>CAMERA_MOVE</c></b> for a smooth movement (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<library>omp_player</library>  <summary>Move a player's camera from one position to another, within the set time.  Useful for scripted  cut scenes.</summary>                    <seealso name="InterpolateCameraLookAt" />  <seealso name="SetPlayerCameraPos" />  <seealso name="SetPlayerCameraLookAt" />  <remarks>Use <b><c>TogglePlayerSpectating</c></b> to make objects stream in for the player while  the camera is moving.  You can reset the camera behind the player with <b><c>SetCameraBehindPlayer</c></b>.</remarks> 
		</member>
		<member name="M:IsPlayerConnected" syntax="IsPlayerConnected(playerid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<library>omp_player</library>  <summary>Checks if a player is connected (if an ID is taken by a connected player).</summary>    <seealso name="IsPlayerAdmin" />  <seealso name="OnPlayerConnect" />  <seealso name="OnPlayerDisconnect" />  <remarks>This function can be omitted in a lot of cases.  Many other functions already have some  sort of connection check built in.</remarks>  <returns><b><c>1</c></b> if the player is connected, <b><c>0</c></b> if not.</returns> 
		</member>
		<member name="M:IsPlayerNPC" syntax="IsPlayerNPC(playerid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player to check
			</param>
			<library>omp_player</library>  <summary>Check if a player is an actual player or an NPC.</summary>    <seealso name="ConnectNPC" />  <seealso name="IsPlayerAdmin" />  <returns><b><c>1</c></b> if the player is an NPC, <b><c>0</c></b> if not.</returns> 
		</member>
		<member name="M:IsVehicleHidden" syntax="IsVehicleHidden(vehicleid)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="vehicleid">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:IsVehicleOccupied" syntax="IsVehicleOccupied(vehicleid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:KillTimer" syntax="KillTimer(timerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="timerid">
				The ID of the timer to kill (returned by <a href="#SetTimer">SetTimer</a> or  <a href="#SetTimerEx">SetTimerEx</a>)
			</param>
			<library>omp_core</library>  <summary>Kills (stops) a running timer.</summary>    <seealso name="SetTimer" />  <seealso name="SetTimerEx" />  <returns>This function always returns <b><c>0</c></b>.</returns> 
		</member>
		<member name="M:LimitPlayerMarkerRadius" syntax="LimitPlayerMarkerRadius(markerRadius)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="markerRadius">
				<paraminfo>Float </paraminfo>
				The radius that markers will show at
			</param>
			<library>omp_core</library>  <summary>Set the player marker radius.</summary>    <seealso name="ShowPlayerMarkers" />  <seealso name="SetPlayerMarkerForPlayer" />  <seealso name="LimitGlobalChatRadius" /> 
		</member>
		<member name="M:MoveDynamicObject" syntax="MoveDynamicObject(objectid, x, y, z, speed, rx, ry, rz)">
			<attribute name="native"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="objectid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="speed">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnActorStreamIn" syntax="OnActorStreamIn(actorid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="actorid">
				The ID of the actor that has been streamed in for the player
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the actor in
			</param>
			<summary>This callback is called when an actor is streamed in by a player's client.</summary>      <seealso name="OnActorStreamOut" />  <seealso name="OnPlayerStreamIn" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>It is always called first in filterscripts.</remarks>  <returns>This callback does not handle returns.</returns> 
		</member>
		<member name="M:OnActorStreamOut" syntax="OnActorStreamOut(actorid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="actorid">
				The ID of the actor that has been streamed out for the player
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the actor out
			</param>
			<summary>This callback is called when an actor is streamed out by a player's client.</summary>      <seealso name="OnActorStreamIn" />  <seealso name="OnPlayerStreamOut" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>It is always called first in filterscripts.</remarks>  <returns>This callback does not handle returns.</returns> 
		</member>
		<member name="M:OnCachedInit" syntax="OnCachedInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnCachedInit"/>
			<dependency name="SSCANF_RunInit"/>
			<library>sscanf</library>  <remarks>  Called when the script starts if it is (legacy) YSI cached mode.  </remarks> 
		</member>
		<member name="M:OnClientCheckResponse" syntax="OnClientCheckResponse(playerid, actionid, memaddr, retndata)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player checked
			</param>
			<param name="actionid">
				The type of check performed
			</param>
			<param name="memaddr">
				The address requested
			</param>
			<param name="retndata">
				The result of the check
			</param>
			<summary>This callback is called when a SendClientCheck request comletes</summary>          <seealso name="SendClientCheck" /> 
		</member>
		<member name="M:OnDialogResponse" syntax="OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="ForcePerkSelection"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="TogglePlayerSpectating"/>
			<dependency name="false"/>
			<dependency name="player_change_team"/>
			<dependency name="player_perk"/>
			<param name="playerid">
				The ID of the player that responded to the dialog
			</param>
			<param name="dialogid">
				The ID of the dialog the player responded to, assigned in ShowPlayerDialog
			</param>
			<param name="response">
				<b><c>1</c></b> for left button and <b><c>0</c></b> for right button (if only  one button shown, always <b><c>1</c></b>)
			</param>
			<param name="listitem">
				The ID of the list item selected by the player (starts at <b><c>0</c></b>)  (only if using a list style dialog)
			</param>
			<param name="inputtext">
				<paraminfo> [] </paraminfo>
				The text entered into the input box by the player or the selected list item  text
			</param>
			<library>omp_dialog</library>  <summary>This callback is called when a player responds to a dialog shown using <a href="#ShowPlayerDialog">ShowPlayerDialog</a>  by either clicking a button, pressing ENTER/ESC or double-clicking a list item (if using a list style  dialog).</summary>            <seealso name="ShowPlayerDialog" />  <remarks>A player's dialog doesn't hide when the gamemode restarts, causing the server to print <c>"Warning:  PlayerDialogResponse PlayerId: 0 dialog ID doesn't match last sent dialog ID"</c> if a player responded  to this dialog after restart.</remarks>  <remarks>Parameters can contain different values, based on dialog's  <a href="https://open.mp/docs/scripting/resources/dialogstyles">style</a>.  </remarks>  <returns>  Returning <b><c>0</c></b> in this callback will pass the dialog to another script in case no matching  code were found in your gamemode's callback.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnDynamicActorStreamIn" syntax="OnDynamicActorStreamIn(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:OnDynamicActorStreamOut" syntax="OnDynamicActorStreamOut(actorid, forplayerid)">
			<stacksize value="1"/>
			<param name="actorid">
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:OnDynamicObjectMoved" syntax="OnDynamicObjectMoved(objectid)">
			<stacksize value="1"/>
			<param name="objectid">
			</param>
		</member>
		<member name="M:OnEnterExitModShop" syntax="OnEnterExitModShop(playerid, enterexit, interiorid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered or exited the modshop
			</param>
			<param name="enterexit">
				<b><c>1</c></b> if the player entered or <b><c>0</c></b> if they exited
			</param>
			<param name="interiorid">
				The interior ID of the modshop that the player is entering (or 0 if exiting)
			</param>
			<summary>This callback is called when a player enters or exits a mod shop.</summary>        <seealso name="OnVehicleMod" />  <seealso name="OnVehicleRespray" />  <seealso name="OnVehiclePaintjob" />  <seealso name="AddVehicleComponent" />  <remarks>Players collide when they get into the same mod shop.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnFilterScriptExit" syntax="OnFilterScriptExit()">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="CA_DestroyAllObjects_DC"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="funcidx"/>
			<summary>This callback is called when a filterscript is unloaded.  It is only called inside the filterscript  which is unloaded.</summary>  <seealso name="OnFilterScriptInit" />  <seealso name="OnGameModeInit" />  <seealso name="OnGameModeExit" />  <returns>This callback does not handle returns.</returns> 
		</member>
		<member name="M:OnFilterScriptInit" syntax="OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnFilterScriptInit"/>
			<dependency name="SSCANF_RunInit"/>
			<dependency name="SSCANF_gInit"/>
			<summary>This callback is called when a filterscript is initialized (loaded).  It is only called  inside the filterscript which is starting.</summary>  <seealso name="OnFilterScriptExit" />  <seealso name="OnGameModeInit" />  <seealso name="OnGameModeExit" />  <returns>This callback does not handle returns.</returns> <p/> <library>sscanf</library>  <remarks>  Called when the script starts if it is a filterscript, sets up the system,  then calls the "real" OnFilterScriptInit (using the new ALS 2 hook method).  </remarks> 
		</member>
		<member name="M:OnGameModeExit" syntax="OnGameModeExit()">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="CA_DestroyAllObjects_DC"/>
			<dependency name="CallLocalFunction"/>
			<dependency name="funcidx"/>
			<summary>This callback is called when a gamemode ends, either through 'gmx', the server being shut  down, or <a href="#GameModeExit">GameModeExit</a>.</summary>  <seealso name="OnGameModeInit" />  <seealso name="OnFilterScriptExit" />  <seealso name="OnFilterScriptInit" />  <seealso name="GameModeExit" />  <remarks>This function can also be used in a filterscript to detect if the gamemode changes with  RCON commands like changemode or gmx, as changing the gamemode does not reload a filterscript.</remarks>  <remarks>When using OnGameModeExit in conjunction with the 'rcon gmx' console command keep in mind  there is a potential for client bugs to occur an example of this is excessive  <a href="#RemoveBuildingForPlayer">RemoveBuildingForPlayer</a>  calls during OnGameModeInit which could result in a client crash. </remarks>  <remarks>This callback will NOT be called if the server crashes or the process is killed by other  means, such as using the Linux kill command or pressing the close-button on the Windows console.  </remarks>  <returns>  <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnGameModeInit" syntax="OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="2"/>
			<dependency name="PC_Init"/>
			<summary>This callback is triggered when the gamemode starts.</summary>  <seealso name="OnGameModeExit" />  <seealso name="OnFilterScriptInit" />  <seealso name="OnFilterScriptExit" />  <remarks>This function can also be used in a filterscript to detect if the gamemode changes with  RCON commands like changemode or gmx, as changing the gamemode does not reload a filterscript.</remarks>  <returns>  <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnIncomingConnection" syntax="OnIncomingConnection(playerid, ip_address[], port)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player attempting to connect
			</param>
			<param name="ip_address">
				<paraminfo> [] </paraminfo>
				The IP address of the player attempting to connect
			</param>
			<param name="port">
				The port of the attempted connection
			</param>
			<summary>This callback is called when an IP address attempts a connection to the server.  To block  incoming connections, use <a href="#BlockIpAddress">BlockIpAddress</a>.</summary>        <seealso name="OnPlayerConnect" />  <seealso name="OnPlayerDisconnect" />  <seealso name="OnPlayerFinishedDownloading" />  <seealso name="BlockIpAddress" />  <seealso name="UnBlockIpAddress" />  <returns>  <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnObjectMoved" syntax="OnObjectMoved(objectid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="objectid">
				The ID of the object that was moved
			</param>
			<summary>This callback is called when an object is moved after <a href="#MoveObject">MoveObject</a>  (when it stops moving).</summary>    <seealso name="MoveObject" />  <seealso name="IsObjectMoving" />  <seealso name="StopObject" />  <seealso name="OnPlayerObjectMoved" />  <remarks><a href="#SetObjectPos">SetObjectPos</a> does not work when used in this callback.  To fix  it, recreate the object.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPickupStreamIn" syntax="OnPickupStreamIn(pickupid, playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePickup
			</param>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<summary>Called when a pickup enters the visual range of a player.</summary>      <seealso name="CreatePickup" />  <seealso name="DestroyPickup" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPickupStreamOut" syntax="OnPickupStreamOut(pickupid, playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePickup
			</param>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<summary>Called when a pickup leaves the visual range of a player.</summary>      <seealso name="CreatePickup" />  <seealso name="DestroyPickup" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerClickGangZone" syntax="OnPlayerClickGangZone(playerid, zoneid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that clicked a gangzone
			</param>
			<param name="zoneid">
				ID of the gangzone the player clicked
			</param>
			<summary>This callback is called when a player clicked a gangzone.</summary>      <seealso name="GangZoneCreate" />  <seealso name="GangZoneDestroy" />  <seealso name="UseGangZoneCheck" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerClickMap" syntax="OnPlayerClickMap(playerid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that placed a target/waypoint
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X float coordinate where the player clicked
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y float coordinate where the player clicked
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z float coordinate where the player clicked (inaccurate - see note below)
			</param>
			<summary>OnPlayerClickMap is called when a player places a target/waypoint on the pause menu map  (by right-clicking).</summary>          <seealso name="SetPlayerPos" />  <seealso name="SetPlayerPosFindZ" />  <seealso name="GetPlayerPos" />  <remarks>The Z value returned will be <b><c>0</c></b> (invalid) if it is far away from the player;  use the <a href="https://github.com/philip1337/samp-plugin-mapandreas">MapAndreas plugin</a> to get a  more  accurate Z coordinate.</remarks>  <returns>  <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerClickPlayer" syntax="OnPlayerClickPlayer(playerid, clickedplayerid, source)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that clicked on a player on the scoreboard
			</param>
			<param name="clickedplayerid">
				The ID of the player that was clicked on
			</param>
			<param name="source">
				<paraminfo>t_CLICK_SOURCE </paraminfo>
				The source of the player's click
			</param>
			<summary>Called when a player double-clicks on a player on the scoreboard.</summary>        <seealso name="OnPlayerClickTextDraw" />  <remarks>There is currently only one <paramref name="source" /> (<b><c>0 - CLICK_SOURCE_SCOREBOARD</c></b>).  The existence of this argument suggests that more sources may be supported in the future.</remarks>  <returns>  <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerClickPlayerGangZone" syntax="OnPlayerClickPlayerGangZone(playerid, zoneid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that clicked a player gangzone
			</param>
			<param name="zoneid">
				ID of the player gangzone the player clicked
			</param>
			<summary>This callback is called when a player clicked a player gangzone.</summary>      <seealso name="CreatePlayerGangZone" />  <seealso name="PlayerGangZoneDestroy" />  <seealso name="UsePlayerGangZoneCheck" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerClickPlayerTextDraw" syntax="OnPlayerClickPlayerTextDraw(playerid, playertextid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected a textdraw
			</param>
			<param name="playertextid">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw that the player selected
			</param>
			<summary>This callback is called when a player clicks on a player-textdraw.  It is not called when  player cancels the select mode (ESC) - however, <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a>  is.</summary>      <seealso name="PlayerTextDrawSetSelectable" />  <seealso name="OnPlayerClickTextDraw" />  <seealso name="OnPlayerClickPlayer" />  <remarks>When a player presses ESC to cancel selecting a textdraw, <a href="#OnPlayerClickTextDraw">OnPlayerClickTextDraw</a>  is called with a textdraw ID of <b><c>INVALID_TEXT_DRAW</c></b>. <a href="#OnPlayerClickPlayerTextDraw">OnPlayerClickPlayerTextDraw</a>  won't be called also.</remarks>  <returns>  Returning <b><c>1</c></b> in this callback will prevent it being called in other scripts.  This  should be used to signal that the textdraw on which they clicked was 'found' and no further processing  is needed.  You should return <b><c>0</c></b> if the textdraw on which they clicked wasn't found,  just like in <a href="#OnPlayerCommandText">OnPlayerCommandText</a>.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there also blocks other  scripts from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerClickTextDraw" syntax="OnPlayerClickTextDraw(playerid, clickedid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that clicked on the textdraw
			</param>
			<param name="clickedid">
				<paraminfo>Text </paraminfo>
				The ID of the clicked textdraw. <b><c>INVALID_TEXT_DRAW</c></b> if selection  was cancelled
			</param>
			<summary>This callback is called when a player clicks on a textdraw or cancels the select mode with  the Escape key.</summary>      <seealso name="OnPlayerClickPlayerTextDraw" />  <seealso name="OnPlayerClickPlayer" />  <remarks>The clickable area is defined by <a href="#TextDrawTextSize">TextDrawTextSize</a>.  The  x and y parameters passed to that function must not be zero or negative. </remarks>  <remarks>Do not use <a href="#CancelSelectTextDraw">CancelSelectTextDraw</a> unconditionally within  this callback.  This results in an infinite loop. </remarks>  <returns>  Returning <b><c>1</c></b> in this callback will prevent it being called in other scripts.  This  should be used to signal that the textdraw on which they clicked was 'found' and no further processing  is needed.  You should return <b><c>0</c></b> if the textdraw on which they clicked wasn't found,  just like in <a href="#OnPlayerCommandText">OnPlayerCommandText</a>.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there also blocks other  scripts from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerCommandText" syntax="OnPlayerCommandText(playerid, cmdtext[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered a command
			</param>
			<param name="cmdtext">
				<paraminfo> [] </paraminfo>
				The command that was entered (including the forward slash)
			</param>
			<summary>This callback is called when a player enters a command into the client chat window.  Commands  are anything that start with a forward slash, e.g. <c>/help</c>.</summary>      <seealso name="OnPlayerText" />  <seealso name="OnRconCommand" />  <seealso name="SendRconCommand" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  Return <b><c>1</c></b> if the command was processed, otherwise <b><c>0</c></b>; If the command  was not found both in filterscripts and in gamemode, the player will be received a message: <em>SERVER:  Unknown command</em>.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other scripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerConnect" syntax="OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="30"/>
			<dependency name="GetPlayerName"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="SSCANF_Join"/>
			<dependency name="SSCANF_OnPlayerConnect"/>
			<dependency name="SSCANF_gInit"/>
			<param name="playerid">
				The ID of the player that connected
			</param>
			<summary>This callback is called when a player connects to the server.</summary>    <seealso name="OnPlayerDisconnect" />  <seealso name="OnIncomingConnection" />  <seealso name="OnPlayerFinishedDownloading" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.  </returns> <p/> <library>sscanf</library>  <remarks>  Called when a player connects.  Actually increments an internal count so that  if a script ends and <c>OnPlayerDisconnect</c> is called then <c>sscanf</c>  still knows that the player is really connected.  Also stores their name  internally.  </remarks> 
		</member>
		<member name="M:OnPlayerDeath" syntax="OnPlayerDeath(playerid, killerid, reason)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="ForceClassSelection"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendDeathMessage"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="deaths"/>
			<dependency name="false"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_picked_up"/>
			<dependency name="is_player_spawned"/>
			<dependency name="kills"/>
			<dependency name="picked_up_by_team"/>
			<dependency name="player_change_team"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that died
			</param>
			<param name="killerid">
				The ID of the player that killed the player who died, or <b><c>INVALID_PLAYER_ID</c></b>  if there was none
			</param>
			<param name="reason">
				<paraminfo>t_WEAPON </paraminfo>
				The ID of the <a href="https://www.open.mp/docs/scripting/resources/weaponids">reason</a>  for the  player's death
			</param>
			<summary>This callback is called when a player dies, either by suicide or by being killed by another  player.</summary>        <seealso name="OnPlayerSpawn" />  <seealso name="SendDeathMessage" />  <seealso name="SetPlayerHealth" />  <remarks>  The reason will return 37 (flame thrower) from any fire sources (e.g.  molotov, 18)<br />  The reason will return 51 from any weapon that creates an explosion (e.g.  RPG, grenade)<br />  You do not need to check whether killerid is valid before using it in <a href="#SendDeathMessage">SendDeathMessage</a>.  <b><c>INVALID_PLAYER_ID</c></b> is a valid killerid ID parameter in that function.<br />  <b>playerid</b> is the only one who can call the callback. (good to know for anti fake death)  </remarks>  <returns>  <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerDisconnect" syntax="OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="SSCANF_Leave"/>
			<dependency name="SSCANF_OnPlayerDisconnect"/>
			<dependency name="SSCANF_gInit"/>
			<param name="playerid">
				The ID of the player that disconnected
			</param>
			<param name="reason">
				The reason for the disconnection.  See table below
			</param>
			<summary>This callback is called when a player disconnects from the server.</summary>      <seealso name="OnPlayerConnect" />  <seealso name="OnIncomingConnection" />  <seealso name="OnPlayerFinishedDownloading" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>Some functions might not work correctly when used in this callback because the player is  already disconnected when the callback is called.  This means that you can't get unambiguous information  from functions like <a href="#GetPlayerIp">GetPlayerIp</a> and <a href="#GetPlayerPos">GetPlayerPos</a>.</remarks>  <remarks>  <b>Reasons:</b><br />  <ul>  <li><b><c>0</c></b> - timeout/Crash - the player's connection was lost.  Either their game crashed  or their network had a fault.</li>  <li><b><c>1</c></b> - quit - the player purposefully quit, either using the <b><c>/quit (/q)</c></b>  command or via the pause menu.</li>  <li><b><c>2</c></b> - kick/ban - the player was kicked or banned by the server.</li>  </ul>  </remarks>  <returns>  <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.  </returns> <p/> <library>sscanf</library>  <remarks>  Called when a player disconnects, or when a script is ended.  </remarks> 
		</member>
		<member name="M:OnPlayerEditAttachedObject" syntax="OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that ended edition mode
			</param>
			<param name="response">
				<paraminfo>t_EDIT_RESPONSE </paraminfo>
				<b><c>0</c></b> if they cancelled (ESC) or <b><c>1</c></b> if they clicked  the save icon
			</param>
			<param name="index">
				The index of the attached object
			</param>
			<param name="modelid">
				The model of the attached object that was edited
			</param>
			<param name="boneid">
				The bone of the attached object that was edited
			</param>
			<param name="fOffsetX">
				<paraminfo>Float </paraminfo>
				The X offset for the attached object that was edited
			</param>
			<param name="fOffsetY">
				<paraminfo>Float </paraminfo>
				The Y offset for the attached object that was edited
			</param>
			<param name="fOffsetZ">
				<paraminfo>Float </paraminfo>
				The Z offset for the attached object that was edited
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fScaleX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fScaleY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fScaleZ">
				<paraminfo>Float </paraminfo>
			</param>
			<summary>This callback is called when a player ends attached object edition mode.</summary>                  <param name="rotationX">The X rotation for the attached object that was edited</param>  <param name="rotationY">The Y rotation for the attached object that was edited</param>  <param name="rotationZ">The Z rotation for the attached object that was edited</param>  <param name="scaleX">The X scale for the attached object that was edited</param>  <param name="scaleY">The Y scale for the attached object that was edited</param>  <param name="scaleZ">The Z scale for the attached object that was edited</param>  <seealso name="EditAttachedObject" />  <seealso name="SetPlayerAttachedObject" />  <remarks>Editions should be discarded if response was <b><c>0</c></b> (cancelled).  This must be  done by storing the offsets etc.  in an array BEFORE using <a href="#EditAttachedObject">EditAttachedObject</a>.</remarks>  <returns>  <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerEditDynamicObject" syntax="OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rx, ry, rz)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
			<param name="response">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rx">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="ry">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="rz">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerEditObject" syntax="OnPlayerEditObject(playerid, playerobject, objectid, response, fX, fY, fZ, fRotX, fRotY, fRotZ)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that edited an object
			</param>
			<param name="playerobject">
				<b><c>0</c></b> if it is a global object or <b><c>1</c></b> if it is a  playerobject
			</param>
			<param name="objectid">
				The ID of the edited object
			</param>
			<param name="response">
				<paraminfo>t_EDIT_RESPONSE </paraminfo>
				The type of response
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X offset for the object that was edited
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y offset for the object that was edited
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z offset for the object that was edited
			</param>
			<param name="fRotX">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotY">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="fRotZ">
				<paraminfo>Float </paraminfo>
			</param>
			<summary>This callback is called when a player finishes editing an object (<a href="#EditObject">EditObject</a>/<a  href="#EditPlayerObject">EditPlayerObject</a>).</summary>                <param name="rotationX">The X rotation for the object that was edited</param>  <param name="rotationY">The Y rotation for the object that was edited</param>  <param name="rotationZ">The Z rotation for the object that was edited</param>  <seealso name="EditObject" />  <seealso name="CreateObject" />  <seealso name="DestroyObject" />  <seealso name="MoveObject" />  <remarks>When using <b><c>EDIT_RESPONSE_UPDATE</c></b> be aware that this callback will not be called  when releasing an edit in progress resulting in the last update of <b><c>EDIT_RESPONSE_UPDATE</c></b>  being out of sync of the objects current position.</remarks>  <returns>  <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerEnterCheckpoint" syntax="OnPlayerEnterCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The player who entered the checkpoint
			</param>
			<summary>This callback is called when a player enters the checkpoint set for that player.</summary>    <seealso name="OnPlayerLeaveCheckpoint" />  <seealso name="OnPlayerEnterRaceCheckpoint" />  <seealso name="OnPlayerLeaveRaceCheckpoint" />  <seealso name="SetPlayerCheckpoint" />  <seealso name="DisablePlayerCheckpoint" />  <seealso name="IsPlayerInCheckpoint" />  <seealso name="SetPlayerRaceCheckpoint" />  <seealso name="DisablePlayerRaceCheckpoint" />  <seealso name="IsPlayerInRaceCheckpoint" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerEnterDynamicArea" syntax="OnPlayerEnterDynamicArea(playerid, areaid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="areaid">
			</param>
		</member>
		<member name="M:OnPlayerEnterDynamicCP" syntax="OnPlayerEnterDynamicCP(playerid, checkpointid)">
			<attribute name="public"/>
			<stacksize value="12"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="GetPlayerTeam"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SendClientMessageToAll"/>
			<dependency name="SetTimerEx"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_player"/>
			<dependency name="cp_team"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="occupied"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerEnterDynamicRaceCP" syntax="OnPlayerEnterDynamicRaceCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerEnterGangZone" syntax="OnPlayerEnterGangZone(playerid, zoneid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered the gangzone
			</param>
			<param name="zoneid">
				ID of the gangzone the player entered
			</param>
			<summary>This callback is called when a player enters a gangzone.</summary>      <seealso name="GangZoneCreate" />  <seealso name="GangZoneDestroy" />  <seealso name="UseGangZoneCheck" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerEnterPlayerGangZone" syntax="OnPlayerEnterPlayerGangZone(playerid, zoneid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that entered the player gangzone
			</param>
			<param name="zoneid">
				ID of the player gangzone the player entered
			</param>
			<summary>This callback is called when a player enters a player gangzone.</summary>      <seealso name="CreatePlayerGangZone" />  <seealso name="PlayerGangZoneDestroy" />  <seealso name="UsePlayerGangZoneCheck" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerEnterRaceCheckpoint" syntax="OnPlayerEnterRaceCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who entered the race checkpoint
			</param>
			<summary>This callback is called when a player enters a race checkpoint.</summary>    <seealso name="OnPlayerEnterCheckpoint" />  <seealso name="OnPlayerLeaveCheckpoint" />  <seealso name="OnPlayerLeaveRaceCheckpoint" />  <seealso name="SetPlayerCheckpoint" />  <seealso name="DisablePlayerCheckpoint" />  <seealso name="IsPlayerInCheckpoint" />  <seealso name="SetPlayerRaceCheckpoint" />  <seealso name="DisablePlayerRaceCheckpoint" />  <seealso name="IsPlayerInRaceCheckpoint" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerEnterVehicle" syntax="OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				ID of the player who attempts to enter a vehicle
			</param>
			<param name="vehicleid">
				ID of the vehicle the player is attempting to enter
			</param>
			<param name="ispassenger">
				<b><c>0</c></b> if entering as driver. <b><c>1</c></b> if entering as passenger
			</param>
			<summary>This callback is called when a player <b><c>starts</c></b> to enter a vehicle, meaning the  player is not in vehicle yet at the time this callback is called.</summary>        <seealso name="OnPlayerExitVehicle" />  <seealso name="OnPlayerStateChange" />  <seealso name="PutPlayerInVehicle" />  <seealso name="GetPlayerVehicleSeat" />  <remarks>This callback is called when a player <b>BEGINS</b> to enter a vehicle, not when they HAVE  entered it.  See <a href="#OnPlayerStateChange">OnPlayerStateChange</a>. </remarks>  <remarks>This callback is still called if the player is denied entry to the vehicle (e.g.  it is  locked or full). </remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerExitVehicle" syntax="OnPlayerExitVehicle(playerid, vehicleid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that is exiting a vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle the player is exiting
			</param>
			<summary>This callback is called when a player <b>starts</b> to exit a vehicle.</summary>      <seealso name="OnPlayerEnterVehicle" />  <seealso name="OnPlayerStateChange" />  <seealso name="RemovePlayerFromVehicle" />  <seealso name="GetPlayerVehicleSeat" />  <remarks>Not called if the player falls off a bike or is removed from a vehicle by other means such  as using <a href="#SetPlayerPos">SetPlayerPos</a>.</remarks>  <remarks>You must use <a href="#OnPlayerStateChange">OnPlayerStateChange</a> and check if their old  state is <b><c>PLAYER_STATE_DRIVER</c></b> or <b><c>PLAYER_STATE_PASSENGER</c></b> and their new  state is <b><c>PLAYER_STATE_ONFOOT</c></b>.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerExitedMenu" syntax="OnPlayerExitedMenu(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that exited the menu
			</param>
			<summary>Called when a player exits a menu.</summary>    <seealso name="OnPlayerSelectedMenuRow" />  <seealso name="CreateMenu" />  <seealso name="DestroyMenu" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerFinishedDownloading" syntax="OnPlayerFinishedDownloading(playerid, virtualworld)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that finished downloading custom models
			</param>
			<param name="virtualworld">
				The ID of the virtual world the player finished downloading custom models  for
			</param>
			<summary>This callback is called when a player finishes downloading custom models.  For more information  on how to add custom models to your server, see <a href="https://sampforum.blast.hk/showthread.php?tid=644105">the  release thread</a> and <a href="https://sampforum.blast.hk/showthread.php?tid=644123">this tutorial</a>.</summary>      <seealso name="OnPlayerConnect" />  <seealso name="OnPlayerDisconnect" />  <seealso name="OnIncomingConnection" />  <remarks>This callback is called every time a player changes virtual worlds, even if there are no  custom models present in that world.</remarks>  <returns>This callback does not handle returns.</returns> 
		</member>
		<member name="M:OnPlayerGiveDamage" syntax="OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart)">
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that gave damage
			</param>
			<param name="damagedid">
				The ID of the player that received damage
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of health/armour damagedid has lost (combined)
			</param>
			<param name="weaponid">
				<paraminfo>t_WEAPON </paraminfo>
				The <a href="https://www.open.mp/docs/scripting/resources/weaponids">reason</a>  that caused the  damage
			</param>
			<param name="bodypart">
				The body part that was hit.
			</param>
			<summary>This callback is called when a player gives damage to another player.</summary>            <seealso name="OnPlayerTakeDamage" />  <remarks>  Keep in mind this function can be inaccurate in some cases.<br />  If you want to prevent certain players from damaging eachother, use <a href="#SetPlayerTeam">SetPlayerTeam</a>.<br  />  The weaponid will return <b><c>37</c></b> (flame thrower) from any fire sources (e.g.  molotov,  18)<br />  The weaponid will return <b><c>51</c></b> from any weapon that creates an explosion (e.g.  RPG,  grenade)<br />  <b>playerid</b> is the only one who can call the callback.<br />  The amount is always the maximum damage the weaponid can do, even when the health left is less  than that maximum damage.  So when a player has <b><c>100.0</c></b> health and gets shot with a Desert  Eagle which has a damage value of <b><c>46.2</c></b>, it takes 3 shots to kill that player.  All  3 shots will show an amount of <b><c>46.2</c></b>, even though when the last shot hits, the player  only has <b><c>7.6</c></b> health left.  </remarks>  <returns>  <b><c>1</c></b> - Callback will not be called in other filterscripts.<br />  <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerGiveDamageActor" syntax="OnPlayerGiveDamageActor(playerid, damaged_actorid, amount, weaponid, bodypart)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that gave damage
			</param>
			<param name="damaged_actorid">
				The ID of the actor that received damage
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of health/armour damaged_actorid has lost
			</param>
			<param name="weaponid">
				<paraminfo>t_WEAPON </paraminfo>
				The reason that caused the damage
			</param>
			<param name="bodypart">
				The body part that was hit
			</param>
			<summary>This callback is called when a player gives damage to an actor.</summary>            <seealso name="CreateActor" />  <seealso name="SetActorInvulnerable" />  <seealso name="SetActorHealth" />  <seealso name="GetActorHealth" />  <seealso name="IsActorInvulnerable" />  <seealso name="IsValidActor" />  <seealso name="OnActorStreamOut" />  <seealso name="OnPlayerStreamIn" />  <remarks>This function does not get called if the actor is set invulnerable (WHICH IS BY DEFAULT).  See <a href="#SetActorInvulnerable">SetActorInvulnerable</a>.</remarks>  <returns>  <b><c>1</c></b> - Callback will not be called in other filterscripts.<br />  <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerGiveDamageDynamicActor" syntax="OnPlayerGiveDamageDynamicActor(playerid, actorid, amount, weaponid, bodypart)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="actorid">
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="weaponid">
			</param>
			<param name="bodypart">
			</param>
		</member>
		<member name="M:OnPlayerInteriorChange" syntax="OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The playerid who changed interior
			</param>
			<param name="newinteriorid">
				The interior the player is now in
			</param>
			<param name="oldinteriorid">
				The interior the player was in before
			</param>
			<summary>Called when a player changes interior.  Can be triggered by SetPlayerInterior or when a  player enter/exits a building.</summary>        <seealso name="SetPlayerInterior" />  <seealso name="GetPlayerInterior" />  <seealso name="LinkVehicleToInterior" />  <seealso name="OnPlayerStateChange" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerKeyStateChange" syntax="OnPlayerKeyStateChange(playerid, newkeys, oldkeys)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that pressed or released a key
			</param>
			<param name="newkeys">
				<paraminfo>t_KEY </paraminfo>
				A map (bitmask) of the keys currently held - see <a href="https://www.open.mp/docs/scripting/resources/keys">here</a> 
			</param>
			<param name="oldkeys">
				<paraminfo>t_KEY </paraminfo>
				A map (bitmask) of the keys held prior to the current change - see  <a href="https://www.open.mp/docs/scripting/resources/keys">here</a>
			</param>
			<summary>This callback is called when the state of any supported key is changed (pressed/released).  Directional keys do not trigger OnPlayerKeyStateChange (up/down/left/right).</summary>        <seealso name="GetPlayerKeys" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>  Useful macros:<br />  <code>  // HOLDING(keys)<br />  #define HOLDING(%0) ((newkeys &amp; (%0)) == (%0))<br />  <br />  // PRESSED(keys)<br />  #define PRESSED(%0) (((newkeys &amp; (%0)) == (%0)) &amp;&amp; ((oldkeys &amp; (%0)) != (%0)))<br  />  <br />  // PRESSING(keyVariable, keys)<br />  #define PRESSING(%0,%1) (%0 &amp; (%1))<br />  <br />  // RELEASED(keys)<br />  #define RELEASED(%0) (((newkeys &amp; (%0)) != (%0)) &amp;&amp; ((oldkeys &amp; (%0)) == (%0)))<br  />  </code>  </remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerLeaveCheckpoint" syntax="OnPlayerLeaveCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that left their checkpoint
			</param>
			<summary>This callback is called when a player leaves the checkpoint set for them by  <a href="#SetPlayerCheckpoint">SetPlayerCheckpoint</a>.  Only one checkpoint can be set at a time.</summary>    <seealso name="OnPlayerEnterCheckpoint" />  <seealso name="OnPlayerEnterRaceCheckpoint" />  <seealso name="OnPlayerLeaveRaceCheckpoint" />  <seealso name="SetPlayerCheckpoint" />  <seealso name="DisablePlayerCheckpoint" />  <seealso name="IsPlayerInCheckpoint" />  <seealso name="SetPlayerRaceCheckpoint" />  <seealso name="DisablePlayerRaceCheckpoint" />  <seealso name="IsPlayerInRaceCheckpoint" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerLeaveDynamicArea" syntax="OnPlayerLeaveDynamicArea(playerid, areaid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="areaid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveDynamicCP" syntax="OnPlayerLeaveDynamicCP(playerid, checkpointid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="KillTimer"/>
			<dependency name="SendClientMessage"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_player"/>
			<dependency name="false"/>
			<dependency name="occupied"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveDynamicRaceCP" syntax="OnPlayerLeaveDynamicRaceCP(playerid, checkpointid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="checkpointid">
			</param>
		</member>
		<member name="M:OnPlayerLeaveGangZone" syntax="OnPlayerLeaveGangZone(playerid, zoneid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that exited the gangzone
			</param>
			<param name="zoneid">
				ID of the gangzone the player exited
			</param>
			<summary>This callback is called when a player exited a gangzone.</summary>      <seealso name="GangZoneCreate" />  <seealso name="GangZoneDestroy" />  <seealso name="UseGangZoneCheck" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerLeavePlayerGangZone" syntax="OnPlayerLeavePlayerGangZone(playerid, zoneid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that exited the player gangzone
			</param>
			<param name="zoneid">
				ID of the player gangzone the player exited
			</param>
			<summary>This callback is called when a player exited a player gangzone.</summary>      <seealso name="CreatePlayerGangZone" />  <seealso name="PlayerGangZoneDestroy" />  <seealso name="UsePlayerGangZoneCheck" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerLeaveRaceCheckpoint" syntax="OnPlayerLeaveRaceCheckpoint(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that left the race checkpoint
			</param>
			<summary>This callback is called when a player leaves the race checkpoint.</summary>    <seealso name="OnPlayerEnterCheckpoint" />  <seealso name="OnPlayerLeaveCheckpoint" />  <seealso name="OnPlayerEnterRaceCheckpoint" />  <seealso name="SetPlayerCheckpoint" />  <seealso name="DisablePlayerCheckpoint" />  <seealso name="IsPlayerInCheckpoint" />  <seealso name="SetPlayerRaceCheckpoint" />  <seealso name="DisablePlayerRaceCheckpoint" />  <seealso name="IsPlayerInRaceCheckpoint" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerObjectMoved" syntax="OnPlayerObjectMoved(playerid, objectid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The playerid the object is assigned to
			</param>
			<param name="objectid">
				The ID of the player object that was moved
			</param>
			<summary>This callback is called when a player object is moved after <a href="#MovePlayerObject">MovePlayerObject</a>  (when it stops moving).</summary>      <seealso name="OnObjectMoved" />  <seealso name="MovePlayerObject" />  <seealso name="IsPlayerObjectMoving" />  <seealso name="StopPlayerObject" />  <remarks>This callback can also be called for NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerPickUpDynamicPickup" syntax="OnPlayerPickUpDynamicPickup(playerid, pickupid)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="pickupid">
			</param>
		</member>
		<member name="M:OnPlayerPickUpPickup" syntax="OnPlayerPickUpPickup(playerid, pickupid)">
			<attribute name="public"/>
			<stacksize value="5"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SendClientMessage"/>
			<dependency name="false"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_picked_up"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePickup
			</param>
			<summary>Called when a player picks up a pickup created with <a href="#CreatePickup">CreatePickup</a>.</summary>      <seealso name="CreatePickup" />  <seealso name="DestroyPickup" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerPickUpPlayerPickup" syntax="OnPlayerPickUpPlayerPickup(playerid, pickupid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePlayerPickup
			</param>
			<summary>Called when a player picks up a pickup created with <a href="#CreatePickup">CreatePlayerPickup</a>.</summary>      <seealso name="CreatePlayerPickup" />  <seealso name="DestroyPlayerPickup" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerPickupStreamIn" syntax="OnPlayerPickupStreamIn(pickupid, playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePickup
			</param>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<summary>Called when a pickup enters the visual range of a player.</summary>      <seealso name="CreatePickup" />  <seealso name="DestroyPickup" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerPickupStreamOut" syntax="OnPlayerPickupStreamOut(pickupid, playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="pickupid">
				The ID of the pickup, returned by CreatePickup
			</param>
			<param name="playerid">
				The ID of the player that picked up the pickup
			</param>
			<summary>Called when a pickup leaves the visual range of a player.</summary>      <seealso name="CreatePickup" />  <seealso name="DestroyPickup" />  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerRequestClass" syntax="OnPlayerRequestClass(playerid, classid)">
			<attribute name="public"/>
			<stacksize value="13"/>
			<dependency name="operator+(Float:,_:)"/>
			<dependency name="operator*(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="ApplyAnimation"/>
			<dependency name="ClassInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="CreatePlayerTextDraw"/>
			<dependency name="InterpolateCameraLookAt"/>
			<dependency name="InterpolateCameraPos"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerTextDrawAlignment"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="PlayerTextDrawFont"/>
			<dependency name="PlayerTextDrawShow"/>
			<dependency name="RemovePlayerMapIcon"/>
			<dependency name="SetPlayerCameraLookAt"/>
			<dependency name="SetPlayerCameraPos"/>
			<dependency name="SetPlayerFacingAngle"/>
			<dependency name="SetPlayerPos"/>
			<dependency name="a"/>
			<dependency name="current_textdraw"/>
			<dependency name="degrees"/>
			<dependency name="false"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<dependency name="title"/>
			<dependency name="true"/>
			<dependency name="x"/>
			<dependency name="y"/>
			<dependency name="z"/>
			<param name="playerid">
				The ID of the player that changed class
			</param>
			<param name="classid">
				The ID of the current class being viewed (returned by <a href="#AddPlayerClass">AddPlayerClass</a>)
			</param>
			<summary>Called when a player changes class at class selection (and when class selection first appears).</summary>      <seealso name="OnPlayerRequestSpawn" />  <seealso name="AddPlayerClass" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>This callback is also called when a player presses <b>F4</b>.</remarks>  <returns>  Returning <b><c>0</c></b> in this callback will prevent the player from spawning.  The player can  be forced to spawn when <a href="#SpawnPlayer">SpawnPlayer</a> is used.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerRequestDownload" syntax="OnPlayerRequestDownload(playerid, type, crc)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="type">
				<paraminfo>t_DOWNLOAD_REQUEST </paraminfo>
			</param>
			<param name="crc">
			</param>
		</member>
		<member name="M:OnPlayerRequestSpawn" syntax="OnPlayerRequestSpawn(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player that requested to spawn
			</param>
			<summary>Called when a player attempts to spawn via class selection either by pressing SHIFT or clicking  the 'Spawn' button.</summary>    <seealso name="OnPlayerSpawn" />  <seealso name="OnPlayerRequestClass" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>To prevent players from spawning with certain classes, the last viewed class must be saved  in a variable in <a href="#OnPlayerRequestClass">OnPlayerRequestClass</a>.</remarks>  <returns>  Returning <b><c>0</c></b> in this callback will prevent the player from spawning.<br />  It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other  scripts from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerSelectDynamicObject" syntax="OnPlayerSelectDynamicObject(playerid, objectid, modelid, x, y, z)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="objectid">
			</param>
			<param name="modelid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerSelectObject" syntax="OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected an object
			</param>
			<param name="type">
				<paraminfo>t_SELECT_OBJECT </paraminfo>
				The type of selection
			</param>
			<param name="objectid">
				The ID of the selected object
			</param>
			<param name="modelid">
				The model ID of the selected object
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X position of the selected object
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y position of the selected object
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z position of the selected object
			</param>
			<summary>This callback is called when a player selects an object after <a href="#SelectObject">SelectObject</a>  has been used.</summary>                <seealso name="SelectObject" />  <returns>  <b><c>1</c></b> - Will prevent other scripts from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the next script.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerSelectedMenuRow" syntax="OnPlayerSelectedMenuRow(playerid, row)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that selected a menu item
			</param>
			<param name="row">
				The ID of the row that was selected.  The first row is ID <b><c>0</c></b>
			</param>
			<summary>This callback is called when a player selects an item from a menu (<a href="#ShowMenuForPlayer">ShowMenuForPlayer</a>).</summary>      <seealso name="OnPlayerExitedMenu" />  <seealso name="OnDialogResponse" />  <seealso name="CreateMenu" />  <seealso name="DestroyMenu" />  <seealso name="AddMenuItem" />  <seealso name="ShowMenuForPlayer" />  <seealso name="HideMenuForPlayer" />  <remarks>The menu ID is not passed to this callback. <a href="#GetPlayerMenu">GetPlayerMenu</a> must  be used to determine which menu the player selected an item on.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in gamemode.  </returns> 
		</member>
		<member name="M:OnPlayerShootDynamicObject" syntax="OnPlayerShootDynamicObject(playerid, weaponid, objectid, x, y, z)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="weaponid">
			</param>
			<param name="objectid">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
		</member>
		<member name="M:OnPlayerSpawn" syntax="OnPlayerSpawn(playerid)">
			<attribute name="public"/>
			<stacksize value="23"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="AttachDynamicObjectToPlayer"/>
			<dependency name="ClassInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="CreateDynamicObject"/>
			<dependency name="GetPlayerTeam"/>
			<dependency name="GivePlayerWeapon"/>
			<dependency name="PerkInfo"/>
			<dependency name="PerkInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerTextDrawDestroy"/>
			<dependency name="SetPlayerArmour"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="SetPlayerInterior"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="color"/>
			<dependency name="current_textdraw"/>
			<dependency name="is_player_spawned"/>
			<dependency name="perk_armour"/>
			<dependency name="perk_health"/>
			<dependency name="perk_weapon_ammo"/>
			<dependency name="perk_weapons"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that spawned
			</param>
			<summary>This callback is called when a player spawns.(i.e.  after caling <a href="#SpawnPlayer">SpawnPlayer</a>  function).</summary>    <seealso name="OnPlayerDeath" />  <seealso name="OnVehicleSpawn" />  <seealso name="SpawnPlayer" />  <seealso name="AddPlayerClass" />  <seealso name="SetSpawnInfo" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>The game sometimes deducts $100 from players after spawn.</remarks>  <returns>  <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerStateChange" syntax="OnPlayerStateChange(playerid, newstate, oldstate)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that changed state
			</param>
			<param name="newstate">
				<paraminfo>t_PLAYER_STATE </paraminfo>
				The player's new state
			</param>
			<param name="oldstate">
				<paraminfo>t_PLAYER_STATE </paraminfo>
				The player's previous state
			</param>
			<summary>This callback is called when a player changes state.  For example, when a player changes  from being the driver of a vehicle to being on-foot.</summary>        <seealso name="OnPlayerInteriorChange" />  <seealso name="GetPlayerState" />  <seealso name="GetPlayerSpecialAction" />  <seealso name="SetPlayerSpecialAction" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>  <b>States:</b><br />  <ul>  <li><b><c>PLAYER_STATE_NONE</c></b> - empty (while initializing)</li>  <li><b><c>PLAYER_STATE_ONFOOT</c></b> - player is on foot</li>  <li><b><c>PLAYER_STATE_DRIVER</c></b> - player is the driver of a vehicle</li>  <li><b><c>PLAYER_STATE_PASSENGER</c></b> - player is passenger of a vehicle</li>  <li><b><c>PLAYER_STATE_WASTED</c></b> - player is dead or on class selection</li>  <li><b><c>PLAYER_STATE_SPAWNED</c></b> - player is spawned</li>  <li><b><c>PLAYER_STATE_SPECTATING</c></b> - player is spectating</li>  <li><b><c>PLAYER_STATE_EXIT_VEHICLE</c></b> - player exits a vehicle</li>  <li><b><c>PLAYER_STATE_ENTER_VEHICLE_DRIVER</c></b> - player enters a vehicle as driver</li>  <li><b><c>PLAYER_STATE_ENTER_VEHICLE_PASSENGER</c></b> - player enters a vehicle as passenger  </li>  </ul>  </remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerStreamIn" syntax="OnPlayerStreamIn(playerid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who has been streamed
			</param>
			<param name="forplayerid">
				The ID of the player that streamed the other player in
			</param>
			<summary>This callback is called when a player is streamed by some other player's client.</summary>      <seealso name="OnPlayerStreamOut" />  <seealso name="OnActorStreamIn" />  <seealso name="OnVehicleStreamIn" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerStreamOut" syntax="OnPlayerStreamOut(playerid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The player who has been destreamed
			</param>
			<param name="forplayerid">
				The player who has destreamed the other player
			</param>
			<summary>This callback is called when a player is streamed out from some other player's client.</summary>      <seealso name="OnPlayerStreamIn" />  <seealso name="OnActorStreamOut" />  <seealso name="OnVehicleStreamOut" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerTakeDamage" syntax="OnPlayerTakeDamage(playerid, issuerid, amount, weaponid, bodypart)">
			<attribute name="public"/>
			<stacksize value="25"/>
			<dependency name="operator+(Float:,_:)"/>
			<dependency name="operator*(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreateDynamicObject"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="MoveDynamicObject"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="SetTimerEx"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="false"/>
			<dependency name="floatpower"/>
			<dependency name="floatround"/>
			<dependency name="floatsqroot"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<param name="playerid">
				The ID of the player that took damage
			</param>
			<param name="issuerid">
				The ID of the player that caused the damage. <b><c>INVALID_PLAYER_ID</c></b>  if self-inflicted
			</param>
			<param name="amount">
				<paraminfo>Float </paraminfo>
				The amount of damage the player took (health and armour combined)
			</param>
			<param name="weaponid">
				<paraminfo>t_WEAPON </paraminfo>
				The ID of the <a href="https://www.open.mp/docs/scripting/resources/weaponids">weapon/reason</a>  for the damage
			</param>
			<param name="bodypart">
				The body part that was hit.
			</param>
			<summary>This callback is called when a player takes damage.</summary>            <seealso name="OnPlayerGiveDamage" />  <seealso name="OnPlayerWeaponShot" />  <remarks><a href="#GetPlayerHealth">GetPlayerHealth</a> and <a href="#GetPlayerArmour">GetPlayerArmour</a>  will return the old amounts of the player before this callback. </remarks>  <remarks>  The weaponid will return <b><c>37</c></b> (flame thrower) from any fire sources (e.g.  molotov,  <b><c>18</c></b>).<br />  The weaponid will return <b><c>51</c></b> from any weapon that creates an explosion (e.g.  RPG,  grenade)<br />  <b>playerid</b> is the only one who can call the callback.<br />  The amount is always the maximum damage the weaponid can do, even when the health left is less  than that maximum damage.  So when a player has <b><c>100.0</c></b> health and gets shot with a Desert  Eagle which has a damage value of <b><c>46.2</c></b>, it takes 3 shots to kill that player.  All  3 shots will show an amount of <b><c>46.2</c></b>, even though when the last shot hits, the player  only has <b><c>7.6</c></b> health left.  </remarks>  <returns>  <b><c>1</c></b> - Callback will not be called in other filterscripts.<br />  <b><c>0</c></b> - Allows this callback to be called in other filterscripts.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there blocks other filterscripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerText" syntax="OnPlayerText(playerid, text[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who typed the text
			</param>
			<param name="text">
				<paraminfo> [] </paraminfo>
				The text the player typed
			</param>
			<summary>Called when a player sends a chat message.</summary>      <seealso name="OnPlayerCommandText" />  <seealso name="SendPlayerMessageToPlayer" />  <seealso name="SendPlayerMessageToAll" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  Returning <b><c>0</c></b> in this callback will stop the text from being sent to all players.<br  />  It is always called first in filterscripts so returning <b><c>0</c></b> there blocks other scripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnPlayerUpdate" syntax="OnPlayerUpdate(playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				ID of the player sending an update packet
			</param>
			<summary>This callback is called every time a client/player updates the server with their status.  It is often used to create custom callbacks for client updates that aren't actively tracked by the  server, such as health or armor updates or players switching weapons.</summary>    <remarks>This callback can also be called by NPC.</remarks>  <remarks>This callback is called, on average, 30 times per second, per player; only use it when you  know what it's meant for (or more importantly what it's NOT meant for). </remarks>  <remarks>The frequency with which this callback is called for each player varies, depending on what  the player is doing.  Driving or shooting will trigger a lot more updates than idling. </remarks>  <returns>  <b><c>0</c></b> - Update from this player will not be replicated to other clients.<br />  <b><c>1</c></b> - Indicates that this update can be processed normally and sent to other players.<br  />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnPlayerWeaponShot" syntax="OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ)">
			<attribute name="public"/>
			<stacksize value="22"/>
			<dependency name="operator!=(Float:,_:)"/>
			<dependency name="operator-(Float:,Float:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator/(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreateExplosion"/>
			<dependency name="GetPlayerDrunkLevel"/>
			<dependency name="GetPlayerLastShotVectors"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="GetPlayerVelocity"/>
			<dependency name="GetVehiclePos"/>
			<dependency name="GetVehicleVelocity"/>
			<dependency name="IsVehicleOccupied"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerDrunkLevel"/>
			<dependency name="SetPlayerVelocity"/>
			<dependency name="SetTimerEx"/>
			<dependency name="SetVehicleAngularVelocity"/>
			<dependency name="SetVehicleVelocity"/>
			<dependency name="false"/>
			<dependency name="floatabs"/>
			<dependency name="floatpower"/>
			<dependency name="floatsqroot"/>
			<dependency name="is_player_drunk"/>
			<dependency name="player_drunk_timer"/>
			<dependency name="true"/>
			<param name="playerid">
				The ID of the player that shot a weapon
			</param>
			<param name="weaponid">
				<paraminfo>t_WEAPON </paraminfo>
				The ID of the <a href="https://www.open.mp/docs/scripting/resources/weaponids">weapon</a>  shot  by the player
			</param>
			<param name="hittype">
				<paraminfo>t_BULLET_HIT_TYPE </paraminfo>
				The type of thing the shot hit (none, player, vehicle, or (player)object)
			</param>
			<param name="hitid">
				The ID of the player, vehicle or object that was hit
			</param>
			<param name="fX">
				<paraminfo>Float </paraminfo>
				The X coordinate that the shot hit
			</param>
			<param name="fY">
				<paraminfo>Float </paraminfo>
				The Y coordinate that the shot hit
			</param>
			<param name="fZ">
				<paraminfo>Float </paraminfo>
				The Z coordinate that the shot hit
			</param>
			<summary>This callback is called when a player fires a shot from a weapon.  Only bullet weapons are  supported.  Only <b>passenger</b> drive-by is supported (not driver drive-by, and not sea sparrow  / hunter shots).</summary>                <seealso name="OnPlayerGiveDamage" />  <seealso name="GetPlayerLastShotVectors" />  <remarks>  <li><b><c>BULLET_HIT_TYPE_NONE(0)</c></b></li>  <li><b><c>BULLET_HIT_TYPE_PLAYER(1)</c></b></li>  <li><b><c>BULLET_HIT_TYPE_VEHICLE(2)</c></b></li>  <li><b><c>BULLET_HIT_TYPE_OBJECT(3)</c></b></li>  <li><b><c>BULLET_HIT_TYPE_PLAYER_OBJECT(4)</c></b></li>  </remarks>  <remarks><b><c>BULLET_HIT_TYPE_PLAYER</c></b> is also called for NPCs.  Actors are ignored by this  callback and detects as <b><c>BULLET_HIT_TYPE_NONE</c></b>.</remarks>  <remarks>This callback is only called when lag compensation is <b>enabled</b>. </remarks>  <remarks>  If hittype is:<br />  <ul>  <li>- <b><c>BULLET_HIT_TYPE_NONE</c></b>: the fX, fY and fZ parameters are normal coordinates,  will give 0.0 for coordinates if nothing was hit (e.g.  far object that the bullet can't reach);</li>  <li>- Others: the fX, fY and fZ are offsets relative to the hitid.</li>  </ul>  </remarks>  <remarks>  Isn't called if you fired in vehicle as driver or if you are looking behind with the aim enabled  (shooting in air).<br />  It is called as <b><c>BULLET_HIT_TYPE_VEHICLE</c></b> with the correct hitid (the hit player's  vehicleid) if you are shooting a player which is in a vehicle.  It won't be called as <b><c>BULLET_HIT_TYPE_PLAYER</c></b>  at all.<br />  </remarks>  <remarks>  </remarks>  <remarks><a href="#GetPlayerLastShotVectors">GetPlayerLastShotVectors</a> can be used in this callback  for more detailed bullet vector information.</remarks>  <returns>  <b><c>0</c></b> - Prevent the bullet from causing damage.<br />  <b><c>1</c></b> - Allow the bullet to cause damage.<br />  It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other  scripts from seeing it.  </returns> 
		</member>
		<member name="M:OnRconCommand" syntax="OnRconCommand(cmd[])">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="cmd">
				<paraminfo> [] </paraminfo>
				A string containing the command that was typed, as well as any passed parameters
			</param>
			<summary>This callback is called when a command is sent through the server console, remote RCON,  or via the in-game "/rcon command".</summary>    <seealso name="IsPlayerAdmin" />  <seealso name="OnRconLoginAttempt" />  <remarks>You will need to include this callback in a loaded filterscript for it to work in the gamemode!</remarks>  <remarks>"/rcon" is not included in "cmd" when a player types a command. </remarks>  <remarks>If you use the <a href="#print">print</a> function here, it will send a message to the player  who typed the command in-game as well as the log.</remarks>  <remarks>This callback is not called when the player is not logged in as RCON admin. </remarks>  <remarks>When the player is not logged in as RCON admin and uses <b>/rcon login</b>, this callback  will not be called and <a href="#OnRconLoginAttempt">OnRconLoginAttempt</a> is called instead.  However,  when the player is logged in as RCON admin, the use of this command will call this callback. </remarks>  <returns>  <b><c>0</c></b> if the command was not processed, it will be passed to another script or <b><c>1</c></b>  if the command was processed, will not be passed to other scripts.<br />  It is always called first in filterscripts so returning <b><c>1</c></b> there blocks gamemode from  seeing it.  </returns> 
		</member>
		<member name="M:OnRconLoginAttempt" syntax="OnRconLoginAttempt(ip[], password[], success)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="ip">
				<paraminfo> [] </paraminfo>
				The IP of the player that tried to log in to RCON
			</param>
			<param name="password">
				<paraminfo> [] </paraminfo>
				The password used to login with
			</param>
			<param name="success">
				<b><c>0</c></b> if the password was incorrect or <b><c>1</c></b> if it was  correct
			</param>
			<summary>This callback is called when someone attempts to log in to RCON in-game; successful or not.</summary>        <seealso name="OnRconCommand" />  <seealso name="IsPlayerAdmin" />  <seealso name="SendRconCommand" />  <remarks>This callback is only called when /rcon login is used in-game. </remarks>  <remarks>This callback is only called when the player is not yet logged in.  When the player is logged  in, <a href="#OnRconCommand">OnRconCommand</a> is called instead.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnScriptCash" syntax="OnScriptCash(playerid, amount, source)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who got cash from the game
			</param>
			<param name="amount">
				The amount of cash given
			</param>
			<param name="source">
				Where the money came from
			</param>
			<summary>This callback is called when something in-game like casinos give the player money</summary>        <remarks>Doesn't work</remarks> 
		</member>
		<member name="M:OnScriptInit" syntax="OnScriptInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnScriptInit"/>
			<dependency name="SSCANF_RunInit"/>
			<dependency name="SSCANF_gInit"/>
			<library>sscanf</library>  <remarks>  Called for earlier initialisation by YSI.  </remarks> 
		</member>
		<member name="M:OnTrailerUpdate" syntax="OnTrailerUpdate(playerid, vehicleid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player who sent a trailer update
			</param>
			<param name="vehicleid">
				The Trailer being updated
			</param>
			<summary>This callback is called when a player sent a trailer update.</summary>      <seealso name="OnUnoccupiedVehicleUpdate" />  <seealso name="GetVehicleTrailer" />  <seealso name="IsTrailerAttachedToVehicle" />  <seealso name="AttachTrailerToVehicle" />  <seealso name="DetachTrailerFromVehicle" />  <remarks>This callback is called very frequently per second per trailer.  You should refrain from  implementing intensive calculations or intensive file writing/reading operations in this callback.  </remarks>  <returns>  <b><c>0</c></b> - Cancels any trailer updates from being sent to other players.  Update is still  sent to the updating player.<br />  <b><c>1</c></b> - Processes the trailer update as normal and synchronizes it between all players.<br  />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnUnoccupiedVehicleUpdate" syntax="OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that's position was updated
			</param>
			<param name="playerid">
				The ID of the player that sent a vehicle position sync update
			</param>
			<param name="passenger_seat">
				The ID of the seat if the player is a passenger.  0=not in vehicle,  1=front passenger, 2=backleft 3=backright 4+ is for coach/bus etc.  with many passenger seats
			</param>
			<param name="new_x">
				<paraminfo>Float </paraminfo>
				The new X coordinate of the vehicle.
			</param>
			<param name="new_y">
				<paraminfo>Float </paraminfo>
				The new Y coordinate of the vehicle.
			</param>
			<param name="new_z">
				<paraminfo>Float </paraminfo>
				The new Z coordinate of the vehicle.
			</param>
			<param name="vel_x">
				<paraminfo>Float </paraminfo>
				The new X velocity of the vehicle.
			</param>
			<param name="vel_y">
				<paraminfo>Float </paraminfo>
				The new Y velocity of the vehicle.
			</param>
			<param name="vel_z">
				<paraminfo>Float </paraminfo>
				The new Z velocity of the vehicle.
			</param>
			<summary>This callback is called when a player's client updates/syncs the position of a vehicle they're  not driving.  This can happen outside of the vehicle or when the player is a passenger of a vehicle  that has no driver.</summary>                    <seealso name="OnTrailerUpdate" />  <remarks>This callback is called very frequently per second per unoccupied vehicle.  You should refrain  from implementing intensive calculations or intensive file writing/reading operations in this callback.</remarks>  <remarks><a href="#GetVehiclePos">GetVehiclePos</a> will return the old coordinates of the vehicle  before this update.</remarks>  <returns>  Returning <b><c>0</c></b> in this callback will stop the vehicle's position being synced to other  players.  Update is still sent to the updating player.  Useful for combating vehicle teleport hacks.<br  />  It is always called first in filterscripts so returning <b><c>0</c></b> there also blocks other  scripts from seeing it.  </returns> 
		</member>
		<member name="M:OnVehicleDamageStatusUpdate" syntax="OnVehicleDamageStatusUpdate(vehicleid, playerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that was changed its damage status
			</param>
			<param name="playerid">
				The ID of the player who synced the change in the damage status (who had the  car damaged or repaired)
			</param>
			<summary>This callback is called when a vehicle element such as doors, tires, panels, or lights change  their damage status.</summary>      <seealso name="GetVehicleDamageStatus" />  <seealso name="UpdateVehicleDamageStatus" />  <remarks>This does not include vehicle health changes</remarks>  <returns>  <b><c>1</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.<br />  </returns> 
		</member>
		<member name="M:OnVehicleDeath" syntax="OnVehicleDeath(vehicleid, killerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that was destroyed
			</param>
			<param name="killerid">
				The ID of the player that reported (synced) the vehicle's destruction (name  is misleading).  Generally the driver or a passenger (if any) or the closest player
			</param>
			<summary>This callback is called when a vehicle is destroyed - either by exploding or becoming submerged  in water.</summary>      <seealso name="OnVehicleSpawn" />  <seealso name="SetVehicleHealth" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>This callback will also be called when a vehicle enters water, but the vehicle can be saved  from destruction by teleportation or driving out (if only partially submerged).  The callback won't  be called a second time, and the vehicle may disappear when the driver exits, or after a short time.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnVehicleMod" syntax="OnVehicleMod(playerid, vehicleid, componentid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the driver of the vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle which is modded
			</param>
			<param name="componentid">
				The ID of the component which was added to the vehicle
			</param>
			<summary>This callback is called when a vehicle is modded.</summary>        <seealso name="AddVehicleComponent" />  <seealso name="OnEnterExitModShop" />  <seealso name="OnVehiclePaintjob" />  <seealso name="OnVehicleRespray" />  <remarks>This callback is NOT called by <a href="#AddVehicleComponent">AddVehicleComponent</a>.</remarks>  <returns>  Return <b><c>0</c></b> to desync the mod (or an invalid mod) from propagating and / or crashing  players.<br />  It is always called first in gamemode so returning <b><c>0</c></b> there also blocks other filterscripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnVehiclePaintjob" syntax="OnVehiclePaintjob(playerid, vehicleid, paintjobid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that changed the paintjob of their vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle that had its paintjob changed
			</param>
			<param name="paintjobid">
				The ID of the new paintjob
			</param>
			<summary>Called when a player previews a vehicle paintjob inside a mod shop.  Watch out, this callback  is not called when the player buys the paintjob.</summary>        <seealso name="ChangeVehiclePaintjob" />  <seealso name="ChangeVehicleColours" />  <seealso name="OnVehicleRespray" />  <seealso name="OnVehicleMod" />  <remarks>This callback is not called by <a href="#ChangeVehiclePaintjob">ChangeVehiclePaintjob</a>.</remarks>  <returns>  This callback does not handle returns.  Returning <b><c>0</c></b> won't deny the paintjob change.<br  />  It is always called first in gamemode so returning <b><c>0</c></b> there blocks other filterscripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnVehicleRespray" syntax="OnVehicleRespray(playerid, vehicleid, color1, color2)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that is driving the vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle that was resprayed
			</param>
			<param name="color1">
				The colour that the vehicle's primary colour was changed to
			</param>
			<param name="color2">
				The colour that the vehicle's secondary colour was changed to
			</param>
			<summary>This callback is called when a player exits a mod shop, even if the colours weren't changed.  Watch out, the name is ambiguous, Pay 'n' Spray shops don't call this callback.</summary>          <seealso name="ChangeVehicleColours" />  <seealso name="ChangeVehiclePaintjob" />  <seealso name="OnVehiclePaintjob" />  <seealso name="OnVehicleMod" />  <seealso name="OnEnterExitModShop" />  <remarks>Previewing a component inside a mod shop might call this callback.</remarks>  <remarks>This callback is not called by <a href="#ChangeVehicleColor">ChangeVehicleColor</a>.</remarks>  <returns>  Returning <b><c>0</c></b> in this callback will deny the colour change.  Returning <b><c>1</c></b>  will allow it.  This can be used to prevent hackers from changing vehicle colours using cheats.<br  />  It is always called first in gamemode so returning <b><c>0</c></b> there also blocks other filterscripts  from seeing it.  </returns> 
		</member>
		<member name="M:OnVehicleSirenStateChange" syntax="OnVehicleSirenStateChange(playerid, vehicleid, newstate)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="playerid">
				The ID of the player that toggled the siren (driver)
			</param>
			<param name="vehicleid">
				The ID of the vehicle of which the siren was toggled for
			</param>
			<param name="newstate">
				<b><c>0</c></b> if siren was turned off, <b><c>1</c></b> if siren was turned  on
			</param>
			<summary>This callback is called when a vehicle's siren is toggled.</summary>        <seealso name="GetVehicleParamsSirenState" />  <remarks>This callback can also be called by NPC.</remarks>  <remarks>This callback is only called when a vehicle's siren is toggled on or off, NOT when the alternate  siren is in use (holding horn).</remarks>  <returns>  <b><c>1</c></b> - Will prevent gamemode from receiving this callback.<br />  <b><c>0</c></b> - Indicates that this callback will be passed to the gamemode.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnVehicleSpawn" syntax="OnVehicleSpawn(vehicleid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that spawned
			</param>
			<summary>This callback is called when a vehicle <b>re</b>spawns.</summary>    <seealso name="OnVehicleDeath" />  <seealso name="OnPlayerSpawn" />  <seealso name="SetVehicleToRespawn" />  <seealso name="CreateVehicle" />  <returns>  <b><c>0</c></b> - Will prevent other filterscripts from receiving this callback.<br />  <b><c>1</c></b> - Indicates that this callback will be passed to the next filterscript.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnVehicleStreamIn" syntax="OnVehicleStreamIn(vehicleid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that streamed in for the player
			</param>
			<param name="forplayerid">
				The ID of the player who the vehicle streamed in for
			</param>
			<summary>Called when a vehicle is streamed to a player's client.</summary>      <seealso name="OnVehicleStreamOut" />  <seealso name="OnPlayerStreamIn" />  <seealso name="OnPlayerStreamOut" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:OnVehicleStreamOut" syntax="OnVehicleStreamOut(vehicleid, forplayerid)">
			<attribute name="public"/>
			<stacksize value="1"/>
			<param name="vehicleid">
				The ID of the vehicle that streamed out
			</param>
			<param name="forplayerid">
				The ID of the player who is no longer streaming the vehicle
			</param>
			<summary>This callback is called when a vehicle is streamed out for a player's client (it's so far  away that they can't see it).</summary>      <seealso name="OnVehicleStreamIn" />  <seealso name="OnPlayerStreamIn" />  <seealso name="OnPlayerStreamOut" />  <remarks>This callback can also be called by NPC.</remarks>  <returns>  This callback does not handle returns.<br />  It is always called first in filterscripts.  </returns> 
		</member>
		<member name="M:PC_Init" syntax="PC_Init()">
			<attribute name="native"/>
			<referrer name="OnGameModeInit"/>
		</member>
		<member name="M:PawnCmd_OnGameModeInit" syntax="PawnCmd_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="3"/>
			<dependency name="SSCANF_OnGameModeInit"/>
			<dependency name="SSCANF_RunInit"/>
			<dependency name="SSCANF_gInit"/>
			<library>sscanf</library>  <remarks>  Called when the script starts if it is a gamemode.  This callback is also  called in filterscripts so we don't want to reinitialise the system in that  case.  </remarks> 
		</member>
		<member name="M:PlayerTextDrawAlignment" syntax="PlayerTextDrawAlignment(playerid, textid, alignment)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to set the alignment of
			</param>
			<param name="textid">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to set the alignment of
			</param>
			<param name="alignment">
				<paraminfo>t_TEXT_DRAW_ALIGN </paraminfo>
				<b><c>1</c></b>-left <b><c>2</c></b>-centered <b><c>3</c></b>-right
			</param>
			<library>omp_textdraw</library>  <summary>Set the text alignment of a player-textdraw.</summary>        <seealso name="CreatePlayerTextDraw" />  <seealso name="PlayerTextDrawDestroy" />  <seealso name="PlayerTextDrawColour" />  <seealso name="PlayerTextDrawBoxColour" />  <seealso name="PlayerTextDrawBackgroundColour" />  <seealso name="PlayerTextDrawFont" />  <seealso name="PlayerTextDrawLetterSize" />  <seealso name="PlayerTextDrawTextSize" />  <seealso name="PlayerTextDrawSetOutline" />  <seealso name="PlayerTextDrawSetShadow" />  <seealso name="PlayerTextDrawSetProportional" />  <seealso name="PlayerTextDrawUseBox" />  <seealso name="PlayerTextDrawSetString" />  <seealso name="PlayerTextDrawShow" />  <seealso name="PlayerTextDrawHide" />  <remarks>For alignment <b><c>2</c></b> (center) the x and y values of TextSize need to be swapped,  see notes at <a href="#PlayerTextDrawTextSize">PlayerTextDrawTextSize</a>. </remarks> 
		</member>
		<member name="M:PlayerTextDrawDestroy" syntax="PlayerTextDrawDestroy(playerid, textid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player who's player-textdraw to destroy
			</param>
			<param name="textid">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to destroy
			</param>
			<library>omp_textdraw</library>  <summary>Destroy a player-textdraw.</summary>      <seealso name="CreatePlayerTextDraw" />  <seealso name="PlayerTextDrawColour" />  <seealso name="PlayerTextDrawBoxColour" />  <seealso name="PlayerTextDrawBackgroundColour" />  <seealso name="PlayerTextDrawAlignment" />  <seealso name="PlayerTextDrawFont" />  <seealso name="PlayerTextDrawLetterSize" />  <seealso name="PlayerTextDrawTextSize" />  <seealso name="PlayerTextDrawSetOutline" />  <seealso name="PlayerTextDrawSetShadow" />  <seealso name="PlayerTextDrawSetProportional" />  <seealso name="PlayerTextDrawUseBox" />  <seealso name="PlayerTextDrawSetString" />  <seealso name="PlayerTextDrawShow" />  <seealso name="PlayerTextDrawHide" /> 
		</member>
		<member name="M:PlayerTextDrawFont" syntax="PlayerTextDrawFont(playerid, textid, font)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose player-textdraw to change the font of
			</param>
			<param name="textid">
				<paraminfo>PlayerText </paraminfo>
				The ID of the player-textdraw to change the font of
			</param>
			<param name="font">
				<paraminfo>t_TEXT_DRAW_FONT </paraminfo>
				There are four font styles.  A font value greater than <b><c>3</c></b> does not  display, and anything greater than <b><c>16</c></b> crashes the client.  See  <a href="https://open.mp/docs/scripting/functions/TextDrawFont">https://open.mp/docs/scripting/functions/TextDrawFont</a>
			</param>
			<library>omp_textdraw</library>  <summary>Change the font of a player-textdraw.</summary>        <seealso name="CreatePlayerTextDraw" />  <seealso name="PlayerTextDrawDestroy" />  <seealso name="PlayerTextDrawColour" />  <seealso name="PlayerTextDrawBoxColour" />  <seealso name="PlayerTextDrawBackgroundColour" />  <seealso name="PlayerTextDrawAlignment" />  <seealso name="PlayerTextDrawLetterSize" />  <seealso name="PlayerTextDrawTextSize" />  <seealso name="PlayerTextDrawSetOutline" />  <seealso name="PlayerTextDrawSetShadow" />  <seealso name="PlayerTextDrawSetProportional" />  <seealso name="PlayerTextDrawUseBox" />  <seealso name="PlayerTextDrawSetString" />  <seealso name="PlayerTextDrawShow" />  <seealso name="PlayerTextDrawHide" /> 
		</member>
		<member name="M:PlayerTextDrawShow" syntax="PlayerTextDrawShow(playerid, textid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to show the textdraw for
			</param>
			<param name="textid">
				<paraminfo>PlayerText </paraminfo>
				The ID of the textdraw to show
			</param>
			<library>omp_textdraw</library>  <summary>Show a player-textdraw to the player it was created for.</summary>      <seealso name="PlayerTextDrawHide" />  <seealso name="CreatePlayerTextDraw" />  <seealso name="PlayerTextDrawDestroy" />  <seealso name="PlayerTextDrawColour" />  <seealso name="PlayerTextDrawBoxColour" />  <seealso name="PlayerTextDrawBackgroundColour" />  <seealso name="PlayerTextDrawAlignment" />  <seealso name="PlayerTextDrawFont" />  <seealso name="PlayerTextDrawLetterSize" />  <seealso name="PlayerTextDrawTextSize" />  <seealso name="PlayerTextDrawSetOutline" />  <seealso name="PlayerTextDrawSetShadow" />  <seealso name="PlayerTextDrawSetProportional" />  <seealso name="PlayerTextDrawUseBox" />  <seealso name="PlayerTextDrawSetString" /> 
		</member>
		<member name="M:PutPlayerInVehicle" syntax="PutPlayerInVehicle(playerid, vehicleid, seatid)">
			<attribute name="native"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="playerid">
				The ID of the player to put in a vehicle
			</param>
			<param name="vehicleid">
				The ID of the vehicle to put the player in
			</param>
			<param name="seatid">
				The ID of the seat to put the player in
			</param>
			<library>omp_player</library>  <summary>Puts a player in a vehicle.</summary>        <seealso name="RemovePlayerFromVehicle" />  <seealso name="GetPlayerVehicleid" />  <seealso name="GetPlayerVehicleSeat" />  <seealso name="OnPlayerEnterVehicle" />  <remarks>If this function is used on a player that is already in a vehicle, other players will still  see them in their previous vehicle.  To fix this, first remove the player from the vehicle.</remarks>  <remarks>If the seat is invalid or is taken, will cause a crash when they EXIT the vehicle.</remarks>  <remarks>You can use <a href="#GetPlayerVehicleSeat">GetPlayerVehicleSeat</a> in a loop to check  if a seat is occupied by any players.</remarks>  <remarks>  <b>Seats:</b><br />  <ul>  <li><b><c>0</c></b> - driver.</li>  <li><b><c>1</c></b> - front passenger.</li>  <li><b><c>2</c></b> - back-left passenger.</li>  <li><b><c>3</c></b> - back-right passenger.</li>  <li><b><c>4+</c></b> - passenger seats (coach etc.).</li>  </ul>  </remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The player or vehicle don't exist.  </returns> 
		</member>
		<member name="M:RemovePlayerDrunk" syntax="RemovePlayerDrunk(hitid)">
			<stacksize value="4"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerDrunkLevel"/>
			<dependency name="false"/>
			<dependency name="is_player_drunk"/>
			<param name="hitid">
			</param>
		</member>
		<member name="M:RemovePlayerMapIcon" syntax="RemovePlayerMapIcon(playerid, iconid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose icon to remove
			</param>
			<param name="iconid">
				The ID of the icon to remove.  This is the second parameter of  <a href="#SetPlayerMapIcon">SetPlayerMapIcon</a>
			</param>
			<library>omp_player</library>  <summary>Removes a map icon that was set earlier for a player using <a href="#SetPlayerMapIcon">SetPlayerMapIcon</a>.</summary>      <seealso name="SetPlayerMapIcon" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  </returns> 
		</member>
		<member name="M:SSCANF_GetClosestString" syntax="SSCANF_GetClosestString(input[], candidates[][], threshold, count)">
			<stacksize value="6"/>
			<referrer name="SSCANF_GetClosestValue"/>
			<dependency name="SSCANF_Levenshtein"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="threshold">
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates.
			</param>
			<library>sscanf</library>          <remarks>  Takes an input string and an array of string possibilities (candidates) and  returns the index of the string closest to the input string.  If no valid  match is found, <c>-1</c> is returned.  Note that this will always return the  closest, even if the closest is not that close; which is why an optional  <c>threshold</c> parameter is available.  When this parameter is provided the  closest match must be closer in Levenshtein distance than the threshold,  otherwise again <c>-1</c> is returned.  </remarks> 
		</member>
		<member name="M:SSCANF_GetClosestValue" syntax="SSCANF_GetClosestValue(input[], candidates[][], results[], fail, threshold, count, check)">
			<stacksize value="8"/>
			<dependency name="SSCANF_GetClosestString"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="results">
				<paraminfo> [] </paraminfo>
				The values to return when the corresponding candidate (by index) is the closest  match.
			</param>
			<param name="fail">
				The value to return when there is no good match.
			</param>
			<param name="threshold">
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates (must match <c>check</c>).
			</param>
			<param name="check">
				The number of results (must match <c>count</c>).
			</param>
			<library>sscanf</library>                <remarks>  Similar to <c>SSCANF_GetClosestString</c> in that it searches the  <c>candidates</c> array for the string most closely matching the <c>input</c>  and bounded by <c>threshold</c>.  But instead of returning the index this  function returns the value in the second <c>results</c> array at that index;  and instead of returning <c>-1</c> on failure it returns the value of  <c>fail</c>.  The two arrays must match in size and an <c>assert</c> in the  function checks for this.  </remarks> 
		</member>
		<member name="M:SSCANF_GetSimilarString" syntax="SSCANF_GetSimilarString(input[], candidates[][], threshold, count)">
			<stacksize value="6"/>
			<referrer name="SSCANF_GetSimilarValue"/>
			<dependency name="operator&gt;=(Float:,Float:)"/>
			<dependency name="SSCANF_TextSimilarity"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="threshold">
				<paraminfo>Float </paraminfo>
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates.
			</param>
			<library>sscanf</library>          <remarks>  Takes an input string and an array of string possibilities (candidates) and  returns the index of the string closest to the input string.  If no valid  match is found, <c>-1</c> is returned.  Note that this will always return the  closest, even if the closest is not that close; which is why an optional  <c>threshold</c> parameter is available.  When this parameter is provided the  closest match must be closer in Levenshtein distance than the threshold,  otherwise again <c>-1</c> is returned.  </remarks> 
		</member>
		<member name="M:SSCANF_GetSimilarValue" syntax="SSCANF_GetSimilarValue(input[], candidates[][], results[], fail, threshold, count, check)">
			<stacksize value="8"/>
			<referrer name="sscanf_weapon"/>
			<referrer name="sscanf_vehicle"/>
			<dependency name="SSCANF_GetSimilarString"/>
			<dependency name="cellmin"/>
			<param name="input">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="candidates">
				<paraminfo> [][] </paraminfo>
				A list of other strings to compare against.
			</param>
			<param name="results">
				<paraminfo> [] </paraminfo>
				The values to return when the corresponding candidate (by index) is the closest  match.
			</param>
			<param name="fail">
				The value to return when there is no good match.
			</param>
			<param name="threshold">
				<paraminfo>Float </paraminfo>
				How similar the strings must be to be considered a match.
			</param>
			<param name="count">
				The number of candidates (must match <c>check</c>).
			</param>
			<param name="check">
				The number of results (must match <c>count</c>).
			</param>
			<library>sscanf</library>                <remarks>  Similar to <c>SSCANF_GetClosestString</c> in that it searches the  <c>candidates</c> array for the string most closely matching the <c>input</c>  and bounded by <c>threshold</c>.  But instead of returning the index this  function returns the value in the second <c>results</c> array at that index;  and instead of returning <c>-1</c> on failure it returns the value of  <c>fail</c>.  The two arrays must match in size and an <c>assert</c> in the  function checks for this.  </remarks> 
		</member>
		<member name="M:SSCANF_Init" syntax="SSCANF_Init(players, invalid, len)">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<param name="players">
				The maximum players on the server.
			</param>
			<param name="invalid">
				The invalid player ID.
			</param>
			<param name="len">
				<c>MAX_PLAYER_NAME</c>.
			</param>
			<library>sscanf</library>        <remarks>  Initialise the plugin with real server information.  </remarks> 
		</member>
		<member name="M:SSCANF_IsConnected" syntax="SSCANF_IsConnected(playerid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<param name="playerid">
				The ID of the player.
			</param>
			<library>sscanf</library>    <remarks>  Checks if the plugin knows about a given player ID.  Used when modes restart  to re-add players.  </remarks> 
		</member>
		<member name="M:SSCANF_Join" syntax="SSCANF_Join(playerid, name[], npc)">
			<attribute name="native"/>
			<referrer name="SSCANF_RunInit"/>
			<referrer name="OnPlayerConnect"/>
			<param name="playerid">
				The ID of the player.
			</param>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The name of the player.
			</param>
			<param name="npc">
				<paraminfo>bool </paraminfo>
				Is this player an NPC?
			</param>
			<library>sscanf</library>        <remarks>  Called when a player joins to inform the plugin of the connection.  </remarks> 
		</member>
		<member name="M:SSCANF_Leave" syntax="SSCANF_Leave(playerid)">
			<attribute name="native"/>
			<referrer name="OnPlayerDisconnect"/>
			<param name="playerid">
				The ID of the player.
			</param>
			<library>sscanf</library>    <remarks>  Called when a player leaves to inform the plugin of the disconnection.  </remarks> 
		</member>
		<member name="M:SSCANF_Levenshtein" syntax="SSCANF_Levenshtein(string1[], string2[])">
			<attribute name="native"/>
			<referrer name="SSCANF_GetClosestString"/>
			<param name="string1">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="string2">
				<paraminfo> [] </paraminfo>
				The second string to compare.
			</param>
			<library>sscanf</library>      <remarks>  Computes the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">  Levenshtein Distance</a> between two strings.  This is simlar to  <c>strcmp</c> in usage, but is slightly more "fuzzy".  Distances are used to  work out which string is the most similar to another one, though they may not  be identical.  Useful in <c>k</c> callback functions to determine if the  entered string is close to a possible string.  </remarks> 
		</member>
		<member name="M:SSCANF_OnCachedInit" syntax="SSCANF_OnCachedInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="OnCachedInit"/>
		</member>
		<member name="M:SSCANF_OnFilterScriptInit" syntax="SSCANF_OnFilterScriptInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="OnFilterScriptInit"/>
		</member>
		<member name="M:SSCANF_OnGameModeInit" syntax="SSCANF_OnGameModeInit()">
			<attribute name="public"/>
			<stacksize value="15"/>
			<automaton name="_ALS"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="AddPlayerClassEx"/>
			<dependency name="CA_CreateObject"/>
			<dependency name="CA_Init"/>
			<dependency name="CPInfo"/>
			<dependency name="CPInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="ClassInfo"/>
			<dependency name="CreateDynamicCP"/>
			<dependency name="CreateDynamicMapIcon"/>
			<dependency name="CreateObject"/>
			<dependency name="CreatePickup"/>
			<dependency name="DisableInteriorEnterExits"/>
			<dependency name="LimitPlayerMarkerRadius"/>
			<dependency name="PerkInfo"/>
			<dependency name="PerkInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="PickupInfo"/>
			<dependency name="SetGameModeText"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="Skill_KingCharges"/>
			<dependency name="UsePlayerPedAnims"/>
			<dependency name="a"/>
			<dependency name="color"/>
			<dependency name="cp_bomb_timer"/>
			<dependency name="cp_defuse_timer"/>
			<dependency name="cp_mapicon"/>
			<dependency name="cp_player"/>
			<dependency name="cp_team"/>
			<dependency name="cp_x"/>
			<dependency name="cp_y"/>
			<dependency name="cp_z"/>
			<dependency name="false"/>
			<dependency name="is_active"/>
			<dependency name="is_picked_up"/>
			<dependency name="occupied"/>
			<dependency name="perk_armour"/>
			<dependency name="perk_health"/>
			<dependency name="perk_title"/>
			<dependency name="perk_weapon_ammo"/>
			<dependency name="perk_weapons"/>
			<dependency name="picked_up_by_team"/>
			<dependency name="pickup_object"/>
			<dependency name="pickup_x"/>
			<dependency name="pickup_y"/>
			<dependency name="pickup_z"/>
			<dependency name="skin"/>
			<dependency name="strcopy"/>
			<dependency name="title"/>
			<dependency name="true"/>
			<dependency name="x"/>
			<dependency name="y"/>
			<dependency name="z"/>
		</member>
		<member name="M:SSCANF_OnPlayerConnect" syntax="SSCANF_OnPlayerConnect(playerid)">
			<attribute name="public"/>
			<stacksize value="6"/>
			<automaton name="_ALS"/>
			<referrer name="OnPlayerConnect"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="CreatePlayerTextDraw"/>
			<dependency name="GivePlayerMoney"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerColor"/>
			<dependency name="current_textdraw"/>
			<dependency name="deaths"/>
			<dependency name="false"/>
			<dependency name="is_carrying_bomb"/>
			<dependency name="is_player_spawned"/>
			<dependency name="kills"/>
			<dependency name="player_change_team"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:SSCANF_OnPlayerDisconnect" syntax="SSCANF_OnPlayerDisconnect(playerid, reason)">
			<attribute name="public"/>
			<stacksize value="3"/>
			<automaton name="_ALS"/>
			<referrer name="OnPlayerDisconnect"/>
			<dependency name="DestroyDynamicObject"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="SkillInfo"/>
			<dependency name="player_perk"/>
			<dependency name="skill_king_charges"/>
			<param name="playerid">
			</param>
			<param name="reason">
			</param>
		</member>
		<member name="M:SSCANF_OnScriptInit" syntax="SSCANF_OnScriptInit()">
			<attribute name="public"/>
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<referrer name="OnScriptInit"/>
		</member>
		<member name="M:SSCANF_Option" syntax="SSCANF_Option(name[], value)">
			<stacksize value="1"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The sscanf option to get or set.  For example <c>SSCANF_ARGB</c>.
			</param>
			<param name="value">
				<paraminfo> {_,Float} </paraminfo>
				The optional value to use when setting the option.
			</param>
			<library>sscanf</library>      <remarks>  Backwards-compatibility with <c>SSCANF_Option</c>.  Usage:  <code>  SSCANF_Option(SSCANF_QUIET, 1);           <br />  new quiet = SSCANF_Option(SSCANF_QUIET);  </code>  This doesn't actually use a default parameter because a user may want to set  the option to whatever that parameter is.  Instead this is a macro that calls  <c>SSCANF_GetOption__</c> when called with one parameter (just a name), or  instead calls <c>SSCANF_SetOption__</c> when called with two - a name and a  value.  </remarks> 
		</member>
		<member name="M:SSCANF_RunInit" syntax="SSCANF_RunInit()">
			<stacksize value="31"/>
			<referrer name="OnScriptInit"/>
			<referrer name="OnFilterScriptInit"/>
			<referrer name="PawnCmd_OnGameModeInit"/>
			<referrer name="OnCachedInit"/>
			<dependency name="GetMaxPlayers"/>
			<dependency name="GetPlayerName"/>
			<dependency name="IsPlayerConnected"/>
			<dependency name="IsPlayerNPC"/>
			<dependency name="SSCANF_Init"/>
			<dependency name="SSCANF_IsConnected"/>
			<dependency name="SSCANF_Join"/>
			<dependency name="SSCANF_gInit"/>
			<library>sscanf</library> <remarks> Generic initialisation code called from a range of different init publics. </remarks> <!-- <p/> <p/> There's a bug in the old compiler with the pawndoc generation for functions containing <c>state</c>.  This little trick starts an XML comment at the end of the documentation <c>SSCANF_RunInit</c> and immediately closes it again in a dedicated function <c>SSCANF_RunInit0</c>, which is sorted next lexicographically. --> <transition target="_ALS_go"/>

		</member>
		<member name="M:SSCANF_TextSimilarity" syntax="SSCANF_TextSimilarity(string1[], string2[])">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="SSCANF_GetSimilarString"/>
			<param name="string1">
				<paraminfo> [] </paraminfo>
				The first string to compare.
			</param>
			<param name="string2">
				<paraminfo> [] </paraminfo>
				The second string to compare.
			</param>
			<library>sscanf</library>      <remarks>  This works out the similarity between two strings.  The Levenshtein distance  often produces results that seem weird to people, for example by that measure  <c>NRG</c> is closer to <c>TUG</c> than <c>NRG-500</c>.  Instead this  function compares all pairs of letters between the two strings to work out  what percentage of each string is in the other string, then multiplies the  results to get the final similarity.  This algorithm produces much more human  sane results, and can handle things like <c>ls police<c> matching  <c>Police Car (LSPD)</c>.  It ignores all punctuation and case as well.  </remarks> 
		</member>
		<member name="M:SSCANF_Version" syntax="SSCANF_Version(version[], size)">
			<stacksize value="1"/>
			<dependency name="SSCANF_VERSION_BCD"/>
			<param name="version">
				<paraminfo> [] </paraminfo>
				Pass-by-reference return value.
			</param>
			<param name="size">
				The size of the destination array.
			</param>
			<library>sscanf</library>      <remarks>  Get the SSCANF plugin version as a string (e.g. <c>"2.11.2"</c>) <em>or</em>  a BCD-encoded value (e.g. <c>0x021102</c>).  This function returns a string  (by reference) when called with parameters, or a number (directly) when not.  </remarks> 
		</member>
		<member name="M:SSCANF__" syntax="SSCANF__(file[], line, data[], format[], ...)">
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<param name="file">
				<paraminfo> [] </paraminfo>
				The file in which this call is found.
			</param>
			<param name="line">
				The line at which this call is found.
			</param>
			<param name="data">
				<paraminfo> [] </paraminfo>
				The input string containing the data to parse out.
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format description of what the input data should contain.
			</param>
			<param name="...">
				<paraminfo> {T_WEAPON,Float,_} </paraminfo>
			</param>
			<library>sscanf</library>          <remarks>  The current true implementation of <c>sscanf</c> in the plugin.  This is  wrapped by macros to provide <c>sscanf</c> enhanced with filenames and line  numbers so that errors have more information.  The plugin also contains a  native function called <c>sscanf</c> which is only for backwards-  compatibility with older versions of this include.  </remarks> 
		</member>
		<member name="M:SendClientMessage" syntax="SendClientMessage(playerid, colour, format[], ...)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="pc_cmd_st"/>
			<referrer name="OnPlayerDeath"/>
			<referrer name="OnPlayerPickUpPickup"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerLeaveDynamicCP"/>
			<param name="playerid">
				The ID of the player to display the message to
			</param>
			<param name="colour">
				The colour of the message (<b>RGBA</b>)
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The text that will be displayed <b>(max 144 characters).  Optionally formatted.</b>
			</param>
			<param name="...">
				<paraminfo> {LANDING_GEAR_STATE,Bit,Bitmap,XML,XMLEntry,Group,INI,Language,Style,DB,DBResult,Menu,Text,PlayerText,Text3D,PlayerText3D,File,Float,CUSTOM_TAG_TYPES,_} </paraminfo>
			</param>
			<library>omp_player</library>  <summary>This function sends a message to a specific player with a chosen colour in the chat.  The  whole line in the chatbox will be in the set colour unless colour embedding is used (since <b><c>0.3c</c></b>).</summary>        <seealso name="SendClientMessageToAll" />  <seealso name="SendPlayerMessageToPlayer" />  <seealso name="SendPlayerMessageToAll" />  <remarks>If a message is longer than 144 characters, it will not be sent.  Truncation can be used  to prevent this.  Displaying a message on multiple lines will also solve this issue. </remarks>  <remarks>Avoid using the percent sign (or format specifiers) in the actual message text without properly  escaping it (like <b><c>%%</c></b>).  It will result in crashes otherwise. </remarks>  <remarks>You can use colour embedding for multiple colours in the message. </remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.  Success is reported when the string is over  144 characters, but the message won't be sent.<br />  <b><c>0</c></b>: The function failed to execute.  The player is not connected.  </returns> 
		</member>
		<member name="M:SendClientMessageToAll" syntax="SendClientMessageToAll(colour, format[], ...)">
			<attribute name="native"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="colour">
				The colour of the message (<b>RGBA</b>)
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The message to show (<b>max 144 characters</b>).  Optionally formatted.
			</param>
			<param name="...">
				<paraminfo> {LANDING_GEAR_STATE,Bit,Bitmap,XML,XMLEntry,Group,INI,Language,Style,DB,DBResult,Menu,Text,PlayerText,Text3D,PlayerText3D,File,Float,CUSTOM_TAG_TYPES,_} </paraminfo>
			</param>
			<library>omp_core</library>  <summary>Displays a message in chat to all players.  This is a multi-player equivalent of  <a href="#SendClientMessage">SendClientMessage</a>.</summary>      <seealso name="SendClientMessage" />  <seealso name="SendPlayerMessageToAll" />  <remarks>Avoid using format specifiers in your messages without formatting the string that is sent.  It will result in crashes otherwise.</remarks>  <returns>This function always returns <b><c>1</c></b>.</returns> 
		</member>
		<member name="M:SendDeathMessage" syntax="SendDeathMessage(killer, killee, weapon)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerDeath"/>
			<param name="killer">
				The ID of the killer (can be <b><c>INVALID_PLAYER_ID</c></b>)
			</param>
			<param name="killee">
				The ID of the player that died
			</param>
			<param name="weapon">
				The <a href="https://www.open.mp/docs/scripting/resources/weaponids">reason</a>  (not always a weapon)  for the victim's death.  Special icons can also be used (<b><c>ICON_CONNECT</c></b> and <b><c>ICON_DISCONNECT</c></b>)
			</param>
			<library>omp_core</library>  <summary>Adds a death to the 'killfeed' on the right-hand side of the screen for all players.</summary>        <seealso name="SendDeathMessageToPlayer" />  <seealso name="OnPlayerDeath" />  <remarks>Death messages can be cleared by using a valid player ID for <paramref name="killee" />  that is not connected.</remarks>  <remarks>To show a death message for just a single player, use <a href="#SendDeathMessageToPlayer">SendDeathMessageToPlayer</a>.  </remarks>  <remarks>You can use NPCs to create your own custom death reasons. </remarks>  <returns>This function always returns <b><c>1</c></b>, even if the function fails to execute.  The  function fails to execute (no death message shown) if <paramref name="killee" /> is invalid.  If  <paramref name="reason" /> is invalid, a generic skull-and-crossbones icon is shown. <paramref name="killer"  /> being invalid (<b><c>INVALID_PLAYER_ID</c></b>) is valid.</returns> 
		</member>
		<member name="M:SetGameModeText" syntax="SetGameModeText(format[], ...)">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The gamemode name to display.  May be optionally formatted.
			</param>
			<param name="...">
				<paraminfo> {LANDING_GEAR_STATE,Bit,Bitmap,XML,XMLEntry,Group,INI,Language,Style,DB,DBResult,Menu,Text,PlayerText,Text3D,PlayerText3D,File,Float,CUSTOM_TAG_TYPES,_} </paraminfo>
			</param>
			<library>omp_core</library>  <summary>Set the name of the game mode, which appears in the server browser.</summary>   
		</member>
		<member name="M:SetObjectPos" syntax="SetObjectPos(objectid, x, y, z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="CA_SetObjectPos_DC"/>
			<param name="objectid">
				The ID of the object to set the position of.  Returned by <a href="#CreateObject">CreateObject</a>
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The x coordinate to position the object at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The y coordinate to position the object at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The z coordinate to position the object at
			</param>
			<library>omp_object</library>  <summary>Change the position of an object.</summary>          <seealso name="GetObjectPos" />  <seealso name="SetObjectRot" />  <seealso name="GetPlayerObjectPos" />  <seealso name="CreateObject" />  <returns>This function always returns <b><c>1</c></b>, even if the object specified does not exist.</returns> 
		</member>
		<member name="M:SetObjectRot" syntax="SetObjectRot(objectid, rotationX, rotationY, rotationZ)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="CA_SetObjectRot_DC"/>
			<param name="objectid">
				The ID of the object to set the rotation of
			</param>
			<param name="rotationX">
				<paraminfo>Float </paraminfo>
				The x rotation
			</param>
			<param name="rotationY">
				<paraminfo>Float </paraminfo>
				The y rotation
			</param>
			<param name="rotationZ">
				<paraminfo>Float </paraminfo>
				The z rotation
			</param>
			<library>omp_object</library>  <summary>Set the rotation of an object on the three axes (x, y and z).</summary>          <seealso name="GetObjectRot" />  <seealso name="GetObjectPos" />  <seealso name="CreateObject" />  <seealso name="SetPlayerObjectRot" />  <returns>This function always returns <b><c>1</c></b>, even if the object doesn't exist.</returns> 
		</member>
		<member name="M:SetPickupForPlayer" syntax="SetPickupForPlayer(playerid, id, model, type, x, y, z)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="id">
			</param>
			<param name="model">
			</param>
			<param name="type">
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
			</param>
			<library>omp_pickup</library> 
		</member>
		<member name="M:SetPlayer3DTextLabelVirtualWorld" syntax="SetPlayer3DTextLabelVirtualWorld(playerid, textid, virtualWorld)">
			<stacksize value="1"/>
			<param name="playerid">
			</param>
			<param name="textid">
				<paraminfo>PlayerText3D </paraminfo>
			</param>
			<param name="virtualWorld">
			</param>
			<library>omp_textlabel</library> 
		</member>
		<member name="M:SetPlayerArmour" syntax="SetPlayerArmour(playerid, armour)">
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player to set the armour of
			</param>
			<param name="armour">
				<paraminfo>Float </paraminfo>
				The amount of armour to set, as a percentage (float).  Values larger than <b><c>100</c></b>  are valid, but won't be displayed in the HUD's armour bar
			</param>
			<library>omp_player</library>  <summary>Set a player's armor level.</summary>      <seealso name="GetPlayerArmour" />  <seealso name="SetPlayerHealth" />  <seealso name="GetPlayerHealth" />  <remarks>Armour is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b></remarks>  <remarks>The function's name is armour, not armor (Americanized).</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player specified does not exist.  </returns> 
		</member>
		<member name="M:SetPlayerCameraLookAt" syntax="SetPlayerCameraLookAt(playerid, x, y, z, cut)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player whose camera to set
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The x coordinate for the player's camera to look at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The y coordinate for the player's camera to look at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The z coordinate for the player's camera to look at
			</param>
			<param name="cut">
				<paraminfo>t_CAM_MOVE </paraminfo>
				The style of the change.  Can be used to interpolate (change slowly) from old pos  to new pos using <b><c>CAMERA_MOVE</c></b>.  Added in <b>0.3e</b>.  Leave out for older versions  (optional=<b><c>CAMERA_CUT</c></b>)
			</param>
			<library>omp_player</library>  <summary>Set the direction a player's camera looks at.  Generally meant to be used in combination  with <a href="#SetPlayerCameraPos">SetPlayerCameraPos</a>.</summary>            <seealso name="SetPlayerCameraPos" />  <seealso name="SetCameraBehindPlayer" />  <seealso name="GetPlayerCameraPos" />  <seealso name="GetPlayerCameraFrontVector" />  <remarks>Using the camera functions directly after enabling spectator mode doesn't work.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The player specified does not exist.  </returns> 
		</member>
		<member name="M:SetPlayerCameraPos" syntax="SetPlayerCameraPos(playerid, x, y, z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				ID of the player
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The x coordinate to place the camera at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The y coordinate to place the camera at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The z coordinate to place the camera at
			</param>
			<library>omp_player</library>  <summary>Sets the camera to a specific position for a player.</summary>          <seealso name="SetPlayerCameraLookAt" />  <seealso name="SetCameraBehindPlayer" />  <remarks>You may also have to use <a href="#SetPlayerCameraLookAt">SetPlayerCameraLookAt</a> with  this function in order to work properly.</remarks>  <remarks>Use <a href="#SetCameraBehindPlayer">SetCameraBehindPlayer</a> to reset the camera to behind  the player.</remarks>  <remarks>Using the camera functions directly after enabling spectator mode doesn't work.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The player specified doesn't exist.  </returns> 
		</member>
		<member name="M:SetPlayerColor" syntax="SetPlayerColor(playerid, colour)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SSCANF_OnPlayerConnect"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerDeath"/>
			<param name="playerid">
				The ID of the player whose colour to set
			</param>
			<param name="colour">
				The colour to set.  Supports alpha values (<b>RGBA</b>)
			</param>
			<library>omp_player</library>  <summary>Set the colour of a player's nametag and marker (radar blip).</summary>      <seealso name="SetPlayerMarkerForPlayer" />  <seealso name="GetPlayerColor" />  <seealso name="ChangeVehicleColor" />  <remarks>This function will change player's colour for everyone, even if player's colour was changed  with <a href="#SetPlayerMarkerForPlayer">SetPlayerMarkerForPlayer</a> for any other player. </remarks>  <remarks>If used under <a href="#OnPlayerConnect">OnPlayerConnect</a>, the affecting player will  not see the colour in the TAB menu. </remarks> 
		</member>
		<member name="M:SetPlayerDrunkLevel" syntax="SetPlayerDrunkLevel(playerid, level)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<referrer name="RemovePlayerDrunk"/>
			<param name="playerid">
				The ID of the player to set the drunkenness of
			</param>
			<param name="level">
				The level of drunkenness to set
			</param>
			<library>omp_player</library>  <summary>Sets the drunk level of a player which makes the player's camera sway and vehicles hard  to control.</summary>      <seealso name="GetPlayerDrunkLevel" />  <remarks>  Players' drunk level will automatically decrease over time, based on their FPS (players with <b><c>50</c></b>  FPS will lose <b><c>50</c></b> 'levels' per second.  This is useful for determining a player's FPS!).<br  />  In <b>0.3a</b> the drunk level will decrement and stop at <b><c>2000</c></b>.  In <b>0.3b+</b>  the drunk level decrements to <b><c>0</c></b>)<br />  Levels over <b><c>2000</c></b> make the player drunk (camera swaying and vehicles difficult to  control).<br />  Max drunk level is <b><c>50000</c></b>.<br />  While the drunk level is above <b><c>5000</c></b>, the player's HUD (radar etc.) will be hidden.  </remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player is not connected.  </returns> 
		</member>
		<member name="M:SetPlayerFacingAngle" syntax="SetPlayerFacingAngle(playerid, ang)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to set the facing angle of
			</param>
			<param name="ang">
				<paraminfo>Float </paraminfo>
				The angle the player should face
			</param>
			<library>omp_player</library>  <summary>Set a player's facing angle (z rotation).</summary>      <seealso name="GetPlayerFacingAngle" />  <seealso name="SetPlayerPos" />  <remarks>Angles are reversed in GTA:SA; 90 degrees would be East in the real world, but in GTA:SA  90 degrees is in fact West.  North and South are still 0/360 and 180.  To convert this, simply do  <b>360 - angle</b>.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The player specified does not exist.  </returns> 
		</member>
		<member name="M:SetPlayerHealth" syntax="SetPlayerHealth(playerid, health)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="SwitchPlayerTeam"/>
			<referrer name="OnPlayerSpawn"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="playerid">
				The ID of the player to set the health of
			</param>
			<param name="health">
				<paraminfo>Float </paraminfo>
				The value to set the player's health to.  Max health that can be displayed in  the HUD is <b><c>100</c></b>, though higher values are valid
			</param>
			<library>omp_player</library>  <summary>Set the health of a player.</summary>      <seealso name="GetPlayerHealth" />  <seealso name="GetPlayerArmour" />  <seealso name="SetPlayerArmour" />  <remarks>Health is obtained rounded to integers: set <b><c>50.15</c></b>, but get <b><c>50.0</c></b></remarks>  <remarks>If a player's health is set to <b><c>0</c></b> or a minus value, they will die instantly.</remarks>  <remarks>If a player's health is below <b><c>10</c></b> or above <b><c>98303</c></b>, their health  bar will flash. </remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player specified does not exist.  </returns> 
		</member>
		<member name="M:SetPlayerInterior" syntax="SetPlayerInterior(playerid, interiorid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerSpawn"/>
			<param name="playerid">
				The ID of the player to set the interior of
			</param>
			<param name="interiorid">
				The <a href="https://www.open.mp/docs/scripting/resources/interiorids">interior  ID</a> to  set the player in
			</param>
			<library>omp_player</library>  <summary>Set a player's interior.  A list of currently known interiors and their positions can be  found <a href="https://www.open.mp/docs/scripting/resources/interiorids">here</a>.</summary>      <seealso name="GetPlayerInterior" />  <seealso name="LinkVehicleToInterior" />  <seealso name="OnPlayerInteriorChange" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player is not connected.  </returns> 
		</member>
		<member name="M:SetPlayerPos" syntax="SetPlayerPos(playerid, x, y, z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="playerid">
				The ID of the player to set the position of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The x coordinate to position the player at
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The y coordinate to position the player at
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The z coordinate to position the player at
			</param>
			<library>omp_player</library>  <summary>Set a player's position.</summary>          <seealso name="SetPlayerPosFindZ" />  <seealso name="SetPlayerFacingAngle" />  <seealso name="GetPlayerPos" />  <seealso name="SetVehiclePos" />  <seealso name="GetVehiclePos" />  <remarks>Using this function on a player in a vehicle will instantly remove them from the vehicle.  Useful for quickly ejecting players.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player specified does not exist.  </returns> 
		</member>
		<member name="M:SetPlayerScore" syntax="SetPlayerScore(playerid, score)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="DestroyPickupBomb"/>
			<referrer name="DefusePickupBomb"/>
			<param name="playerid">
				The ID of the player to set the score of
			</param>
			<param name="score">
				The value to set the player's score to
			</param>
			<library>omp_player</library>  <summary>Set a player's score.  Players' scores are shown in the scoreboard (shown by holding the  TAB key).</summary>      <seealso name="GetPlayerScore" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player specified does not exist.  </returns> 
		</member>
		<member name="M:SetPlayerVelocity" syntax="SetPlayerVelocity(playerid, x, y, z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="playerid">
				The player to apply the speed to
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the x axis
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the y axis
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The velocity (speed) on the z axis
			</param>
			<library>omp_player</library>  <summary>Set a player's velocity on the x, y and z axes.</summary>          <seealso name="GetPlayerVelocity" />  <seealso name="SetVehicleVelocity" />  <seealso name="GetVehicleVelocity" />  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player is not connected.  </returns> 
		</member>
		<member name="M:SetServerRuleFlags" syntax="SetServerRuleFlags(rule[], flags)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="rule">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="flags">
				<paraminfo>E_SERVER_RULE_FLAGS </paraminfo>
			</param>
			<library>omp_core</library> 
		</member>
		<member name="M:SetTeamCount" syntax="SetTeamCount(count)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="count">
				Number of teams the gamemode knows
			</param>
			<library>omp_class</library>  <summary>This function is used to change the amount of teams used in the gamemode.  It has no obvious  way of being used, but can help to indicate the number of teams used for better (more effective)  internal handling.  This function should only be used in the <a href="#OnGameModeInit">OnGameModeInit</a>  callback.  Important: You can pass 2 billion here if you like, this function has no effect at all.</summary>    <seealso name="GetPlayerTeam" />  <seealso name="SetPlayerTeam" /> 
		</member>
		<member name="M:SetTimerEx" syntax="SetTimerEx(functionName[], interval, repeating, specifiers[], ...)">
			<attribute name="native"/>
			<referrer name="pc_cmd_st"/>
			<referrer name="OnPlayerEnterDynamicCP"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="functionName">
				<paraminfo> [] </paraminfo>
				The name of a public function to call when the timer expires
			</param>
			<param name="interval">
				Interval in milliseconds
			</param>
			<param name="repeating">
				<paraminfo>bool </paraminfo>
				Whether the timer should be called repeatedly (can only be stopped with <a  href="#KillTimer">KillTimer</a>) or only once
			</param>
			<param name="specifiers">
				<paraminfo> [] </paraminfo>
				Special format indicating the types of values the timer will pass
			</param>
			<param name="...">
				<paraminfo> {LANDING_GEAR_STATE,Bit,Bitmap,XML,XMLEntry,Group,INI,Language,Style,DB,DBResult,Menu,Text,PlayerText,Text3D,PlayerText3D,File,Float,CUSTOM_TAG_TYPES,_} </paraminfo>
				Indefinite number of arguments to pass (must follow format specified in previous parameter)
			</param>
			<library>omp_core</library>  <summary>Sets a timer to call a function after the specified interval.  This variant ('Ex') can pass  parameters (such as a player ID) to the function.</summary>            <seealso name="SetTimer" />  <seealso name="KillTimer" />  <seealso name="CallLocalFunction" />  <seealso name="CallRemoteFunction" />  <remarks>Timer IDs are never used twice.  You can use KillTimer() on a timer ID and it won't matter  if it's running or not. </remarks>  <remarks>The function that should be called must be public. </remarks>  <remarks>The use of many timers will result in increased memory/cpu usage. </remarks>  <remarks>  <b>Specifier syntax:</b><br />  <ul>  <li><b><c>i</c></b> - integer</li>  <li><b><c>d</c></b> - integer</li>  <li><b><c>a</c></b> - array The next parameter must be an integer (<b><c>"i"</c></b>) with the  array's size</li>  <li><b><c>s</c></b> - string</li>  <li><b><c>f</c></b> - float</li>  <li><b><c>b</c></b> - boolean</li>  </ul>  </remarks>  <returns>The ID of the timer that was started.  Timer IDs start at <b><c>1</c></b> and are never  reused.  There are no internal checks to verify that the parameters passed are valid (e.g.  duration  not a minus value).</returns> 
		</member>
		<member name="M:SetVehicleAngularVelocity" syntax="SetVehicleAngularVelocity(vehicleid, x, y, z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to set the velocity of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The amount of velocity in the angular x direction
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The amount of velocity in the angular y direction 
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The amount of velocity in the angular z direction
			</param>
			<library>omp_vehicle</library>  <summary>Sets the angular x, y and z velocity of a vehicle.</summary>          <seealso name="SetVehicleVelocity" />  <seealso name="GetVehicleVelocity" />  <remarks>This function has no effect on un-occupied vehicles and does not effect trains.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The vehicle does not exist.  </returns> 
		</member>
		<member name="M:SetVehicleBeenOccupied" syntax="SetVehicleBeenOccupied(vehicleid, occupied)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="vehicleid">
			</param>
			<param name="occupied">
				<paraminfo>bool </paraminfo>
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:SetVehicleDead" syntax="SetVehicleDead(vehicleid, dead)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="vehicleid">
			</param>
			<param name="dead">
				<paraminfo>bool </paraminfo>
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:SetVehicleOccupiedTick" syntax="SetVehicleOccupiedTick(vehicleid, ticks)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="vehicleid">
			</param>
			<param name="ticks">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:SetVehicleRespawnTick" syntax="SetVehicleRespawnTick(vehicleid, ticks)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="vehicleid">
			</param>
			<param name="ticks">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:SetVehicleVelocity" syntax="SetVehicleVelocity(vehicleid, x, y, z)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="vehicleid">
				The ID of the vehicle to set the velocity of
			</param>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The velocity in the x direction
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The velocity in the y direction 
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The velocity in the z direction
			</param>
			<library>omp_vehicle</library>  <summary>Sets the x, y and z velocity of a vehicle.</summary>          <remarks>This function has no affect on un-occupied vehicles and does not affect trains.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The vehicle does not exist.  </returns> 
		</member>
		<member name="M:ShowPlayerDialog" syntax="ShowPlayerDialog(playerid, dialogid, style, title[], body[], button1[], button2[], ...)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player to show the dialog to
			</param>
			<param name="dialogid">
				An ID to assign this dialog to, so responses can be processed.  Max dialogid  is <b><c>32767</c></b>.  Using negative values will close any open dialog
			</param>
			<param name="style">
				<paraminfo>t_DIALOG_STYLE </paraminfo>
				The style of the dialog
			</param>
			<param name="title">
				<paraminfo> [] </paraminfo>
				The title at the top of the dialog.  The length of the title can not exceed  more than 64 characters before it starts to cut off
			</param>
			<param name="body">
				<paraminfo> [] </paraminfo>
				The text to display in the main dialog.  Use <b><c>\n</c></b> to start a new line  and <b><c>\t</c></b> to tabulate.  May be optionally formatted.
			</param>
			<param name="button1">
				<paraminfo> [] </paraminfo>
				The text on the left button
			</param>
			<param name="button2">
				<paraminfo> [] </paraminfo>
				The text on the right button.  Leave it blank ( "" ) to hide it
			</param>
			<param name="...">
				<paraminfo> {LANDING_GEAR_STATE,Bit,Bitmap,XML,XMLEntry,Group,INI,Language,Style,DB,DBResult,Menu,Text,PlayerText,Text3D,PlayerText3D,File,Float,CUSTOM_TAG_TYPES,_} </paraminfo>
			</param>
			<library>omp_dialog</library>  <summary>Shows the player a synchronous (only one at a time) dialog box.</summary>                <seealso name="TextDrawShowForPlayer" />  <seealso name="OnDialogResponse" />  <remarks>Use colour embedding for multiple colours in the text. </remarks>  <remarks>Using <b><c>-1</c></b> as dialogid closes all dialogs currently shown on the client's screen.  </remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player is not connected.<br />  </returns> 
		</member>
		<member name="M:ShowVehicle" syntax="ShowVehicle(vehicleid)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="vehicleid">
			</param>
			<library>omp_vehicle</library> 
		</member>
		<member name="M:SpawnPlayer" syntax="SpawnPlayer(playerid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="ForcePerkSelection"/>
			<param name="playerid">
				The ID of the player to spawn
			</param>
			<library>omp_class</library>  <summary>(Re)Spawns a player.</summary>    <seealso name="SetSpawnInfo" />  <seealso name="AddPlayerClass" />  <seealso name="OnPlayerSpawn" />  <remarks>Kills the player if they are in a vehicle and then they spawn with a bottle in their hand.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  This means the player is not connected.  </returns> 
		</member>
		<member name="M:Streamer_OnItemStreamIn" syntax="Streamer_OnItemStreamIn(type, id, forplayerid)">
			<stacksize value="1"/>
			<param name="type">
			</param>
			<param name="id">
				<paraminfo> {Text3D,_} </paraminfo>
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:Streamer_OnItemStreamOut" syntax="Streamer_OnItemStreamOut(type, id, forplayerid)">
			<stacksize value="1"/>
			<param name="type">
			</param>
			<param name="id">
				<paraminfo> {Text3D,_} </paraminfo>
			</param>
			<param name="forplayerid">
			</param>
		</member>
		<member name="M:Streamer_OnPluginError" syntax="Streamer_OnPluginError(error[])">
			<stacksize value="1"/>
			<param name="error">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:SwitchPlayerTeam" syntax="SwitchPlayerTeam(playerid)">
			<attribute name="public"/>
			<stacksize value="4"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="SetPlayerHealth"/>
			<dependency name="player_change_team"/>
			<dependency name="true"/>
			<param name="playerid">
			</param>
		</member>
		<member name="M:TogglePlayerSpectating" syntax="TogglePlayerSpectating(playerid, toggle)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="ForcePerkSelection"/>
			<referrer name="OnDialogResponse"/>
			<param name="playerid">
				The ID of the player who should spectate
			</param>
			<param name="toggle">
				<paraminfo>bool </paraminfo>
				<b><c>1</c></b> to enable spectating and <b><c>0</c></b> to disable
			</param>
			<library>omp_player</library>  <summary>Toggle whether a player is in spectator mode or not.  While in spectator mode a player can  spectate (watch) other players and vehicles.  After using this function, either <a href="#PlayerSpectatePlayer">PlayerSpectatePlayer</a>  or <a href="#PlayerSpectateVehicle">PlayerSpectateVehicle</a> needs to be used.</summary>      <seealso name="PlayerSpectatePlayer" />  <seealso name="PlayerSpectateVehicle" />  <remarks>If the player is not loaded in before setting the spectate status to false, the connection  can be closed unexpectedly.</remarks>  <remarks>When spectator mode is disabled, <a href="#OnPlayerSpawn">OnPlayerSpawn</a> will automatically  be called, if you wish to restore player to state before spectating, you will have to handle that  in <a href="#OnPlayerSpawn">OnPlayerSpawn</a>.  Note also, that player can also go to class selection  before if they used F4 during spectate, a player also CAN die in spectate mode due to various glitches.</remarks>  <remarks>When a player is in spectate mode their HUD is hidden, making it useful for setting a player's  camera without the HUD.  Also, objects near the player's camera will be streamed in, making this  useful for interpolating cameras.</remarks>  <returns>  <b><c>1</c></b>: The function executed successfully.<br />  <b><c>0</c></b>: The function failed to execute.  The player does not exist.  </returns> 
		</member>
		<member name="M:UsePlayerPedAnims" syntax="UsePlayerPedAnims()">
			<attribute name="native"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<library>omp_core</library>  <summary>Uses standard player walking animation (animation of the CJ skin) instead of custom animations  for every skin (e.g.  skating for skater skins).</summary>  <seealso name="ApplyAnimation" />  <seealso name="ClearAnimations" />  <remarks>Only works when placed under <a href="#OnGameModeInit">OnGameModeInit</a>.</remarks>  <remarks>Not using this function causes two-handed weapons (not dual-handed - a single weapon that  is held by both hands) to be held in only one hand.</remarks> 
		</member>
		<member name="M:VectorSize" syntax="VectorSize(x, y, z)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_GetRoomCenter"/>
			<param name="x">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the x axis
			</param>
			<param name="y">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the y axis
			</param>
			<param name="z">
				<paraminfo>Float </paraminfo>
				The vector's magnitude on the z axis
			</param>
			<library>omp_core</library>  <summary>Returns the norm (length) of the provided vector.</summary>        <seealso name="GetPlayerDistanceFromPoint" />  <seealso name="GetVehicleDistanceFromPoint" />  <seealso name="floatsqroot" />  <returns>The norm (length) of the provided vector as a float.</returns> 
		</member>
		<member name="M:_@BULLET_HIT_TYPE" syntax="_@BULLET_HIT_TYPE()">
			<tagname value="t_BULLET_HIT_TYPE"/>
			<stacksize value="1"/>
			<dependency name="__BULLET_HIT_TYPE"/>
		</member>
		<member name="M:_@CAMERA_MOVE" syntax="_@CAMERA_MOVE()">
			<tagname value="CAMERA_MOVE"/>
			<stacksize value="1"/>
		</member>
		<member name="M:_@CAM_MODE" syntax="_@CAM_MODE()">
			<tagname value="t_CAM_MODE"/>
			<stacksize value="1"/>
			<dependency name="__CAM_MODE"/>
		</member>
		<member name="M:_@CARMODTYPE" syntax="_@CARMODTYPE()">
			<tagname value="t_CARMODTYPE"/>
			<stacksize value="1"/>
			<dependency name="MAX_CARMODS"/>
		</member>
		<member name="M:_@CLICK_SOURCE" syntax="_@CLICK_SOURCE()">
			<tagname value="t_CLICK_SOURCE"/>
			<stacksize value="1"/>
			<dependency name="__CLICK_SOURCE"/>
		</member>
		<member name="M:_@CONNECTION_STATUS" syntax="_@CONNECTION_STATUS()">
			<tagname value="t_CONNECTION_STATUS"/>
			<stacksize value="1"/>
			<dependency name="__CONNSTAT"/>
		</member>
		<member name="M:_@CP_TYPE" syntax="_@CP_TYPE()">
			<tagname value="t_CP_TYPE"/>
			<stacksize value="1"/>
			<dependency name="__CP_TYPE"/>
		</member>
		<member name="M:_@DIALOG_STYLE" syntax="_@DIALOG_STYLE()">
			<tagname value="t_DIALOG_STYLE"/>
			<stacksize value="1"/>
			<dependency name="__DIALOG_STYLE"/>
		</member>
		<member name="M:_@DOWNLOAD_REQUEST" syntax="_@DOWNLOAD_REQUEST()">
			<tagname value="t_DOWNLOAD_REQUEST"/>
			<stacksize value="1"/>
			<dependency name="__DOWNLOAD_REQUEST"/>
		</member>
		<member name="M:_@EDIT_RESPONSE" syntax="_@EDIT_RESPONSE()">
			<tagname value="t_EDIT_RESPONSE"/>
			<stacksize value="1"/>
			<dependency name="__EDIT_RESPONSE"/>
		</member>
		<member name="M:_@FIGHT_STYLE" syntax="_@FIGHT_STYLE()">
			<tagname value="t_FIGHT_STYLE"/>
			<stacksize value="1"/>
			<dependency name="MAX_FIGHT_STYLES"/>
		</member>
		<member name="M:_@FORCE_SYNC" syntax="_@FORCE_SYNC()">
			<tagname value="t_FORCE_SYNC"/>
			<stacksize value="1"/>
			<dependency name="__FORCE_SYNC"/>
		</member>
		<member name="M:_@HTTP_ERROR" syntax="_@HTTP_ERROR()">
			<tagname value="t_HTTP_ERROR"/>
			<stacksize value="1"/>
			<dependency name="__HTTP_ERROR"/>
		</member>
		<member name="M:_@HTTP_METHOD" syntax="_@HTTP_METHOD()">
			<tagname value="t_HTTP_METHOD"/>
			<stacksize value="1"/>
			<dependency name="__HTTP_METHOD"/>
		</member>
		<member name="M:_@KEY" syntax="_@KEY()">
			<tagname value="t_KEY"/>
			<stacksize value="1"/>
			<dependency name="__KEY"/>
		</member>
		<member name="M:_@LANDING_GEAR_STATE" syntax="_@LANDING_GEAR_STATE()">
			<tagname value="t_LANDING_GEAR_STATE"/>
			<stacksize value="1"/>
			<dependency name="__LANDING_GEAR_STATE"/>
		</member>
		<member name="M:_@MAPICON" syntax="_@MAPICON()">
			<tagname value="t_MAPICON"/>
			<stacksize value="1"/>
			<dependency name="__MAPICON"/>
		</member>
		<member name="M:_@OBJECT_MATERIAL_SIZE" syntax="_@OBJECT_MATERIAL_SIZE()">
			<tagname value="t_OBJECT_MATERIAL_SIZE"/>
			<stacksize value="1"/>
			<dependency name="__OBJECT_MATERIAL_SIZE"/>
		</member>
		<member name="M:_@OBJECT_MATERIAL_TEXT_ALIGN" syntax="_@OBJECT_MATERIAL_TEXT_ALIGN()">
			<tagname value="t_OBJECT_MATERIAL_TEXT_ALIGN"/>
			<stacksize value="1"/>
			<dependency name="__OBJECT_MATERIAL_TEXT_ALIGN"/>
		</member>
		<member name="M:_@PLAYER_MARKERS_MODE" syntax="_@PLAYER_MARKERS_MODE()">
			<tagname value="t_PLAYER_MARKERS_MODE"/>
			<stacksize value="1"/>
			<dependency name="__PLAYER_MARKERS_MODE"/>
		</member>
		<member name="M:_@PLAYER_RECORDING_TYPE" syntax="_@PLAYER_RECORDING_TYPE()">
			<tagname value="t_PLAYER_RECORDING_TYPE"/>
			<stacksize value="1"/>
			<dependency name="__PLAYER_RECORDING_TYPE"/>
		</member>
		<member name="M:_@PLAYER_STATE" syntax="_@PLAYER_STATE()">
			<tagname value="t_PLAYER_STATE"/>
			<stacksize value="1"/>
			<dependency name="__PLAYER_STATE"/>
		</member>
		<member name="M:_@SELECT_OBJECT" syntax="_@SELECT_OBJECT()">
			<tagname value="t_SELECT_OBJECT"/>
			<stacksize value="1"/>
			<dependency name="__SELECT_OBJECT"/>
		</member>
		<member name="M:_@SPECIAL_ACTION" syntax="_@SPECIAL_ACTION()">
			<tagname value="t_SPECIAL_ACTION"/>
			<stacksize value="1"/>
			<dependency name="__SPECIAL_ACTION"/>
		</member>
		<member name="M:_@SPECTATE_MODE" syntax="_@SPECTATE_MODE()">
			<tagname value="t_SPECTATE_MODE"/>
			<stacksize value="1"/>
			<dependency name="__SPECTATE_MODE"/>
		</member>
		<member name="M:_@SQLITE_OPEN" syntax="_@SQLITE_OPEN()">
			<tagname value="SQLITE_OPEN"/>
			<stacksize value="1"/>
			<dependency name="__SQLITE_OPEN"/>
		</member>
		<member name="M:_@TEXT_DRAW_ALIGN" syntax="_@TEXT_DRAW_ALIGN()">
			<tagname value="t_TEXT_DRAW_ALIGN"/>
			<stacksize value="1"/>
			<dependency name="__TEXT_DRAW_ALIGN"/>
		</member>
		<member name="M:_@TEXT_DRAW_FONT" syntax="_@TEXT_DRAW_FONT()">
			<tagname value="t_TEXT_DRAW_FONT"/>
			<stacksize value="1"/>
			<dependency name="__TEXT_DRAW_FONT"/>
		</member>
		<member name="M:_@VARTYPE" syntax="_@VARTYPE()">
			<tagname value="t_VARTYPE"/>
			<stacksize value="1"/>
			<dependency name="__VARTYPE"/>
		</member>
		<member name="M:_@VEHICLE_DOOR_STATUS" syntax="_@VEHICLE_DOOR_STATUS()">
			<tagname value="t_VEHICLE_DOOR_STATUS"/>
			<stacksize value="1"/>
			<dependency name="__VEHICLE_DOOR_STATUS"/>
		</member>
		<member name="M:_@VEHICLE_LIGHT_STATUS" syntax="_@VEHICLE_LIGHT_STATUS()">
			<tagname value="t_VEHICLE_LIGHT_STATUS"/>
			<stacksize value="1"/>
			<dependency name="__VEHICLE_LIGHT_STATUS"/>
		</member>
		<member name="M:_@VEHICLE_MODEL_INFO" syntax="_@VEHICLE_MODEL_INFO()">
			<tagname value="t_VEHICLE_MODEL_INFO"/>
			<stacksize value="1"/>
			<dependency name="MAX_VEHICLE_MODEL_INFOS"/>
		</member>
		<member name="M:_@VEHICLE_PANEL_STATUS" syntax="_@VEHICLE_PANEL_STATUS()">
			<tagname value="t_VEHICLE_PANEL_STATUS"/>
			<stacksize value="1"/>
			<dependency name="__VEHICLE_PANEL_STATUS"/>
		</member>
		<member name="M:_@VEHICLE_TYRE_STATUS" syntax="_@VEHICLE_TYRE_STATUS()">
			<tagname value="t_VEHICLE_TYRE_STATUS"/>
			<stacksize value="1"/>
			<dependency name="__VEHICLE_TYRE_STATUS"/>
		</member>
		<member name="M:_@WEAPON" syntax="_@WEAPON()">
			<tagname value="t_WEAPON"/>
			<stacksize value="1"/>
			<dependency name="MAX_WEAPONS"/>
		</member>
		<member name="M:_@WEAPONSKILL" syntax="_@WEAPONSKILL()">
			<tagname value="t_WEAPONSKILL"/>
			<stacksize value="1"/>
			<dependency name="MAX_WEAPONSKILLS"/>
		</member>
		<member name="M:_@WEAPONSTATE" syntax="_@WEAPONSTATE()">
			<tagname value="t_WEAPONSTATE"/>
			<stacksize value="1"/>
			<dependency name="__WEAPONSTATE"/>
		</member>
		<member name="M:_@WEAPON_SLOT" syntax="_@WEAPON_SLOT()">
			<tagname value="t_WEAPON_SLOT"/>
			<stacksize value="1"/>
			<dependency name="MAX_WEAPON_SLOTS"/>
		</member>
		<member name="M:_@anglemode" syntax="_@anglemode()">
			<tagname value="anglemode"/>
			<stacksize value="1"/>
			<dependency name="anglemode"/>
		</member>
		<member name="M:_@filemode" syntax="_@filemode()">
			<tagname value="filemode"/>
			<stacksize value="1"/>
			<dependency name="filemode"/>
		</member>
		<member name="M:_@floatround_method" syntax="_@floatround_method()">
			<tagname value="floatround_method"/>
			<stacksize value="1"/>
			<dependency name="floatround_method"/>
		</member>
		<member name="M:_@seek_whence" syntax="_@seek_whence()">
			<tagname value="seek_whence"/>
			<stacksize value="1"/>
			<dependency name="seek_whence"/>
		</member>
		<member name="M:_SSCANF_IncludeStates" syntax="_SSCANF_IncludeStates()">
			<stacksize value="1"/>
			<automaton name="_ALS"/>
			<library>sscanf</library>  <remarks>  Common ALS boilerplate to ensure that all the <c>&lt;_ALS : &gt;</c> states  are known to the compiler.  </remarks> 
		</member>
		<member name="M:__IsObjectNoCameraCol" syntax="__IsObjectNoCameraCol(objectid)">
			<tagname value="bool"/>
			<attribute name="native"/>
			<referrer name="HasObjectCameraCollision"/>
			<referrer name="HasPlayerObjectCameraCollision"/>
			<param name="objectid">
			</param>
		</member>
		<member name="M:__findpubvar" syntax="__findpubvar(__name[])">
			<stacksize value="71"/>
			<referrer name="getpubvar"/>
			<referrer name="setpubvar"/>
			<referrer name="existpubvar"/>
			<dependency name="__unpackpubvar"/>
			<dependency name="cellbits"/>
			<dependency name="charbits"/>
			<param name="__name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:__killtimer" syntax="__killtimer(id)">
			<attribute name="native"/>
			<referrer name="settimer"/>
			<param name="id">
			</param>
			<library>time</library> 
		</member>
		<member name="M:__print" syntax="__print(string[])">
			<attribute name="native"/>
			<referrer name="print"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<library>console</library> 
		</member>
		<member name="M:__settimer" syntax="__settimer(callback[], milliseconds, multishot)">
			<attribute name="native"/>
			<referrer name="settimer"/>
			<param name="callback">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="milliseconds">
			</param>
			<param name="multishot">
				<paraminfo>bool </paraminfo>
			</param>
			<library>time</library> 
		</member>
		<member name="M:__unpackpubvar" syntax="__unpackpubvar(dest[], source[], maxlength)">
			<attribute name="native"/>
			<referrer name="__findpubvar"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="maxlength">
			</param>
		</member>
		<member name="M:clreol" syntax="clreol()">
			<stacksize value="1"/>
			<library>console</library>  <summary>Clear the rest of the line.</summary>  <seealso name="clrscr"/>  <return>This function always returns 0.</return>  <remarks>Clears the line at which the cursor is, from the position of the cursor to the right  margin of the console.  This function does not move the cursor.</remarks> 
		</member>
		<member name="M:clrscr" syntax="clrscr()">
			<stacksize value="1"/>
			<library>console</library>  <summary>Clear the screen.</summary>  <seealso name="clreol"/>  <return>This function always returns 0.</return>  <remarks>Clears the display and moves the cursor to the upper left corner.</remarks> 
		</member>
		<member name="M:cvttimestamp" syntax="cvttimestamp(__seconds1970, &amp;__year, &amp;__month, &amp;__day, &amp;__hour, &amp;__minute, &amp;__second)">
			<stacksize value="3"/>
			<referrer name="settimestamp"/>
			<param name="__seconds1970">
			</param>
			<param name="__year">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="__month">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="__day">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="__hour">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="__minute">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="__second">
				<paraminfo> &amp; </paraminfo>
			</param>
			<library>time</library>  <summary>Convert a time-stamp into a date and time.</summary>  <param name="year">This will hold the year upon return.</param>  <param name="month">This will hold the month (1-12) upon return.</param>  <param name="day">This will hold the day of (1-31) the month upon return.</param>  <param name="hour">This will hold the hour (0-23) upon return.</param>  <param name="minute">This will hold the minute (0-59) upon return.</param>  <param name="second">This will hold the second (0-59) upon return.</param>  <remarks>  Some file and system functions return time-stamps as the number of seconds since midnight, 1  January 1970, which is the start of the UNIX system epoch.  This function allows to convert these  time stamps into date and time fields.  <c>cvttimestamp</c> = <em>ConVerT TIMESTAMP</em>.  </remarks>  <returns>This function always returns 0.</returns> 
		</member>
		<member name="M:delay" syntax="delay(__milliseconds)">
			<stacksize value="5"/>
			<dependency name="tickcount"/>
			<param name="__milliseconds">
			</param>
			<library>time</library>  <summary>Halts execution a number of milliseconds.</summary>  <param name="milliseconds">The delay, in milliseconds.</param>  <remarks>  On some platforms, the <c>sleep</c> instruction also delays for a given number of milliseconds.  The difference between the <c>sleep</c> instruction and the <c>delay</c> function is that the  <c>delay</c> function does not yield events and the <c>sleep</c> instruction typically yields.  When yielding events, any pending events are handled.  As a result, the <c>delay</c> function  waits without handling any pending events and the <c>sleep</c> instruction waits and deals with  events.  </remarks>  <returns>This function always returns 0.</returns> 
		</member>
		<member name="M:diskfree" syntax="diskfree(volume[])">
			<stacksize value="1"/>
			<param name="volume">
				<paraminfo> [] </paraminfo>
				The name of the volume on systems that support multiple disks or multiple memory  cards.  On single-volume systems, it  is optional.
			</param>
			<library>file</library>  <summary>Returns the free disk space.</summary>    <remarks>  The maximum size that can be supported 2048 GiB (2 terabyte).  </remarks>  <returns>The amount of free space in KiB.</returns> 
		</member>
		<member name="M:existpubvar" syntax="existpubvar(__name[])">
			<tagname value="bool"/>
			<stacksize value="4"/>
			<dependency name="__findpubvar"/>
			<param name="__name">
				<paraminfo> [] </paraminfo>
			</param>
			<library>core</library>  <summary>Checks if a specific public variable exists in the current script.</summary>  <param name="name">The public variable's name.</param>  <seealso name="getpubvar"/>  <seealso name="setpubvar"/>  <seealso name="numpubvars"/>  <returns>Does the variable exist?</returns> 
		</member>
		<member name="M:fflush" syntax="fflush(__handle)">
			<tagname value="bool"/>
			<stacksize value="3"/>
			<dependency name="false"/>
			<dependency name="flength"/>
			<dependency name="true"/>
			<param name="__handle">
				<paraminfo>File </paraminfo>
			</param>
			<library>file</library>  <summary>Flush a file to disk (ensure all writes are complete).</summary>  <param name="handle">The file handle returned by <a href="#fopen">fopen</a> or <a href="#ftemp">ftemp</a></param>  <remarks>Actually just calls <c>flength</c> as that has to force a flush to be accurate.</remarks> 
		</member>
		<member name="M:flength" syntax="flength(handle)">
			<attribute name="native"/>
			<referrer name="fflush"/>
			<param name="handle">
				<paraminfo>File </paraminfo>
				The file handle returned by <a href="#fopen">fopen</a> or <a href="#ftemp">ftemp</a>
			</param>
			<library>file</library>  <summary>Returns the length of a file.</summary>    <remarks>Using an <b>invalid handle</b> will crash your server! Get a <b>valid handle</b> by using  <a href="#fopen">fopen</a> or <a href="#ftemp">ftemp</a>.</remarks>  <returns>The length of a file, in bytes.</returns> 
		</member>
		<member name="M:float" syntax="float(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator*(Float:,_:)"/>
			<referrer name="operator/(Float:,_:)"/>
			<referrer name="operator/(_:,Float:)"/>
			<referrer name="operator+(Float:,_:)"/>
			<referrer name="operator-(Float:,_:)"/>
			<referrer name="operator-(_:,Float:)"/>
			<referrer name="operator==(Float:,_:)"/>
			<referrer name="operator!=(Float:,_:)"/>
			<referrer name="operator&gt;(Float:,_:)"/>
			<referrer name="operator&gt;(_:,Float:)"/>
			<referrer name="operator&gt;=(Float:,_:)"/>
			<referrer name="operator&gt;=(_:,Float:)"/>
			<referrer name="operator&lt;(Float:,_:)"/>
			<referrer name="operator&lt;(_:,Float:)"/>
			<referrer name="operator&lt;=(Float:,_:)"/>
			<referrer name="operator&lt;=(_:,Float:)"/>
			<param name="value">
				Integer value to convert to a float
			</param>
			<library>float</library>  <summary>Converts an integer into a float.</summary>    <seealso name="floatround"/>  <seealso name="floatstr"/>  <returns>The given integer as a float.</returns> 
		</member>
		<member name="M:floatabs" syntax="floatabs(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
				The float value to get the absolute value of
			</param>
			<library>float</library>  <summary>This function returns the absolute value of float.</summary>    <returns>The absolute value of the float (as a float value).</returns> 
		</member>
		<member name="M:floatadd" syntax="floatadd(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator+(Float:,_:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
				First float
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
				Second float
			</param>
			<library>float</library>  <summary>Adds two floats together.  This function is redundant as the standard operator (+) does  the same thing.</summary>      <seealso name="floatsub"/>  <seealso name="floatmul"/>  <seealso name="floatdiv"/>  <returns>The sum of the two given floats.</returns> 
		</member>
		<member name="M:floatcmp" syntax="floatcmp(oper1, oper2)">
			<attribute name="native"/>
			<referrer name="operator==(Float:,Float:)"/>
			<referrer name="operator==(Float:,_:)"/>
			<referrer name="operator!=(Float:,Float:)"/>
			<referrer name="operator!=(Float:,_:)"/>
			<referrer name="operator&gt;(Float:,Float:)"/>
			<referrer name="operator&gt;(Float:,_:)"/>
			<referrer name="operator&gt;(_:,Float:)"/>
			<referrer name="operator&gt;=(Float:,Float:)"/>
			<referrer name="operator&gt;=(Float:,_:)"/>
			<referrer name="operator&gt;=(_:,Float:)"/>
			<referrer name="operator&lt;(Float:,Float:)"/>
			<referrer name="operator&lt;(Float:,_:)"/>
			<referrer name="operator&lt;(_:,Float:)"/>
			<referrer name="operator&lt;=(Float:,Float:)"/>
			<referrer name="operator&lt;=(Float:,_:)"/>
			<referrer name="operator&lt;=(_:,Float:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
				The first float value to compare
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
				The second float value to compare
			</param>
			<library>float</library>  <summary>floatcmp can be used to compare float values to each other, to validate the comparison.</summary>      <returns><b><c>0</c></b> if value does match, <b><c>1</c></b> if the first value is bigger and <b><c>-1</c></b>  if the 2nd value is bigger.</returns> 
		</member>
		<member name="M:floatcos" syntax="floatcos(value, mode)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
				The angle from which to get the cosine
			</param>
			<param name="mode">
				<paraminfo>anglemode </paraminfo>
				The angle mode (see below) to use, depending on the value entered (optional=<b><c>radian</c></b>)
			</param>
			<library>float</library>  <summary>Get the cosine from a given angle.  The input angle may be in radians, degrees or grades.</summary>      <seealso name="floatsin"/>  <seealso name="floattan"/>  <remarks>GTA/open.mp use <b>degrees</b> for angles in most circumstances, for example  <a href="#GetPlayerFacingAngle">GetPlayerFacingAngle</a>.  Therefore, it is most likely you'll want to use the <b>degrees</b> angle mode, not radians. </remarks>  <remarks>Also note that angles in GTA are counterclockwise; 270 is East and 90 is West.  South  is still 180 and North still 0/360. </remarks>  <remarks>  <b>Angle modes:</b><p/>  <ul>  <li>radian</li>  <li>degrees</li>  <li>grades </li>  </ul>  </remarks>  <returns>The cosine of the value entered.</returns> 
		</member>
		<member name="M:floatdiv" syntax="floatdiv(dividend, divisor)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator/(Float:,_:)"/>
			<referrer name="operator/(_:,Float:)"/>
			<param name="dividend">
				<paraminfo>Float </paraminfo>
				First float
			</param>
			<param name="divisor">
				<paraminfo>Float </paraminfo>
				Second float (dividates the first float.)
			</param>
			<library>float</library>  <summary>Divide one float by another one.  Redundant as the division operator (/) does the same thing.</summary>      <seealso name="floatadd"/>  <seealso name="floatsub"/>  <seealso name="floatmul"/>  <returns>The quotient of the two given floats.</returns> 
		</member>
		<member name="M:floatmul" syntax="floatmul(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator*(Float:,_:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
				First Float
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
				Second Float, the first one gets multiplied with
			</param>
			<library>float</library>  <summary>Multiplies two floats with each other.</summary>      <seealso name="floatadd"/>  <seealso name="floatsub"/>  <seealso name="floatdiv"/>  <returns>The product of the two given floats.</returns> 
		</member>
		<member name="M:floatpower" syntax="floatpower(value, exponent)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
				The value to raise to a power, as a floating-point number
			</param>
			<param name="exponent">
				<paraminfo>Float </paraminfo>
				The exponent is also a floating-point number.  It may be zero or negative
			</param>
			<library>float</library>  <summary>Raises the given value to the power of the exponent.</summary>      <seealso name="floatsqroot"/>  <seealso name="floatlog"/>  <returns>The result of 'value' to the power of 'exponent'.</returns> 
		</member>
		<member name="M:floatround" syntax="floatround(value, method)">
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="OnPlayerTakeDamage"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
				The value to round
			</param>
			<param name="method">
				<paraminfo>floatround_method </paraminfo>
				The floatround method to use (optional=<b><c>floatround_round</c></b>)
			</param>
			<library>float</library>  <summary>Round a floating point number to an integer value.</summary>      <seealso name="float"/>  <seealso name="floatstr"/>  <remarks>  <b>Rounding methods:</b><p/>  <ul>  <li><b><c>floatround_round</c></b> - round to the nearest integer.  A fractional part of exactly  0.5 rounds upwards (this is the default).</li>  <li><b><c>floatround_floor</c></b> - round downwards.</li>  <li><b><c>floatround_ceil</c></b> - round upwards.</li>  <li><b><c>floatround_tozero</c></b> - round downwards for positive values and upwards for negative  values ("truncate").</li>  </ul>  </remarks>  <returns>The rounded value as an integer.</returns> 
		</member>
		<member name="M:floatsin" syntax="floatsin(value, mode)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_RayCastExplode"/>
			<referrer name="CA_IsPlayerNearWater"/>
			<referrer name="CA_IsPlayerFacingWater"/>
			<referrer name="CA_IsPlayerBlocked"/>
			<referrer name="CA_GetRoomCenter"/>
			<referrer name="pc_cmd_cjump"/>
			<referrer name="OnPlayerRequestClass"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
				The angle from which to get the sine
			</param>
			<param name="mode">
				<paraminfo>anglemode </paraminfo>
				The angle mode (see below) to use, depending on the value entered (optional=<b><c>radian</c></b>)
			</param>
			<library>float</library>  <summary>Get the sine from a given angle.  The input angle may be in radians, degrees or grades.</summary>      <seealso name="floattan"/>  <seealso name="floatcos"/>  <remarks>GTA/open.mp use <b>degrees</b> for angles in most circumstances, for example  <a href="#GetPlayerFacingAngle">GetPlayerFacingAngle</a>.  Therefore, it is most likely you'll want to use the <b>degrees</b> angle mode, not radians. </remarks>  <remarks>Also note that angles in GTA are counterclockwise; 270 is East and 90 is West.  South  is still 180 and North still 0/360. </remarks>  <remarks>  <b>Angle modes:</b><p/>  <ul>  <li>radian</li>  <li>degrees</li>  <li>grades </li>  </ul>  </remarks>  <returns>The sine of the value entered.</returns> 
		</member>
		<member name="M:floatsqroot" syntax="floatsqroot(value)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="CA_GetRoomHeight"/>
			<referrer name="OnPlayerTakeDamage"/>
			<referrer name="OnPlayerWeaponShot"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
				The value to calculate the square root of
			</param>
			<library>float</library>  <summary>Calculates the square root of given value.</summary>    <seealso name="floatpower"/>  <seealso name="floatlog"/>  <remarks>This function raises a "domain" error if the input value is negative.  You may use <a href="#floatabs">floatabs</a>  to get the absolute (positive) value.</remarks>  <returns>The square root of the input value, as a float.</returns> 
		</member>
		<member name="M:floatsub" syntax="floatsub(oper1, oper2)">
			<tagname value="Float"/>
			<attribute name="native"/>
			<referrer name="operator-(Float:,_:)"/>
			<referrer name="operator-(_:,Float:)"/>
			<param name="oper1">
				<paraminfo>Float </paraminfo>
				First Float
			</param>
			<param name="oper2">
				<paraminfo>Float </paraminfo>
				Second Float (gets subtracted from the first float.)
			</param>
			<library>float</library>  <summary>Subtracts one float from another one.  Note that this function has no real use, as one can  simply use the standard operator (-) instead.</summary>      <seealso name="floatadd"/>  <seealso name="floatmul"/>  <seealso name="floatdiv"/>  <returns>The difference of the two given floats.</returns> 
		</member>
		<member name="M:funcidx" syntax="funcidx(name[])">
			<attribute name="native"/>
			<referrer name="OnFilterScriptExit"/>
			<referrer name="OnGameModeExit"/>
			<param name="name">
				<paraminfo> [] </paraminfo>
				The name of the public function to get the ID of
			</param>
			<library>core</library>  <summary>This function returns the ID of a public function by its name.</summary>    <seealso name="CallLocalFunction"/>  <seealso name="CallRemoteFunction"/>  <returns>The ID of the function (IDs start at <b><c>0</c></b>). <b><c>-1</c></b> if the function  doesn't exist.</returns> 
		</member>
		<member name="M:getchar" syntax="getchar(echo)">
			<stacksize value="1"/>
			<param name="echo">
				<paraminfo>bool </paraminfo>
				If <c>true</c>, the character read from the keyboard is echoed on the display.
			</param>
			<library>console</library>  <summary>Read one character.</summary>    <seealso name="getstring"/>  <return>The numeric code for the character that is read (this is usually the ASCII code).</return> 
		</member>
		<member name="M:getpubvar" syntax="getpubvar(__name[])">
			<stacksize value="5"/>
			<dependency name="__findpubvar"/>
			<dependency name="cellbits"/>
			<dependency name="charbits"/>
			<param name="__name">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:getstring" syntax="getstring(string[], size, pack)">
			<stacksize value="1"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				
			</param>
			<param name="size">
				
			</param>
			<param name="pack">
				<paraminfo>bool </paraminfo>
				
			</param>
			<library>console</library>  <summary>Read a line.</summary>        <seealso name="getchar"/>  <return>The number of characters read, excluding the terminating null character.</return>  <remarks>Function <c>getstring</c> stops reading when either the enter key is typed or the  maximum length is reached.  The maximum length is in cells (not characters) and it includes a   terminating null character.  The function can read both packed and unpacked strings; when reading  a packed string, the function may read more characters than the size parameter specifies, since  each cell holds multiple characters.</remarks> 
		</member>
		<member name="M:getvalue" syntax="getvalue(base, end, ...)">
			<stacksize value="1"/>
			<param name="base">
				Must be between 2 and 36, use 10 for decimal or 16 for hexadecimal.
			</param>
			<param name="end">
				The character code that terminates the input.  More than one character may be listed.
			</param>
			<param name="...">
			</param>
			<library>console</library>  <summary>Read a number.</summary>      <param name="..."></param>  <seealso name="getstring"/>  <return>The value that is read.</return>  <remarks>Read a value (a signed number) from the keyboard.  The <c>getvalue</c> function allows  you to read in a numeric radix from 2 to 36 (the base parameter) with decimal radix by default.  By default the input ends when the user types the enter key, but one or more different keys may  be selected (the end parameter and subsequent). In the list of terminating keys, a positive  number (like <c>'\r'</c>) displays the key and terminates input, and a negative number terminates  input without displaying the terminating key.</remarks> 
		</member>
		<member name="M:gotoxy" syntax="gotoxy(x, y)">
			<tagname value="bool"/>
			<stacksize value="1"/>
			<param name="x">
				
			</param>
			<param name="y">
				The new cursor position.
			</param>
			<library>console</library>  <summary>Set cursor location.</summary>      <seealso name="clrscr"/>  <return><c>true</c> if the cursor moved and <c>false</c> if the requested position is invalid.</return>  <remarks>Sets the cursor position on the console.  The upper left corner is at <c>(1,1)</c>.</remarks> 
		</member>
		<member name="M:main" syntax="main()">
			<attribute name="entry"/>
			<stacksize value="1"/>
		</member>
		<member name="M:numpubvars" syntax="numpubvars()">
			<stacksize value="3"/>
			<dependency name="cellbits"/>
			<dependency name="charbits"/>
		</member>
		<member name="M:pc_cmd_cjump" syntax="pc_cmd_cjump(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="13"/>
			<dependency name="operator-(Float:,_:)"/>
			<dependency name="operator+(Float:,_:)"/>
			<dependency name="operator+(Float:,Float:)"/>
			<dependency name="operator*(Float:,Float:)"/>
			<dependency name="Float:operator=(_:)"/>
			<dependency name="GetPlayerVehicleID"/>
			<dependency name="GetVehicleModel"/>
			<dependency name="GetVehicleVelocity"/>
			<dependency name="GetVehicleZAngle"/>
			<dependency name="SSCANF__"/>
			<dependency name="SetVehicleAngularVelocity"/>
			<dependency name="SetVehicleVelocity"/>
			<dependency name="__file"/>
			<dependency name="__line"/>
			<dependency name="degrees"/>
			<dependency name="floatcos"/>
			<dependency name="floatsin"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_rustler" syntax="pc_cmd_rustler(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="15"/>
			<dependency name="CreateVehicle"/>
			<dependency name="DestroyPlayerVehicle"/>
			<dependency name="GetPlayerFacingAngle"/>
			<dependency name="GetPlayerPos"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PlayerInfo"/>
			<dependency name="PutPlayerInVehicle"/>
			<dependency name="player_vehicle"/>
			<dependency name="random"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:pc_cmd_st" syntax="pc_cmd_st(playerid, params[])">
			<attribute name="public"/>
			<stacksize value="7"/>
			<dependency name="SendClientMessage"/>
			<dependency name="SetTimerEx"/>
			<dependency name="false"/>
			<param name="playerid">
			</param>
			<param name="params">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:print" syntax="print(__string[], __foreground, __background)">
			<stacksize value="3"/>
			<dependency name="__print"/>
			<param name="__string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="__foreground">
			</param>
			<param name="__background">
			</param>
			<library>console</library>  <summary>Prints a string to the server console (not in-game chat) and logs (server_log.txt).</summary>  <param name="string">The string to print</param>  <param name="foreground">The string to print</param>  <param name="background">Colour codes for the foreground and the background of the text string;  see function <c>setattr</c> for a list of colours.  When left at <c>-1</c>, the default colours  are used.  Note that a terminal or a host application may not support colours.</param>  <seealso name="printf"/>  <return>This function always returns 0.</return> 
		</member>
		<member name="M:random" syntax="random(max)">
			<attribute name="native"/>
			<referrer name="pc_cmd_rustler"/>
			<param name="max">
				The range of values (from <b><c>0</c></b> to <b><c>max-1</c></b>) that can be returned
			</param>
			<library>core</library>  <summary>Get a pseudo-random number.</summary>    <remarks>Using a value smaller than <b><c>1</c></b> gives weird values.</remarks>  <remarks>The standard random number generator of pawn is likely a linear congruential pseudo-random  number generator with a range and a period of 2^31.  Linear congruential pseudo-random number generators  suffer from serial correlation (especially in the low bits) and it is unsuitable for applications  that require high-quality random numbers.</remarks>  <returns>A random number ranging from <b><c>0</c></b> to <b><c>max-1</c></b>.</returns> 
		</member>
		<member name="M:setattr" syntax="setattr(foreground, background)">
			<stacksize value="1"/>
			<param name="foreground">
				The string to print
			</param>
			<param name="background">
				Colour codes for the foreground and the background of the text string;  see function <c>setattr</c> for a list of colours.  When left at <c>-1</c>, the default colours  are used.  Note that a terminal or a host application may not support colours
			</param>
			<library>console</library>  <summary>Set text colours.</summary>      <seealso name="clrscr"/>  <return>This function always returns 0.</return>  <remarks>On most systems, the colour value must be a value between zero and seven, as per the  ANSI escape sequences, ISO 6429.  Predefined constants for the colours are <c>black (0)</c>,  <c>red (1)</c>, <c>green (2)</c>, <c>yellow (3)</c>, <c>blue (4)</c>, <c>magenta (5)</c>,  <c>cyan (6)</c>, and <c>white (7)</c>.</remarks> 
		</member>
		<member name="M:setdate" syntax="setdate(year, month, day)">
			<stacksize value="1"/>
			<referrer name="settimestamp"/>
			<param name="year">
				The year to set; if set to <c>"cellmin"</c>, the default value, it is ignored.
			</param>
			<param name="month">
				The month to set; if set to <c>"cellmin"</c>, the default value, it is ignored.
			</param>
			<param name="day">
				The day to set; if set to <c>"cellmin"</c>, the default value, it is ignored.
			</param>
			<library>time</library>  <summary>Set the system date.</summary>        <returns>This function always returns 0.</returns>  <remarks>The date fields are kept in a valid range.  For example, when setting the month to 13,  it wraps back to 1 - this is always wrapped to the min/max, not modulo.</remarks> 
		</member>
		<member name="M:setpubvar" syntax="setpubvar(__name[], __value)">
			<stacksize value="5"/>
			<dependency name="__findpubvar"/>
			<dependency name="cellbits"/>
			<dependency name="charbits"/>
			<param name="__name">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="__value">
			</param>
		</member>
		<member name="M:settime" syntax="settime(hour, minute, second)">
			<stacksize value="1"/>
			<referrer name="settimestamp"/>
			<param name="hour">
				The hour to set, in the range 0-23; if set to <c>"cellmin"</c>, the default value,  it is ignored.
			</param>
			<param name="minute">
				The minute to set, in the range 0-59; if set to <c>"cellmin"</c>, the default value,  it is ignored.
			</param>
			<param name="second">
				The second to set, in the range 0-59; if set to <c>"cellmin"</c>, the default value,  it is ignored.
			</param>
			<library>time</library>  <summary>Set the system time.</summary>        <returns>This function always returns 0.</returns>  <remarks>The time fields are kept in a valid range.  For example, when setting the hour to 24, it  wraps back to 0 - this is always wrapped to the min/max, not modulo.</remarks> 
		</member>
		<member name="M:settimer" syntax="settimer(__milliseconds, __singleshot)">
			<stacksize value="5"/>
			<dependency name="__killtimer"/>
			<dependency name="__settimer"/>
			<param name="__milliseconds">
			</param>
			<param name="__singleshot">
				<paraminfo>bool </paraminfo>
			</param>
			<library>time</library>  <summary>Configure the event timer.</summary>  <param name="milliseconds">The number of milliseconds to wait before calling the <c>@timer</c>  callback function.  If the timer is repetitive, this is the interval.  When this parameter is 0  (zero), the timer is shut off.</param>  <param name="singleshot">If <c>false</c>, the timer is a repetitive timer; if <c>true</c> the  timer is shut off after invoking the <c>@timer</c> event once.</param>  <remarks>  See the chapter "Usage" for an example of this function, and the <c>@timer</c> event function.  </remarks>  <returns>This function always returns 0.</returns> 
		</member>
		<member name="M:settimestamp" syntax="settimestamp(__seconds1970)">
			<stacksize value="16"/>
			<dependency name="cvttimestamp"/>
			<dependency name="setdate"/>
			<dependency name="settime"/>
			<param name="__seconds1970">
			</param>
			<library>time</library>  <summary>Sets the date and time with a single value.</summary>  <param name="seconds1970">The number of seconds that have elapsed since 00:00 hours, 1 January  1970.  This particular date, 1 January 1970, is the <em>UNIX system epoch</em>.</param>  <returns>This function always returns 0.</returns>  <remarks>The function <c>getdate</c> returns the number of seconds since 1 January 1970.</remarks> 
		</member>
		<member name="M:sscanf" syntax="sscanf(data[], format[], ...)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> [] </paraminfo>
				The input string containing the data to parse out.
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format description of what the input data should contain.
			</param>
			<param name="...">
				<paraminfo> {T_WEAPON,Float,_} </paraminfo>
			</param>
			<library>sscanf</library>      <remarks>  The main entry point.  See the readme for vast amounts of information on how  to call this function and all the details on what it does.  This is a macro  that calls <c>SSCANF__</c> and passes the current file and line number as  well for improved error messages.  </remarks> 
		</member>
		<member name="M:sscanf_vehicle" syntax="sscanf_vehicle(string[])">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="SSCANF_GetSimilarValue"/>
			<dependency name="strval"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The current word being parsed out of the <c>sscanf</c> input.
			</param>
			<library>sscanf</library>    <remarks>  The default implementation of <c>k&lt;vehicle&gt;</c>.  Finds the closest  vehicle by Levenshtein distance to the input.  </remarks> 
		</member>
		<member name="M:sscanf_weapon" syntax="sscanf_weapon(string[])">
			<attribute name="public"/>
			<stacksize value="10"/>
			<dependency name="SSCANF_GetSimilarValue"/>
			<dependency name="strval"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The current word being parsed out of the <c>sscanf</c> input.
			</param>
			<library>sscanf</library>    <remarks>  The default implementation of <c>k&lt;weapon&gt;</c>.  Finds the closest  weapon by Levenshtein distance to the input.  </remarks> 
		</member>
		<member name="M:strcat" syntax="strcat(dest[], source[], maxlength)">
			<attribute name="native"/>
			<referrer name="strcopy"/>
			<referrer name="ForcePerkSelection"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
				The string to store the two concatenated strings in
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
				The source string
			</param>
			<param name="maxlength">
				The maximum length of the destination (optional=<b><c>sizeof (dest)</c></b>)
			</param>
			<library>string</library>  <summary>This function concatenates (joins together) two strings into the destination string.</summary>        <seealso name="strcmp"/>  <seealso name="strfind"/>  <seealso name="strtok"/>  <seealso name="strdel"/>  <seealso name="strins"/>  <seealso name="strlen"/>  <seealso name="strmid"/>  <seealso name="strpack"/>  <seealso name="strval"/>  <returns>The length of the new destination string.</returns> 
		</member>
		<member name="M:strcmp" syntax="strcmp(string1[], string2[], ignorecase, length)">
			<attribute name="native"/>
			<referrer name="strequal"/>
			<param name="string1">
				<paraminfo> [] </paraminfo>
				The first string to compare
			</param>
			<param name="string2">
				<paraminfo> [] </paraminfo>
				The second string to compare
			</param>
			<param name="ignorecase">
				<paraminfo>bool </paraminfo>
				When set to true, the case doesn't matter - HeLLo is the same as Hello.  When false, they're not the same (optional=<b><c>0</c></b>)
			</param>
			<param name="length">
				When this length is set, the first x chars will be compared - doing "Hello"  and "Hell No" with a length of 4 will say it's the same string (optional=<b><c>cellmax</c></b>)
			</param>
			<library>string</library>  <summary>Compares two strings to see if they are the same.</summary>          <seealso name="strfind"/>  <seealso name="strtok"/>  <seealso name="strdel"/>  <seealso name="strins"/>  <seealso name="strlen"/>  <seealso name="strmid"/>  <seealso name="strpack"/>  <seealso name="strval"/>  <seealso name="strcat"/>  <seealso name="strequal"/>  <remarks>This function returns <b><c>0</c></b> if either string is empty.  Check for null strings  with <c>isnull()</c>.  If you do not, for example, people can login to anyone's account by simply  entering a blank password. </remarks>  <remarks>  <code>  #if !defined isnull<p/>  &#9;#define isnull(%1) ((!(%1[0])) || (((%1[0]) == '\1') &amp;&amp; (!(%1[1]))))<p/>  #endif  </code>  </remarks>  <remarks>If you compare strings from a text file, you should take in to account the 'carriage return'  and 'new line' special characters (\r \n), as they are included, when using fread.</remarks>  <returns>  <b><c>0</c></b> if strings match each other on given length;.<p/>  <b><c>1</c></b> or <b><c>-1</c></b> if some character do not match: <c>string1[i] - string2[i]</c>.<p/>  <b>difference in number of characters</b> if one string matches only part of another string.  </returns> 
		</member>
		<member name="M:strcopy" syntax="strcopy(__dest[], __source[], __maxlength)">
			<stacksize value="5"/>
			<referrer name="SSCANF_OnGameModeInit"/>
			<referrer name="ForcePerkSelection"/>
			<dependency name="EOS"/>
			<dependency name="strcat"/>
			<param name="__dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="__source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="__maxlength">
			</param>
			<library>string</library>  <summary>Copies a string into the destination string.</summary>  <param name="dest">The string to copy the source string into</param>  <param name="source">The source string</param>  <param name="maxlength">The maximum length of the destination (optional=<b><c>sizeof (dest)</c></b>)</param>  <seealso name="strcat"/>  <returns>The length of the new destination string.</returns> 
		</member>
		<member name="M:strequal" syntax="strequal(__string1[], __string2[], __ignorecase, __length)">
			<tagname value="bool"/>
			<stacksize value="6"/>
			<dependency name="false"/>
			<dependency name="strcmp"/>
			<param name="__string1">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="__string2">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="__ignorecase">
				<paraminfo>bool </paraminfo>
			</param>
			<param name="__length">
			</param>
			<library>string</library>  <summary>Compares two strings to see if they are the same.</summary>  <param name="string1">The first string to compare</param>  <param name="string2">The second string to compare</param>  <param name="ignorecase">When set to true, the case doesn't matter - HeLLo is the same as Hello.  When false, they're not the same (optional=<b><c>0</c></b>)</param>  <param name="length">When this length is set, the first x chars will be compared - doing "Hello"  and "Hell No" with a length of 4 will say it's the same string (optional=<b><c>cellmax</c></b>)</param>  <seealso name="strcmp"/>  <remarks>This is a conveniece function that depends on <a href="#strcmp">strcmp</a>.</remarks>  <returns><b><c>true</c></b> if the strings match each other on given length, <b><c>false</c></b>  otherwise.</returns> 
		</member>
		<member name="M:strval" syntax="strval(string[])">
			<attribute name="native"/>
			<referrer name="sscanf_weapon"/>
			<referrer name="sscanf_vehicle"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
				The string you want to convert to an integer
			</param>
			<library>string</library>  <summary>Convert a string to an integer.</summary>    <seealso name="strcmp"/>  <seealso name="strfind"/>  <seealso name="strtok"/>  <seealso name="strdel"/>  <seealso name="strins"/>  <seealso name="strlen"/>  <seealso name="strmid"/>  <seealso name="strpack"/>  <seealso name="strcat"/>  <returns>The integer value of the string. <b><c>0</c></b> if the string is not numeric.</returns> 
		</member>
		<member name="M:tickcount" syntax="tickcount(&amp;granularity)">
			<attribute name="native"/>
			<referrer name="delay"/>
			<param name="granularity">
				<paraminfo> &amp; </paraminfo>
				Upon return, this value contains the number of ticks that the internal  system time will tick per second.  This value therefore indicates the accuracy of the return value  of this function (optional=<b><c>0</c></b>)
			</param>
			<library>time</library>  <summary>This function can be used as a replacement for <a href="#GetTickCount">GetTickCount</a>,  as it returns the number of milliseconds since the start-up of the server.</summary>    <returns>The number of milliseconds since start-up of the system.  For a 32-bit cell, this count  overflows after approximately 24 days of continuous operation.</returns> 
		</member>
		<member name="M:unformat" syntax="unformat(data[], format[], ...)">
			<stacksize value="1"/>
			<param name="data">
				<paraminfo> [] </paraminfo>
				The input string containing the data to parse out.
			</param>
			<param name="format">
				<paraminfo> [] </paraminfo>
				The format description of what the input data should contain.
			</param>
			<param name="...">
				<paraminfo> {T_WEAPON,Float,_} </paraminfo>
			</param>
			- include <sscanf2> first.  <library>sscanf</library>      <remarks>  An alternative spelling of <c>sscanf</c>, requested by Kalcor because the  original doesn't match the C specification for the format descriptor.  This  is a macro that calls <c>UNFORMAT__</c> and passes the current file and line  number as well for improved error messages.  </remarks> 
		</member>

	</members>
</doc>
